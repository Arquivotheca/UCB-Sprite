head     1.5;
branch   ;
access   ;
symbols  ;
locks    shirriff:1.5; strict;
comment  @ * @;


1.5
date     91.11.21.15.57.49;  author shirriff;  state Exp;
branches ;
next     1.4;

1.4
date     91.10.24.23.58.04;  author shirriff;  state Exp;
branches ;
next     1.3;

1.3
date     91.02.08.16.23.33;  author shirriff;  state Exp;
branches ;
next     1.2;

1.2
date     91.01.22.15.51.58;  author shirriff;  state Exp;
branches ;
next     1.1;

1.1
date     91.01.11.12.18.17;  author shirriff;  state Exp;
branches ;
next     ;


desc
@@


1.5
log
@*** empty log message ***
@
text
@#include <stdio.h>
#include <signal.h>
#include <sprite.h>
#include <sysStats.h>
#include <sospRecord.h>
#include <time.h>
#include <status.h>
#include <namehash.h>

extern long startSec;
extern long startUsec;

char *opname(), *status();

char *timeStr="";

long sec, usec;

void
dorec(tracePtr, machine)
    Sys_TracelogRecord *tracePtr;
    int machine;
{
    int *data;
    int type;
    int  len;
    data = (int *)&tracePtr->data;
    type = (tracePtr->recordLen&TRACELOG_TYPEMASK)>>16;
    len = (tracePtr->recordLen & TRACELOG_BYTEMASK);
    if (type != data[0]) {
	printf("Warning: type mismatch: %d vs %d\n", type, data[0]);
	type = data[0];
    }
    usec = tracePtr->time[1] + startUsec;
    sec = tracePtr->time[0] + startSec;
    if (usec>1000000) {
	sec++;
	usec -= 1000000;
    }
#if 0
    timeStr = ctime((time_t *)&sec);
    timeStr[19] = '\0';
    sprintf(timeStr+19,".%3.3d",usec/1000);
#endif
#if 0
    printf("%s.%3.3d: ", timeStr+4, usec/1000);
#endif
    switch (type) {
	case SOSP_GET_ATTR:
	    dogetattr(data, machine);
	    break;
	case SOSP_SET_ATTR:
	    dosetattr(data, machine);
	    break;
	case SOSP_LOOKUP:
	    dolookup(data, machine);
	    break;
	case SOSP_OPEN:
	    doopen(data, machine);
	    break;
	case SOSP_CLOSE:
	    doclose(data, machine);
	    break;
    }
}

char buf[10];

char *opnames[] = {"Import", "Export", "Open", "Stat", "SetStat",
     "MakeDevice", "Mkdir", "Unlink", "Rmdir", "Rename", "Link",
     "Link(2)"};

char *opname(x)
int x;
{
    if (x>=0 && x<sizeof(opnames)/sizeof(char *)) {
	return opnames[x];
    } else {
	sprintf(buf,"%x",x);
	return buf;
    }
}

char *status(x)
int x;
{
     if (x==0) return "success";
     if (x==FS_FILE_NOT_FOUND) return "not found";
     if (x==FS_NO_ACCESS) return "no access";
     if (x==FS_LOOKUP_REDIRECT) return "lookup redirect";
     if (x==FS_LOCAL_OP_INVALID) return "local op invalid";
     if (x==FS_IS_DIRECTORY) return "is directory";
     if (x==FS_NOT_DIRECTORY) return "not directory";
     if (x==FS_NOT_OWNER) return "not owner";
     if (x==FS_FILE_EXISTS) return "file exists";
     if (x==FS_DIR_NOT_EMPTY) return "dir not empty";
     sprintf(buf,"%x",x);
     return buf;
}

char *types[] = {"File", "Directory", "Symbolic link", "Remote link",
    "Device", "Remote device", "Local pipe", "Named pipe", "Pseudo dev",
    "Pseudo FS", "Extra file"};

char *filetype(x)
int x;
{
    if (x>=0 && x<sizeof(types)/sizeof(char *)) {
	return types[x];
    } else {
	sprintf(buf,"%x",x);
	return buf;
    }
}
@


1.4
log
@February version
@
text
@d5 1
a5 1
#include <kernel/sospRecord.h>
@


1.3
log
@*** empty log message ***
@
text
@d69 3
a71 3
char *opnames[] = {"Import", "Export", "Open", "GetAttrPath", "SetAttrPath",
     "MakeDevice", "MakeDir", "Remove", "RemoveDir", "Rename", "HardLink",
     "HardLink2"};
@


1.2
log
@*** empty log message ***
@
text
@d15 1
a15 1
char *timeStr;
d17 2
a25 1
    long sec, usec;
d40 1
d44 1
@


1.1
log
@Initial revision
@
text
@d8 1
d15 4
a18 1
dorec(tracePtr)
d20 1
a23 1
    int i;
a24 1
    char *timeStr;
d41 1
d46 6
d53 4
a56 1
	    dolookup(data);
d58 3
d67 2
a68 1
     "MakeDevice", "MakeDir", "Remove", "RemoveDir", "Rename", "HardLink"};
d96 15
@
