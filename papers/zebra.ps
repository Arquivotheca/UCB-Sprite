%!PS-Adobe-2.0
%%Title: sosp93  39
%%Creator: PrintMonitor
%%CreationDate: Monday, August 23, 1993
%%Pages: (atend)
%%BoundingBox: ? ? ? ?
%%PageBoundingBox: 18 8 594 784
%%For: 
%%DocumentProcSets: "(AppleDict md)" 71 0
%% © Copyright Apple Computer, Inc. 1989-92 All Rights Reserved.
%%EndComments
%%BeginProcSet: "(AppleDict md)" 71 0
userdict/LW{save statusdict/product get(LaserWriter)anchorsearch
exch pop{dup length 0 eq{pop 1}{( Plus)eq{2}{3}ifelse}ifelse}{0}ifelse exch restore}bind put
userdict/patchOK known not{save LW dup 1 ne exch 2 ne and false<1861AEDAE118A9F95F1629C0137F8FE656811DD93DFBEA65E947502E78BA12284B8A58EF0A3
2E272778DAA2ABEC72A84102D591E11D96BA61F57877B895A752D9BEAAC3DFD7D3220E2BDE7C036467464E0E836748F1DE7AB6216866F130CE7CFCEC8CE050B870C11881EE3E9D70919>{eexec}stopped{dup type/stringtype eq{pop}if}if and exch restore userdict/patchOK 3 -1 roll put} if
userdict/downloadOK known not{userdict/downloadOK{ vmstatus exch sub exch pop 120000 gt patchOK and}bind put}if
userdict/type42known known not{userdict/type42known systemdict/resourcestatus known{42/FontType resourcestatus{pop pop true}{false}ifelse }{false}ifelse put}if
type42known not downloadOK and {userdict begin /*charpath /charpath load def/charpathflag false def/charpath{userdict/charpathflag true put userdict/*charpath get exec userdict/charpathflag false put}bind def end}if
userdict/checkload known not{userdict/checkload{{pop exec} {save 3 dict begin/mystring 6050 string def
exch/endstring exch def{currentfile mystring readline not{stop}if endstring eq{exit}if}loop end restore pop}ifelse}bind put}if
userdict/LW+{LW 2 eq}bind put
userdict/ok known not{userdict/ok{systemdict/statusdict known dup{LW 0 gt and}if}bind put}if
systemdict/setobjectformat known{0 setobjectformat}if
systemdict/currentpacking known{currentpacking true setpacking}if
/md 270 dict def md begin
/av 71 def
/T true def/F false def/mtx matrix def/s75 75 string def/sa8 8 string def/sb8 8 string def
/sc8 8 string def/sd8 8 string def/s1 ( ) def/pxs 1 def/pys 1 def
/ns false def
1 0 mtx defaultmatrix dtransform exch atan/pa exch def/nlw .24 def/ppr [-32 -29.52 762 582.48] def
/pgr [0 0 0 0] def
/pgs 1 def/por true def/xb 500 array def/so true def/tso true def/fillflag false def/pnm 1 def/fmv true def
/sfl false def/ma 0 def/invertflag false def/dbinvertflag false def/xflip false def/yflip false def/noflips true def/scaleby96 false def/fNote true def/fBitStretch true def
/4colors false def/fg (Rvd\001\001\000\000\177) def
/bdf{bind def}bind def
/xdf{exch def}bdf
/xl{neg exch neg translate}bdf
/fp{pnsh 0 ne pnsv 0 ne and}bdf
/nop{}bdf/lnop[/nop load]cvx bdf
/vrb[
{fp{fg 6 get 0 ne{gsave stroke grestore}{gsave 1 setlinewidth pnsh pnsv scale stroke grestore}ifelse}if newpath}bind
/eofill load
dup
/newpath load
2 index
dup
{clip newpath}bind
{}bind
dup
2 copy
]def
/sgd systemdict/setpagedevice known{{2 dict begin/PreRenderingEnhance exch def/Policies 1 dict dup/PreRenderingEnhance 1 put def currentdict end setpagedevice}}{{pop}}ifelse bdf
/svsc systemdict/currentcolorscreen known{{currentcolorscreen/dkspf xdf/dkrot xdf/dkfreq xdf/dyspf xdf/dyrot xdf/dyfreq xdf/dmspf xdf/dmrot xdf/dmfreq xdf
/dcspf xdf/dcrot xdf/dcfreq xdf}}{{currentscreen/spf xdf/rot xdf/freq xdf}}ifelse bdf
/doop{vrb exch get exec}bdf
/psu{/udf xdf/tso xdf /fNote xdf/fBitStretch xdf/scaleby96 xdf/yflip xdf/xflip xdf
/invertflag xdf/dbinvertflag invertflag statusdict begin version cvr 47.0 ge product (LaserWriter) eq not and end invertflag and {not}if def
xflip yflip or{/noflips false def}if
/pgs xdf 2 index .72 mul exch div/pys xdf div .72 mul/pxs xdf ppr astore pop pgr astore pop/por xdf sn and/so xdf}bdf
/tab{userdict /11x17 known{userdict begin /11x17 load exec end}{statusdict /setpage known{statusdict begin 792 1224 1 setpage end}{statusdict /setpageparams known{statusdict begin 792 1224 0 1 setpageparams end}if}ifelse}ifelse}bdf
/a3Size{userdict /a3 known{userdict begin /a3 load exec end}{statusdict /setpageparams known{statusdict begin 842 1191 0 1 setpageparams end}if}ifelse}bdf
/txpose{fNote{smalls}{bigs}ifelse pgs get exec pxs pys scale ppr aload pop por{noflips{pop exch neg exch translate pop 1 -1 scale}if
xflip yflip and{pop exch neg exch translate 180 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg translate}if 
xflip yflip not and{pop exch neg exch translate pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0 translate}if yflip xflip not and{ppr 1 get neg ppr 0 get neg translate}if}
{noflips{translate pop pop 270 rotate 1 -1 scale}if xflip yflip and{translate pop pop 90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg translate}if
xflip yflip not and{translate pop pop 90 rotate ppr 3 get ppr 1 get neg sub neg 0 translate}if yflip xflip not and{translate pop pop 270 rotate ppr 2 get ppr 0 get neg sub neg 0 exch translate}if}ifelse
statusdict begin/waittimeout where{pop waittimeout 300 lt{statusdict/waittimeout 300 put}if}if end 
scaleby96{ppr aload pop 4 -1 roll add 2 div 3 1 roll add 2 div 2 copy translate .96 dup scale neg exch neg exch translate}if}bdf
/fr{4 copy pgr aload pop 3 -1 roll add 3 1 roll exch add 6 2 roll 3 -1 roll
sub 3 1 roll exch sub 3 -1 roll exch div 3 1 roll div exch scale pop pop xl}bdf
/obl{{0.212557 mul}{pop 0}ifelse}bdf
/sfd{ps fg 5 -1 roll get mul 100 div 0 ps 5 -1 roll obl ps neg 0 0 6a astore makefont setfont}bdf
/fnt{findfont sfd}bdf
/bt{sa 3 1 roll 3 index and put}bdf
/sa(\000\000\000\000\000\000\000\000\000\000)def
/fs{0 1 bt 1 2 bt 2 4 bt 3 8 bt 4 16 bt 5 32 bt 6 64 bt 7 128 bt sa exch 8 exch put}bdf
/mx1 matrix def
/mx2 matrix def
/mx3 matrix def
/bu{currentpoint 4colors{currentcmykcolor}{currentrgbcolor}ifelse currentlinewidth currentlinecap currentlinejoin 
currentdash exch aload length fg 5 sfl{1}{0}ifelse put pnsv pnsh 
2t aload pop 3a aload pop mx2 aload pop mx1 aload pop mtx currentmatrix aload pop
mx3 aload pop ps pm restore/ps xdf mx3 astore pop}bdf
/bn{/pm save def mx3 setmatrix newpath 0 0 moveto ct dup 39 get 0 exch getinterval cvx exec mtx astore setmatrix mx1 astore pop mx2 astore pop 3a 
astore pop 2t astore pop/pnsh xdf/pnsv xdf gw
/sfl fg 5 get 0 ne def array astore exch setdash setlinejoin setlinecap 
setlinewidth 4colors{mysetcmykcolor}{setrgbcolor}ifelse moveto}bdf
/fc{save vmstatus exch sub 50000 lt
{(%%[|0|]%%)=print flush}if pop restore}bdf
/tc{32768 div add 3 1 roll 32768 div add 2t astore pop}bdf
/3a [0 0 0] def
/2t 2 array def
/tp{3a astore pop}bdf
/tt{mx2 currentmatrix pop currentpoint 2 copy 2t aload pop qa 2 copy translate 3a aload pop exch dup 0 eq
{pop}{1 eq{-1 1}{1 -1}ifelse scale}ifelse rotate pop neg exch neg exch translate moveto}bdf
/te{mx2 setmatrix}bdf
/th{3 -1 roll div 3 1 roll exch div 2 copy mx1 scale pop scale/sfl true def}bdf
/tu{1 1 mx1 itransform scale/sfl false def}bdf
/ts{1 1 mx1 transform scale/sfl true def}bdf
/fz{/ps xdf}bdf
/dv{dup 0 ne{div}{pop}ifelse}bdf
/pop4{pop pop pop pop}bdf
/it{sfl{mx1 itransform}if}bdf
/gm{exch it moveto}bdf/rm{it rmoveto}bdf
/lm{currentpoint sfl{mx1 transform}if exch pop sub 0 exch it rmoveto}bdf
/fm{statusdict/manualfeed known}bdf
/se{statusdict exch/manualfeed exch put}bdf
/mf{dup/ma exch def 0 gt{fm se/t1 5 st ok ma 1 gt and{/t2 0 st/t3 0 st
statusdict/manualfeedtimeout 3600 put
}if}if}bdf
/jn{/statusdict where exch pop{statusdict exch /jobname exch put}if}bdf
/pen{pnm mul/pnsh xdf pnm mul/pnsv xdf pnsh setlinewidth}bdf
/min{2 copy gt{exch}if pop}bdf
/max{2 copy lt{exch}if pop}bdf
/dh{fg 6 1 put array astore dup {1 pxs div mul exch}forall astore exch pop exch pop exch setdash}bdf
/ih[currentdash]def
/rh{fg 6 0 put ih aload pop setdash}bdf
/dl{gsave nlw pys div setlinewidth 0 setgray}bdf
/dlin{exch currentpoint currentlinewidth 2 div dup
translate newpath moveto lineto currentpoint stroke grestore moveto}bdf
/lin{fg 6 get 0 ne{exch lineto currentpoint 0 doop moveto}
{exch currentpoint/pnlv xdf/pnlh xdf gsave newpath/@1 xdf/@2 xdf fp{pnlh @2 lt{pnlv @1 ge
{pnlh pnlv moveto @2 @1 lineto pnsh 0 rlineto
0 pnsv rlineto pnlh pnsh add pnlv pnsv add lineto pnsh neg 0 rlineto}
{pnlh pnlv moveto pnsh 0 rlineto @2 pnsh add @1 lineto 0 pnsv rlineto
pnsh neg 0 rlineto pnlh pnlv pnsv add lineto}ifelse}{pnlv @1 gt
{@2 @1 moveto pnsh 0 rlineto pnlh pnsh add pnlv lineto 0 pnsv rlineto
pnsh neg 0 rlineto @2 @1 pnsv add lineto}{pnlh pnlv moveto pnsh 0 rlineto
0 pnsv rlineto @2 pnsh add @1 pnsv add lineto pnsh neg 0 rlineto
0 pnsv neg rlineto}ifelse}ifelse
closepath fill}if @2 @1 grestore moveto}ifelse}bdf
/gw{/pnm fg 3 get fg 4 get div def}bdf
/lw{fg exch 4 exch put fg exch 3 exch put gw pnsv pnsh pen}bdf
/barc{/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdf
/@6 xdf/@7 xdf/@8 xdf gsave
@5 @7 add 2 div @6 @8 add 2 div translate newpath 0 0 moveto
@5 @7 sub @6 @8 sub mtx currentmatrix pop scale @1{newpath}if
0 0 0.5 @4 @3 arc @4 @3 sub abs 360 ge{closepath}if
mtx setmatrix @2 doop grestore}bdf
/ar{dup 0 eq barc}bdf
/ov{0 exch 360 exch true barc}bdf
/rc{dup/@t xdf 0 eq{4 copy 3 -1 roll eq 3 1 roll eq and{pnsv 2 div sub exch pnsh 2 div sub exch 4 2 roll pnsv 2 div add exch pnsh 2 div add exch
/@t 1 def}if}if currentpoint 6 2 roll newpath 4 copy 4 2 roll exch moveto 6 -1 roll lineto lineto lineto closepath @t doop moveto}bdf
/mup{dup pnsh 2 div le exch pnsv 2 div le or}bdf
/rr{/@1 xdf 2. div/@2 xdf 2. div/@3 xdf
/@4 xdf/@5 xdf/@6 xdf/@7 xdf
@7 @5 eq @6 @4 eq @2 mup or or{@7 @6 @5 @4 @1 rc}
{@4 @6 sub 2. div dup @2 lt{/@2 xdf}{pop}ifelse
@5 @7 sub 2. div dup @2 lt{/@2 xdf}{pop}ifelse
@1 0 eq{/@2 @2 pnsh 2 div 2 copy gt{sub def}{0 pop4}ifelse}if
currentpoint newpath
@4 @6 add 2. div @7 moveto
@4 @7 @4 @5 @2 arcto pop4
@4 @5 @6 @5 @2 arcto pop4
@6 @5 @6 @7 @2 arcto pop4
@6 @7 @4 @7 @2 arcto pop4
closepath @1 doop moveto}ifelse}bdf
/pr{gsave newpath/pl{exch moveto/pl{exch lineto}def}def}bdf
/pl{exch lineto}bdf
/ep{dup 0 eq{{moveto}{exch lin}{}{(%%[|1|]%%)= flush}pathforall
pop grestore}{doop grestore}ifelse currentpoint newpath moveto}bdf
/gr{64. div setgray}bdf
/savescreen{ns not{/ns true def systemdict/currentcolorscreen known{currentcolorscreen/pkspf xdf/pkrot xdf/pkfreq xdf/pyspf xdf/pyrot xdf/pyfreq xdf/pmspf xdf/pmrot xdf/pmfreq xdf
/pcspf xdf/pcrot xdf/pcfreq xdf}{currentscreen/sspf xdf/srot xdf/sfreq xdf}ifelse}if}bdf
/restorescreen{/ns false def systemdict/setcolorscreen known{pcfreq pcrot/pcspf load pmfreq pmrot/pmspf load pyfreq pyrot/pyspf load
pkfreq pkrot/pkspf load setcolorscreen}{sfreq srot/sspf load setscreen}ifelse}bdf
/pat{savescreen sa8 
copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sa8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}setscreen exch not{gr}{pop}ifelse}bdf
/sg{restorescreen gr}bdf
/cpat{savescreen 10 2 roll 7 -1 roll sa8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sa8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}8 -1 roll sb8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sb8
exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}9 -1 roll sc8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sc8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}10 -1 roll sd8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sd8
exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}psuedo1 dsc 4{4 -1 roll 1 exch 64 div sub}repeat mysetcmykcolor pop pop}bdf
systemdict/setcolorscreen known statusdict/processcolors known and{/psuedo1 lnop bdf/dsc/setcolorscreen load def}{/psuedo1{16{pop}repeat sa8 copy pop 9.375 pa por not{90 add}if{1 add 4 mul cvi sa8 exch get exch 1 add 4 mul cvi 7 sub bitshift 1 and}}bdf
/bwsc{setscreen dup gr 0 exch 0 exch 64 exch 64 exch 64 exch}bdf/dsc/bwsc load def
}ifelse
systemdict/setcmykcolor known{/mysetcmykcolor /setcmykcolor load def}{/mysetcmykcolor{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}bdf}ifelse
/dc{transform round .5 sub exch round .5 sub exch itransform}bdf
/sn{userdict/smooth4 known}bdf
/x8{3 bitshift}bdf
/x4{2 bitshift}bdf
/d4{-2 bitshift}bdf
/d8{-3 bitshift}bdf
/rb{15 add -4 bitshift 1 bitshift}bdf
/db{/@7 save def/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdf/@6 @5 @3 4 add mul def
dc translate scale/xdbit 1 1 idtransform abs/ydbit exch def abs def{0 0 1 ydbit add 1 10 rc clip}if
@1 0 eq @1 4 eq or{currentrgbcolor 1 setgray ydbit 0 1 ydbit add 1 2 rc setrgbcolor}if
@1 3 eq @1 7 eq or{1 setgray}{currentrgbcolor 2 index eq exch 2 index eq and exch pop{0 setgray}if}ifelse/@9 @1 0 eq @1 1 eq @1 3 eq or or dbinvertflag xor def/@13 @6 def
@2 fBitStretch or{/@10 @4 x4 def/@11 @3 x4 def/@12 @10 rb def/@13 @12 @11 mul def/@15 1 1 dtransform abs/calcY 1 index def round cvi/@14 exch def
abs/calcX 1 index def round cvi scaleby96 not{1 add}if def/@16 @15 rb def/@17 @16 @14 mul def}if
sn @13 60000 lt and @2 fBitStretch or and{mtx currentmatrix dup 1 get exch 2 get 0. eq exch 0. eq and @17 60000 lt and fBitStretch and{@16 3 bitshift @14 @9 [calcX 0 0 calcY 0 0]{@17 string @13 string
currentfile @6 string readhexstring pop 1 index @4 @3 @5 @12 @2 smooth4
@10 @11 @12 dup string 5 index @15 @14 @16 dup string stretch}imagemask}{@12 x8 @11 @9 [@10 0 0 @11 0 0]{@13 string
currentfile @6 string readhexstring pop 1 index @4 @3 @5 @12 @2 smooth4}imagemask}ifelse}{@5 3 bitshift @3 4 add @9 [@4 0 0 @3 0 2]{currentfile @6 string readhexstring pop}imagemask}ifelse
@7 restore}bdf
systemdict/setcmykcolor known{/psuedo lnop bdf/di/colorimage load def}{/routines[{.3 mul add 1}bind{.59 mul add 2}bind{.11 mul add round cvi str exch i exch put/i i 1 add def 0 0}bind]def
/psuedo{/i 0 def 0 exch 0 exch{exch routines exch get exec}forall pop pop str}bdf/bwi{pop pop image}bdf/di/bwi load def}ifelse
/cdb{/@7 save def/@1 xdf/@2 xdf/@3 xdf/@4 xdf/@5 xdf
systemdict/setcmykcolor known not{dc}if translate scale /@6 xdf
/@18 @5 dup 60000 ge{pop 60000}if string def @6 not{/str @18 0 @18 length 3 idiv getinterval def}if @4 @3 8 [@4 0 0 @3 0 0]@6{{currentfile @18 readhexstring pop}image}{{currentfile @18 readhexstring pop psuedo}false 3 di}ifelse @7 restore}bdf
/wd 16 dict def
/mfont 14 dict def
/mdf{mfont wcheck not{/mfont 14 dict def}if mfont begin xdf end}bdf
/cf{{1 index/FID ne{def}{pop pop}ifelse}forall}bdf/rf{/@1 exch def/@2 exch def
FontDirectory @2 known{cleartomark pop}{findfont dup begin dup length @1 add dict begin
cf{/Encoding macvec def}{Encoding dup length array copy/Encoding exch def
counttomark 2 idiv{Encoding 3 1 roll put}repeat}ifelse
pop
exec currentdict end end @2 exch definefont pop}ifelse}bdf
/bmbc{exch begin wd begin
/cr xdf
save
CharTable cr 6 mul 6 getinterval{}forall
/bitheight xdf/bitwidth xdf
.96 div/width xdf
Gkernmax add/XOffset xdf Gdescent add/YOffset xdf/rowbytes xdf
rowbytes 255 eq{0 0 0 0 0 0 setcachedevice}
{Gnormsize dup scale
width 0 XOffset YOffset bitwidth XOffset add bitheight YOffset add
setcachedevice
rowbytes 0 ne{
XOffset YOffset translate newpath 0 0 moveto
bitwidth bitheight scale
sn{
/xSmt bitwidth x4 def
/ySmt bitheight x4 def
/rSmt xSmt rb def
rSmt x8 ySmt true
[xSmt 0 0 ySmt neg 0 ySmt]
{rSmt ySmt mul string CharData cr get
1 index bitwidth bitheight rowbytes rSmt tso smooth4}
}{rowbytes 3 bitshift bitheight 4 add true
[bitwidth 0 0 bitheight neg 0 bitheight 2 add]
{CharData cr get}
}ifelse
imagemask
}if
}ifelse
restore
end end
}bdf
/bb{.96 exch div/Gnormsize mdf 2 index
/Gkernmax mdf 1 index/Gdescent mdf
3 index div 4 1 roll
2 index div 1. 5 2 roll
exch div 4 1 roll
4 array astore/FontBBox mdf
}bdf
/cdf{mfont/CharData get 3 1 roll put}bdf
/bf{
mfont begin
/FontType 3 def
/FontMatrix [1 0 0 1 0 0] def
/Encoding macvec def
/MFontType 0 def
/BuildChar/bmbc load def
end
mfont definefont pop
}bdf
/wi LW 1 eq{{gsave 0 0 0 0 0 0 0 0 moveto lineto lineto lineto closepath clip stringwidth grestore}bind}{/stringwidth load}ifelse def
/aps{0 get 124 eq}bdf
/xc{s75 cvs dup}bdf
/xp{put cvn}bdf
/scs{xc 3 67 put dup 0 95 xp}bdf
/sos{xc 3 79 xp}bdf
/sbs{xc 1 66 xp}bdf
/sis{xc 2 73 xp}bdf
/sob{xc 2 79 xp}bdf
/sss{xc 4 83 xp}bdf
/dd{exch 1 index add 3 1 roll add exch}bdf
/smc{moveto dup show}bdf
/ndf2{udf{dup /FontType get 0 eq{/FDepVector get{dup /FontType get 0 eq{ndf2}{dup /df2 known{begin df2 0 null put end
}{pop}ifelse}ifelse}forall}{/df2 known{dup begin df2 0 null put end}if}ifelse}{pop}ifelse}bdf
/kwn{FontDirectory 1 index known{findfont dup ndf2 exch pop}}bdf
/gl{1 currentgray sub setgray}bdf
/newmm{dup /FontType get 0 eq{dup maxlength dict begin{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall currentdict end
dup /FDepVector 2 copy get[exch 6 index exch 6 index exch{newmm 3 1 roll}forall pop pop] put dup
}{/mfont 10 dict def mfont begin/FontMatrix [1 0 0 1 0 0] def
/FontType 3 def/Encoding macvec def/df 1 index def/df2 1 array def/FontBBox [0 0 1 1] def/StyleCode 2 index def
/mbc{bcarray StyleCode get}def/BuildChar{exch begin	wd begin/cr exch def/cs s1 dup 0 cr put def df /MFontType known not{
df2 0 get null eq{df dup length 2 add dict begin{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/StrokeWidth 1 0 FontMatrix idtransform pop dup nlw mul pys div ps div exch 0.012 mul 2 copy le{exch}if pop def/PaintType 2 def currentdict end
/q exch definefont df2 exch 0 exch put}if}if mbc exec end end}def end mfont}ifelse
3 index exch definefont exch pop}bdf
/mb{dup sbs kwn{0 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf
/mo{dup sos kwn{2 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf
/ms{dup sss kwn{4 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf
/ou{dup sos kwn{mfont/df2 known{mfont begin df2 0 null put end}if 3 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf
/su{dup sss kwn{mfont/df2 known{mfont begin df2 0 null put end}if 5 2 index findfont newmm exch pop exch pop exch pop}ifelse sfd}bdf
/ao{/fmv true def ou}bdf/as{/fmv true def su}bdf
/vo{/fmv false def ou}bdf/vs{/fmv false def su}bdf
/c{currentrgbcolor dup 4 1 roll eq 3 1 roll eq and/gray xdf}bdf
/bcarray[{/da .03 def df setfont gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidth
cs 0 0 smc da 0 smc da da smc 0 da moveto show}bind dup{/da 1 ps div def df setfont gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidth
cs 0 0 smc da 0 smc da da smc 0 da smc c gray{gl}{1 setgray}ifelse da 2. div dup moveto show}bind
{df setfont gsave cs wi grestore setcharwidth c gray{gl}{currentrgbcolor 1 setgray}ifelse cs 0 0 smc df2 0 get setfont
gray{gl}{4 1 roll setrgbcolor}ifelse 0 0 moveto show}bind
{/da 1 ps div def/ds .05 def/da2 da 2. div def df setfont gsave cs wi 1 index 0 ne{exch ds add da2 add exch}if grestore setcharwidth
cs ds da2 add .01 add 0 smc 0 ds da2 sub translate 0 0 smc da 0 smc da da smc 0 da smc c gray{gl}{1 setgray}ifelse da 2. div dup moveto show}bind
{/da .05 def df setfont gsave cs wi 1 index 0 ne{exch da add exch}if grestore setcharwidth c cs da .01 add 0 smc 0 da translate
gray{gl}{currentrgbcolor 1 setgray 4 -1 roll}ifelse 0 0 smc gray{gl}{4 1 roll setrgbcolor}ifelse df2 0 get setfont 0 0 moveto show}bind]def
/st{1000 mul usertime add dup 2147483647 gt{2147483647 sub}if def}bdf
/the{usertime sub dup 0 lt exch -2147483648 gt and}bdf
/6a 6 array def
/2a 2 array def
/3q 3 array def
/qs{3 -1 roll sub exch 3 -1 roll sub exch}bdf
/qa{3 -1 roll add exch 3 -1 roll add exch}bdf
/qm{3 -1 roll 1 index mul 3 1 roll mul}bdf
/qn{6a exch get mul}bdf
/qA .166667 def/qB .833333 def/qC .5 def
/qx{6a astore pop
qA 0 qn qB 2 qn add   qA 1 qn qB 3 qn add
qB 2 qn qA 4 qn add   qB 3 qn qA 5 qn add
qC 2 qn qC 4 qn add   qC 3 qn qC 5 qn add}bdf
/qp{6 copy 12 -2 roll pop pop}bdf
/qc{exch qp qx curveto}bdf
/qi{{exch 4 copy 2a astore aload pop qa .5 qm newpath moveto}{exch 2 copy 6 -2 roll 2 qm qs 4 2 roll}ifelse}bdf
/qq{{qc 2a aload pop qx curveto}{exch 4 copy qs qa qx curveto}ifelse}bdf
/pt{currentpoint newpath moveto}bdf
/qf{/fillflag true def}bdf
/ec{dup 4 and 0 ne{closepath}if 1 and 0 ne{0 doop}if grestore currentpoint newpath moveto/fillflag false def}bdf
/eu{currentpoint fp{0 ep}{grestore newpath}ifelse moveto/fillflag false def}bdf
/bp{currentpoint newpath 2 copy moveto}bdf
/ef{gsave fillflag{gsave eofill grestore}if}bdf
/sm{0 exch{@1 eq{1 add}if}forall}bdf
/lshow{4 1 roll exch/@1 exch def{1 index wi pop sub 1 index sm dv 0 @1 4 -1 roll widthshow}{1 index wi pop sub
1 index dup sm 10 mul exch length 1 sub add dv dup 10. mul 0 @1 4 -1 roll 0 6 -1 roll awidthshow}ifelse}bdf
/setTxMode{sa 9 2 index put exch not{3 eq{1}{0}ifelse setgray}{pop}ifelse}bdf
/SwToSym{{}mark false/Symbol/|______Symbol 0 rf 0 sa 6 get 0 ne{pop 1}{sa 7 get 0 eq{pop 2}if}ifelse
sa 1 get 0 ne/|______Symbol
sa 4 get 0 ne{vs}{sa 3 get 0 ne{vo}{fnt}ifelse}ifelse}bdf
/mc{0 3 1 roll transform neg exch pop}bdf
/ul{dup 0 ne sa 2 get 0 ne and{gsave 0 0
/UnderlinePosition kif{mc}{ps -10 div}ifelse/UnderlineThickness kif{mc}{ps 15 div}ifelse
abs setlinewidth neg rmoveto
sa 4 get 0 ne{gsave currentlinewidth 2. div dup rmoveto currentpoint newpath moveto
2 copy rlineto stroke grestore}if
sa 3 get sa 4 get or 0 ne{gsave currentrgbcolor dup 4 1 roll eq 3 1 roll eq and{gl}{1 setgray}ifelse 2 copy rlineto stroke grestore rlineto strokepath nlw pys div setlinewidth}{rlineto}ifelse
stroke grestore}{pop}ifelse}bdf
/sgt{2 copy known{get true}{pop pop false}ifelse}bdf
/kif{currentfont dup/FontMatrix get exch/FontInfo sgt{true}{currentfont/df sgt
{dup/FontInfo sgt{3 1 roll/FontMatrix get mtx concatmatrix exch true}{pop pop pop false}
ifelse}{pop pop false}ifelse}ifelse{3 -1 roll sgt{exch true}{pop false}ifelse}{false}ifelse}bdf
/blank/Times-Roman findfont/CharStrings get/space get def
/macvec 256 array def
/NUL/SOH/STX/ETX/EOT/ENQ/ACK/BEL/BS/HT/LF/VT/FF/CR/SO/SI
/DLE/DC1/DC2/DC3/DC4/NAK/SYN/ETB/CAN/EM/SUB/ESC/FS/GS/RS/US
macvec 0 32 getinterval astore pop
macvec 32/Times-Roman findfont/Encoding get
32 96 getinterval putinterval macvec dup 39/quotesingle put 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/blank/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute
/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex
/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
macvec 128 128 getinterval astore pop
{}mark true/Courier/|______Courier 0 rf
{/Metrics 21 dict begin/zero 600 def/one 600 def/two 600 def/three 600 def/four 600 def/five 600 def/six 600 def/seven 600 def/eight 600 def
/nine 600 def/comma 600 def/period 600 def/dollar 600 def/numbersign 600 def/percent 600 def/plus 600 def/hyphen 600 def/E 600 def/parenleft 600 def/parenright 600 def/space 600 def
currentdict end def currentdict/UniqueID known{/UniqueID 16#800000 def}if/FontBBox FontBBox 4 array astore def}mark true/Helvetica/|______Seattle 1 rf
/oldsettransfer/settransfer load def
/concatprocs{/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx}def
/settransfer{currenttransfer concatprocs oldsettransfer}def
/PaintBlack{{1 exch sub}settransfer gsave newpath clippath 1 setgray fill grestore}def
/od{(Rvd\001\001\000\000\177) fg copy pop txpose
1 0 mtx defaultmatrix dtransform exch atan/pa exch def
newpath clippath mark
{transform{itransform moveto}}{transform{itransform lineto}}
{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform
{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}
{{closepath}}pathforall newpath counttomark array astore/gc xdf pop ct 39 0 put
10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if
statusdict/processcolors known{statusdict begin processcolors end 4 eq{/4colors true def}if}if}bdf
/cd{}bdf
/op{/sfl false def systemdict/currentcolorscreen known{dcfreq dcrot/dcspf load dmfreq dmrot/dmspf load dyfreq dyrot/dyspf load
dkfreq dkrot/dkspf load setcolorscreen}{freq rot/spf load setscreen}ifelse savescreen
/ns false def/pm save def}bdf
/cp{not{userdict/#copies 0 put}if ma 0 gt{{t1 the{exit}if}loop}if{/copypage load exec}{/showpage load exec}ifelse pm restore}bdf
/px{0 3 1 roll tp tt}bdf
/psb{/us save def}bdf
/pse{us restore}bdf
/ct 40 string def
/nc{currentpoint initclip newpath gc{dup type dup/arraytype eq exch/packedarraytype eq or{exec}if}
forall clip newpath moveto}def
/kp{ct 0 2 index length 2 index 39 2 index put getinterval copy cvx exec mx3 currentmatrix pop}bdf
end
LW 1 eq userdict/a4small known not and{/a4small
[[300 72 div 0 0 -300 72 div -120 3381]
280 3255
{statusdict/jobstate (printing) put 0 setblink
margins
exch 196 add exch 304 add 8 div round cvi frametoroket
statusdict/jobstate (busy) put
1 setblink}
/framedevice load
60 45{dup mul exch dup mul add 1.0 exch sub}/setscreen load
{}/settransfer load/initgraphics load/erasepage load]cvx
statusdict begin bind end readonly def}if
md begin/bigs[lnop userdict/letter known{/letter load}{lnop}ifelse userdict/legal known{/legal load}{lnop}ifelse userdict/a4 known{/a4 load}{lnop}ifelse userdict/b5 known{/b5 load}{lnop}ifelse 
lnop lnop lnop /tab load/a3Size load]def
/smalls[lnop userdict/lettersmall known{/lettersmall load}{userdict/note known{/note load}{lnop}ifelse}ifelse
userdict/legal known{/legal load}{lnop}ifelse userdict/a4small known{/a4small load}{lnop}ifelse 
userdict/b5 known{/b5 load}{userdict/note known{/note load}{lnop}ifelse}ifelse lnop lnop lnop /tab load/a3Size load]def end
systemdict/currentpacking known{setpacking}if
{currentfile eexec} ( %endeexec) ok userdict/stretch known not and checkload

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
 %endeexec

{currentfile eexec} ( %endeexec) ok userdict/smooth4 known not and checkload
F94E00EE41A71C59E5CAEED1EDBCF23D1DBA1EE99B9BB356492923BD8B1BA83A87CEB0E07377A31FD6241E814681118E17DC7CACE570399506E6E441B871B6043831BD03EFC11DBBD8001EE2FF8CFBD485065D455A2E15AC36F1A84AD8789FA6461199C7CD14CB9FD64D4B06452B7FC0A8FC263F70F1CCB893295D4DE70ADAB771C0F84396FA98C60B11DA02ABA157298DF0A23621853BEF167443A985ADC09BEFFD51CB4D29179E2B34609EF38A49DA61F4BFC256A3DE0732D7D29754A194857B9C9E9971227AA1DD0611FBB10E44E5FF66C062D9C24ED3290529330BC317825E876929582DB0E39B9FC5EFD20CC1D4F94920EB9C534D0DA90DE70D25BC7287319CF28602B3F46633C242CAFC8905E960317E3C2FA20AB8DB06ADBAF292FC7BA2CA14EE65DF28B99CC11666B70AD33E8E1D57D63D4B89ECC615AE5747C1CA752C833D8D6DE54CD4A0350B44310555CE3BD2C615ADD27B634CDB350AF3A432CE78AACD2909A5B586F666CD87919A36DB1CBE86B3CE281DFD01CD7E1B8A18A4B415CECBFF79A5C4390A15EA77D14D6BE12BAB5A8268C3F286D0590060647CABED674443CD258F11415E866AB330A251691B61F2422A61AFE59B6B4FBDCF85ED9BA0F8E483C034089E6877FF5923698D3A0DC0EED6B9CFD32DF0839BC4EA5F6D1FCB6DD0920391E57E84745131D02D100179F4E0A68EC0A5FF6680A6F463D038B04AF63FFA13D743B995A26A743C26D387209023C91DE43DF047A16F328AC9DDC08573B38BE9EA341EA16C78EC32F3A1B36B90D95A50610F4D050EC1C33497F3F3A81A1B4C8BEF0BA84EE2FAA32DC112DAC490AF53E1749C4A0D866CAF7B893E52383B0D38065C333FB122B700D7246F7EE87D942AE3DB5C1DD77E9E76C80CC5AD63D28DFED0E229CE604673F78CD47F258FDF5BF3A3EAEC5C9BC8E482D8DBA9D268A35DA8C095A690679ED2123E8B8F5E4826FA3B199EAA5D482D4B6AA86572E387CECEB7149C8947F41D6339328A748A17F8C4AD3B0555F1E409450BA0C564F1F488BB5096EB003568D4D5EF6489897E27409547D0EE4487D30184793B0F27BD265A64BDB3EA6761569DA955620C612E718677B77D6D81B999C6298877AFE0D1D6F6F358377A8BD2402F669C64B972B3A065EF7DD4BDEFFFE17E63DB8898FA6E69166B710AAD6BA2EA9AF61E4B8C8701638D4D6E4DFFFC192AEF6BC027095C4C72D748979675BA29FAF61E75343E14E61034602E5A79CD2519796ED6A9CC4EDEA46A9B59D4A807E786B5EE46F25B0360BC8E7C12D723122CDEEF247C9776F4C99C8EBED6828AA19744B5ADF0D07D95D98B3072372388D41B0FAB1CCE2775170679575ECDCA13B22A17FE9C6605C3445F58F1A829512DAB6C528F83580C8AA53C35D605F626F5AD0B7FC1EA87D69A835E3F53A1F450FB0AF42A5772F89D92A50D10F15BDBDA409F50C0B8AB93FE8A16D029DD8BB5C480D1466735ED4D9CAF637E5ECD6C2ECB6BF3B3EFBEE7AB936D2C568E3009D156B87CACB1FB3A48A70BC91B2EC35CC9147FFB1A524E2B2F2E4E2C1B12F1C1C63768BB95CD62FEC01CBA79B9FA282DD4DF49990F27FF8EE4E2DDE2F0ACD83BC9D4BE0090192C7A799967EC4DC2D63C0835E22D4C4B366D7FDCF3A05A4B53DF780F986EF25C79B665D5C00EFF7F17C0BB6D544F9D83A7FDAC47D9C5683A656011374253C918FF6EA64749DD971B2300DD5320033E01EC591F6318CCE94CE2B81C04322EC52B624E50643B52391CCD2AB56396A2AD8E2D3CA61B80D9D4CC363B2DF7863526958CDF3497E36648406C317E58EC563E7C26149A2A3C643ADFB39A8DD92974C6D2A2A9D7B71CDF3FEBBF32BB02E7B45CF53AAEAD5E963A4AA4AF9A149A08A4EC303D5F2369977E93F54897EEAD31B06C5845D63F49D65F8E5573962241A57CCD717CE6CA8C784A11192943616EA059B51BC38429E18D0121FCBB6FBD5D909B0D89E616C66DEF6A0F165A7030BD911A1B120468329CBB006C8D37720E531CF31E878CB4AAAC137633675C3D546F5162487AB35F470C042BDEB945E0F2532BF92AA6FD53434440221ECD3533A7AA89900CB19EFE2CD872DF8B7969AF0D3B72BF31DC5DD69CA6460966F61AB17CB507964098DBA3AF122EEC3128A9BAFE1034493F372B36BD1351205E9043A67C544402D8BCE24358C8A5CE33867A00794CF7097D59C88279A11EE9C854E7E7AAE881F9828C569D208F5F33375F59E9A3818CFA38AAD0CBFBA32F9F44A8BB79DE4C40E3886457C16DA4A27953AA1E99472E35F2323F0BAA5E37DC28CBA46FEFB73B190016055ADD4D27615D748499A0E1C4B8C7EC339C1C4D95A813A85918A8D01EEB485DDCDCEA6EA3F2C2A9D85C139CD90CCB352634F9AFE836BCAC0C274E352BA2071B5269D5DE4CCDE3FF990CBA974980C7332AE1545A9C60D5D1459D3AE95C1AC065733AF14FADB440A110DD539563B8D850CD0704C52F3F7CCCB53630D776560CBD22D8FF08F5B354487A171AEC15F5F54DE9CAB668BCAC573E788D92762EF63E76087005F4AC2D02E0CAC173C11BE62ACE5DC4D3374F2F9746C9981E125FF9AB8CAE76D13039E2C54DFD708E028A619EA1ED78E6B46F06DF0D0B74BBEDD8C190C7C0CEBDE8F7A4888CC36575313478DD2CFE392E9BB7B2416955D44B7024A3BA43FBF37293B386D64746D7748895411D243FAEC50638F2AA33337D7FA018ADDAC5835A0DDFAE99AD6299DFB4CA6872C59853E3AC12FC9E3D26629C5B49CF844C87B3C4BFBE3074E3A1CE6984758C20C661084381CD6B4582D84F19C0000B5FC0DCB42B567E396031601C095D7016283EBE5F13CD8A3A374A74DDBBABD36081149F8BC242085F2F7297CC97FD3B8BAD206D8AC9707A39ECCC7963B522E08DA391A1EF12DD4D746DBDDDCC0834F88160CF189A9645567CEC2F023A571AF0DFD15DB85B744C28C000DF53B05F8F210841F6E87A04F20C777B7C0BE6182BE2E90226E5301A12532A745F2FAAA81637CF11B78CD2B99A4D18B862D6C5DBD31793FB16A2D9AAD376D4484D75AA833D0068B1D34DB74E3302480854E3B5484D8A47E39A89A2FA927BC3641EA7F8E004FDE4C2F08D40D99F1ACB47CAF6887629BF6DFE12968D297596D28CE0CF148B12E7DCB49FB94F5ADBD214C3A6CE1E249831BA9EB8A189F2CE1ABE39A7B537253E369A508A2AF2ADB9463F9B56BBBFF31D535FF997F537C6675C196E7ECBD493F652FA7CC6D9C1CA3379BFDB5AF7513C6E834054494296B91A6EE800114363D5D5D0759F41B4DECB653B9DE3E94583579EF549ED5F3FAFB12661ABC0C57A332406517ED3454EDED34B386C60F78DC976266E0EAF54FC245FB0E3EFC8016236436B599C1C97A8C5E0AC8F7836161873C71F01ED9CC25C236420F41FD8277993D3959205912FA0927B59E3DAE7377D82079447D6E41EE5AEC0DFFF79AF8F4ED47F17EE708FEA45877860D56F8CBCE65A061E8E1CA4A5FBAF0E13429A7F0ADB6F178FA449F46CC539BBC0107E3A53B1C362A04B20E6D721E7E6E1E4976A11DDC98C7614D22B53DFBB6DAE533AC9BE882021A735C30DAA4A44AED09F49A390E8CFF59BD9C30667AF21B03EC5CEBD5C2C3AA2769E8D714191A48E7DDF50B13D1560E82EFB65FCE601AE9E8C351FBA1DED80B7351314E7F9F9A784BFE3759B7E322A84E7B51F9DC5F5D9C8050CD79B27C0A4B0DD68A3C27A948AD6858E35B960D2DEA838C479CAEA83B1A912174ACB2100E55E7A14892D7A9B3711FF0B20065C1995B49E1F23464A92DD140642E3A7B1973849E64D1A3CF60000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
 %endeexec

%%EndProcSet

%%EndProlog
%%BeginDocumentSetup
md begin
F sgd
svsc
%%Title: FrameMaker PostScript Prolog for use with Macintosh FrameMaker 3.0
%%Creator: Frame Technology (Gustavo Fernandez, David Fuchs, Greg Cockroft)
% Copyright (c) 1986-90 Frame Technology Corp.  All rights reserved.
%%EndComments
%%BeginProcSet: "FrameMacDict" 28 0
userdict/FrameMacDict 150 dict put FrameMacDict begin/FmBd{bind def}bind
def/FmXd{exch FrameMacDict 3 1 roll put}FmBd/FmD{FrameMacDict 3 1 roll
put}FmBd/Fmtx matrix def/FmSm{Fmtx currentmatrix pop}FmBd/FmRm{Fmtx
setmatrix}FmBd/FmOx matrix def FmOx currentmatrix pop/FmSO{/FmOs save def
FmSm FmOx setmatrix}FmBd/FmIO{FmRm}FmBd/FmEO{FmOs restore}FmBd/FmAn
{transform round .5 sub exch round .5 sub exch itransform}FmBd
/FmAn1{transform round 1.5 sub exch round 1.5 sub exch itransform}FmBd/FmDn
{dtransform round exch round exch idtransform}FmBd/FmLn{0 dtransform exch
cvi 2 idiv 2 mul .1 add exch idtransform pop}FmBd/FmM{FmAn moveto}FmBd
/FmL{FmAn lineto}FmBd/FmCv{FmAn 6 2 roll FmAn 6 2 roll FmAn 6 2 roll
curveto}FmBd/FmSt{currentlinecap currentlinewidth 5 2 roll FmLn setlinewidth
setlinecap{closepath}if stroke setlinewidth setlinecap 0 0 moveto}FmBd
/FmFl{{closepath}if eofill 0 0 moveto}FmBd/FmqP{FmAn/Fm4 FmXd/Fm3 FmXd
FmAn/Fm2 FmXd/Fm1 FmXd Fm1 Fm2 moveto Fm1 Fm4 lineto Fm3 Fm4 lineto Fm3 Fm2
lineto closepath currentlinewidth exch FmLn setlinewidth stroke setlinewidth 0
0 moveto}FmBd/FmqF{FmAn/Fm4 FmXd/Fm3 FmXd FmAn/Fm2 FmXd/Fm1 FmXd Fm1
Fm2 moveto Fm1 Fm4 lineto Fm3 Fm4 lineto Fm3 Fm2 lineto fill 0 0 moveto}FmBd
50 string/FmKs FmXd/FmKp{FmKs 0 2 index length 2 index 49 2 index put
getinterval copy pop FmKs 48 2 put}FmBd/kp where{dup/kp get/FmRealkp FmXd
/kp{FrameMacDict/FmKs get dup 48 get 1 sub dup 0 lt{pop 0}if 48 exch put
FrameMacDict/FmRealkp get exec}bind put}if/rc where{dup/rc get
/FmRealrc FmXd/rc{dup 6 eq count 6 ge FrameMacDict/FmKs get 48 get 1 eq and
and{pop pop pop pop pop FrameMacDict begin FmKs dup 49 get 0 exch getinterval
cvx exec FmAn exch 4 2 roll FmAn1 exch 4 2 roll 6 FmKs 48 0 put end}if
FrameMacDict/FmRealrc get exec}bind put}if 50 string/Fmzs FmXd/Fmfz{
Fmzs 0 2 index length 2 index 49 2 index put getinterval copy pop Fmzs 48 1 put
}FmBd/fz where{dup/fz get/FmRealfz FmXd/fz{FrameMacDict/Fmzs get dup
48 get exch 48 0 put 1 eq{pop FrameMacDict/Fmzs get dup 49 get 0 exch
getinterval cvx exec}if FrameMacDict/FmRealfz get exec}bind put}if/FmQP
{/Fm6 FmXd FmAn/Fm4 FmXd/Fm3 FmXd FmAn/Fm2 FmXd/Fm1 FmXd Fm1 Fm2 Fm6 add
moveto Fm1 Fm4 Fm3 Fm4 Fm6 arcto Fm3 Fm4 Fm3 Fm2 Fm6 arcto Fm3 Fm2 Fm1 Fm2 Fm6
arcto Fm1 Fm2 Fm1 Fm4 Fm6 arcto 16{pop}repeat closepath currentlinewidth exch
FmLn setlinewidth stroke setlinewidth 0 0 moveto}FmBd/FmQF{/Fm6 FmXd FmAn
/Fm4 FmXd/Fm3 FmXd FmAn/Fm2 FmXd/Fm1 FmXd Fm1 Fm2 Fm6 add moveto Fm1 Fm4 Fm3
Fm4 Fm6 arcto Fm3 Fm4 Fm3 Fm2 Fm6 arcto Fm3 Fm2 Fm1 Fm2 Fm6 arcto Fm1 Fm2 Fm1
Fm4 Fm6 arcto 16{pop}repeat fill 0 0 moveto}FmBd/FmRF{currentpoint 2 copy
translate 4 2 roll{-1 1 scale}if rotate neg exch neg exch translate}FmBd/FmC
{setrgbcolor}FmBd/fmkn{2 copy known{get true}{pop pop false}ifelse}FmBd
/fmfp{exch currentfont dup/FontMatrix get exch/FontInfo fmkn{true}
{currentfont/df fmkn{dup/FontInfo fmkn{3 1 roll/FontMatrix get mtx
concatmatrix exch true}{pop pop pop false}ifelse}{pop pop false}ifelse
}ifelse{3 -1 roll fmkn{exch 0 3 1 roll dtransform neg exch pop exch pop}{
pop exec}ifelse}{exec}ifelse}FmBd/fmdl{3 index 16 and 0 ne{gsave
currentlinewidth 2. div dup rmoveto currentpoint newpath moveto 2 index 0
rlineto stroke grestore}if 3 index 24 and 0 ne{gsave currentrgbcolor dup 4 1
roll eq 3 1 roll eq and{1 currentgray sub setgray}{1 setgray}ifelse 2 index
0 rlineto stroke grestore gsave 2 index 0 rlineto strokepath .24 setlinewidth
stroke grestore}{2 index 0 rlineto stroke}ifelse}FmBd/fmul{gsave/Fm2
FmXd currentpoint/UnderlineThickness{Fm2 15 div}fmfp abs dup setlinewidth
/Fm1 FmXd 4 index 1 and 0 ne{newpath 2 copy moveto 0/UnderlinePosition{Fm2
10 div neg}fmfp neg rmoveto fmdl}if 4 index 2 and 0 ne{newpath 2 copy
moveto 0/XHeight{gsave newpath 0 0 moveto (x) false charpath flattenpath
pathbbox 4 -1 roll pop pop pop grestore dup 0 eq{pop Fm2 2. mul 3. div neg}
if}fmfp 2. div rmoveto fmdl}if 4 index 4 and 0 ne{newpath 2 copy moveto 0
/CapHeight{gsave newpath 0 0 moveto (H) false charpath flattenpath pathbbox 4
-1 roll pop pop pop grestore dup 0 eq{pop Fm2 3. mul 4. div neg}if}fmfp
Fm1 sub rmoveto fmdl}if pop pop pop pop pop grestore}FmBd/FmTX{/Fm3 FmXd
/Fm2 FmXd/Fm1 FmXd 0 32 Fm1 Fm3 stringwidth pop Fm2 sub Fm3 length div sub 0
Fm3 awidthshow}FmBd/fm321routines[{.3 mul add 1}bind{.59 mul add 2}bind
{.11 mul add round cvi Fms exch fmi exch put/fmi fmi 1 add FmD 0 0}bind ]def
/fm321{/fmi 0 FmD 0 exch 0 exch{exch fm321routines exch get exec}forall pop
pop Fms}FmBd/Fmcc{/FmPr2 exch cvlit FmD/FmPr1 exch cvlit FmD/FmPrn FmPr1
length FmPr2 length add array FmD FmPrn 0 FmPr1 putinterval FmPrn FmPr1 length
FmPr2 putinterval FmPrn cvx}FmBd/Fmax{2 copy lt{exch}if pop}FmBd/Fmin{2
copy gt{exch}if pop}FmBd/Fmi{/Fm7 save FmD/Fm9 false FmD{{dup length 1
sub/FmGL FmXd/FmBC FmXd/FmNC FmXd/FmRC FmXd/FmGC FmGL 1 add array FmD
systemdict/setcolortransfer known{currentcolortransfer/gryt FmXd/blut FmXd
/grnt FmXd/redt FmXd 0 1 FmGL{/indx FmXd/cynu 1 FmRC indx get sub FmD/magu
1 FmNC indx get sub FmD/yelu 1 FmBC indx get sub FmD/FmK cynu magu Fmin yelu
Fmin FmD/FmU FmK currentundercolorremoval exec FmD FmRC indx 1 0 cynu FmU sub
Fmax sub redt exec put FmNC indx 1 0 magu FmU sub Fmax sub grnt exec put FmBC
indx 1 0 yelu FmU sub Fmax sub blut exec put FmGC indx 1 FmK
currentblackgeneration exec sub gryt exec put}for{FmGL mul cvi FmRC exch
get}{FmGL mul cvi FmNC exch get}{FmGL mul cvi FmBC exch get}{FmGL mul cvi
FmGC exch get}setcolortransfer{pop 0}setundercolorremoval{}
setblackgeneration/Fm9 true FmD}{0 1 FmGL{FmGC exch dup dup FmRC exch get
.3 mul exch dup FmNC exch get .59 mul exch FmBC exch get .11 mul add add put}
for{FmGL mul cvi FmGC exch get}currenttransfer Fmcc settransfer}ifelse}{
dup length 1 sub/FmGL FmXd/FmGC FmXd{FmGL mul cvi FmGC exch get
}currenttransfer Fmcc settransfer}ifelse}{{{1 exch sub}currenttransfer
Fmcc settransfer}if}ifelse/Fm5 FmXd/Fm8 FmXd/Fm6 FmXd/Fm3 FmXd/Fm4
FmXd translate scale{-1 1 scale}if rotate/Fm18 Fm8 dup 60000 ge{pop 60000}if
string FmD Fm4 Fm3 Fm6 [Fm4 0 0 Fm3 Fm4 2 div Fm3 2 div]{currentfile Fm18 Fm5
{readstring}{readhexstring}ifelse pop}Fm9{{Fm18}{Fm18}true 3 colorimage}
{image}ifelse Fm7 restore}FmBd/Fmci{/Fm7 save FmD/Fm5 FmXd/Fm8 FmXd/Fm6
FmXd/Fm3 FmXd/Fm4 FmXd systemdict/setcmykcolor known not{FmAn}if/Fm18 Fm8
dup 60000 ge{pop 60000}if string FmD/Fms Fm18 0 Fm18 length 3 idiv getinterval
FmD translate scale{-1 1 scale}if rotate Fm4 Fm3 Fm6 [Fm4 0 0 Fm3 Fm4 2 div
Fm3 2 div] systemdict/colorimage known{{currentfile Fm18 Fm5{readstring}
{readhexstring}ifelse pop}false 3 colorimage}{{currentfile Fm18 Fm5
{readstring}{readhexstring}ifelse pop fm321}image}ifelse Fm7 restore}FmBd
/FmAF{gsave newpath FmAn translate not{0.0 0.0 moveto}if FmDn scale 0.0 0.0
1.0 5 3 roll arc closepath fill grestore}FmBd/FmAP{gsave FmLn setlinewidth
setlinecap FmSm newpath 2 index 2 div add exch 3 index 2 div sub exch FmAn 2
index 2 div sub exch 3 index 2 div add exch translate scale 0.0 0.0 1.0 5 3
roll arc{closepath}if FmRm stroke grestore}FmBd/FmSu false def/FmCD ( )
def/FmSV ( ) def/FmER (\000) def/FmJS 100 string def/FmXC{/$brkpage where
{pop}{FrameMacDict/FmSu false put FrameMacDict/FmCD get 0 countdictstack
put currentfile cvx stopped clear FrameMacDict/FmSu get not{FrameMacDict
/FmER get 0 1 put gsave initmatrix 0 setgray newpath{clippath pathbbox exch
pop add 2. div newpath moveto}stopped clear (Courier-BoldOblique) findfont 18
scalefont setfont (PostScript error) show (A PostScript error occurred. \
FrameMaker is attempting recovery.) print flush FrameMacDict/FmJS get{dup
currentfile exch{readline}stopped{clear FrameMacDict/FmJS get ( ) true}if
not{exit}if (EndFramePicture) eq{exit}if}loop clear grestore}if
countdictstack FrameMacDict/FmCD get 0 get sub dup 0 gt{{end}repeat}{pop
}ifelse currentdict end FrameMacDict begin begin FmSV 0 get 0 ne{/FMSAVE where
{/FMSAVE get restore}if}if}ifelse}FmBd/FmEP{FrameMacDict/FmSV get 0 1
put/FMSAVE save FmD [/ffl/fth/fh/fw/fy/fx/ury/urx/lly/llx]{FmXd}
forall fx fw 2 div add fy fh 2 div add translate fw fh scale ffl{-1 1 scale}if
fth neg rotate 1 urx llx sub div 1 lly ury sub div scale urx llx add 2 div neg
ury lly add 2 div neg translate newpath llx lly moveto llx ury lineto urx ury
lineto urx lly lineto closepath clip newpath currentdict end end begin
/showpage{}def FrameMacDict/FmXC get exec}FmBd/FmPI{FrameMacDict/FmSV
get 0 0 put currentdict end end begin FrameMacDict/FmXC get exec}FmBd/FmPc
{FrameMacDict/FmSV get 0 1 put/FMSAVE save FmD currentdict end end begin
/showpage{}def newpath 3 index neg 3 index neg translate 1 -1 scale 0.0 0.0
moveto FrameMacDict/FmXC get exec}FmBd/FmSp{statusdict begin
/setpageparams where{pop setpageparams}{pop pop pop pop}ifelse end}FmBd
/cd where{dup/cd get/FmRealcd FmXd/cd{FrameMacDict/FmER get 0 get 0 ne
{gsave initgraphics{clippath pathbbox exch pop add 2. div newpath moveto}
stopped clear (Courier-BoldOblique) findfont 18 scalefont setfont{grestore 0
-20 rmoveto}dup dup gsave (FrameMaker has detected one or more) show exec
gsave (PostScript errors in this document.) show exec gsave (\() show
statusdict/jobname get show (\)) show exec (Please check your output.) show
grestore showpage}if FrameMacDict/FmRealcd get exec}bind put}if
/FmOd{}FmBd/bigs where{/bigs get 7/FmOd load put}if/smalls where{
/smalls get 7/FmOd load put}if end currentdict end/EndFramePicture{
/$brkpage where{pop currentdict end FrameMacDict begin begin/FMSAVE where
{/FMSAVE get restore}if}{FrameMacDict/FmSu true put stop}ifelse}bind
def systemdict/alphaimage known not{/alphaimage{1 ne{limitcheck}if not
{limitcheck}if pop image}bind def}if FrameMacDict begin begin 
%%EndProcSet

T T 0 0 776 576 -8 -18 784 594 100 72 72 1 F F F F T F T F psu
(; document: sosp93  39)jn
0 mf
od
%%EndDocumentSetup
%%Page: ? 1
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
64 gr
0 0 lin
36 46 540 172 FmqF
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
bu fc

%%BeginFont: Times-Bold
%%IncludeFont: Times-Bold
bn
%%EndFont
bu fc
{}mark T /Times-Bold /|______Times-Bold 0 rf
bn
16 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
151.348 56.667 FmM 0 0 273.305(The Zebra Striped Network File System)FmTX
0 4 gm
2 fs
bu fc

%%BeginFont: Times-Italic
%%IncludeFont: Times-Italic
bn
%%EndFont
bu fc
{}mark T /Times-Italic /|______Times-Italic 0 rf
bn
12 fz
bu fc
2 F /|______Times-Italic fnt
bn
( )show
245.842 83 FmM 0 0 60.319(John H. Har)FmTX
306.161 83 FmM 0 0 23.997(tman)FmTX
240.946 97 FmM 0 0 72.987(John K. Ouster)FmTX
313.72 97 FmM 0 0 21.334(hout)FmTX
0 7 gm
0 fs
bu fc

%%BeginFont: Times-Roman
%%IncludeFont: Times-Roman
bn
%%EndFont
bu fc
{}mark T /Times-Roman /|______Times-Roman 0 rf
bn
bu fc
2 F /|______Times-Roman fnt
bn
( )show
221.684 125 FmM 0 0 132.633(Computer Science Division)FmTX
176.049 139 FmM 0 0 223.901(Electrical Engineering and Computer Sciences)FmTX
230.355 153 FmM 0 0 115.289(University of California)FmTX
239.231 167 FmM 0 0 43.31(Berkeley)FmTX
281.761 167 FmM 0 0 22.667(, CA)FmTX
303.769 167 FmM 0 0 33( 94720)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
130.02 199.333 FmM 0 0 52.08(Abstract)FmTX
0 4 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 217.667 FmM -0.141 0 82.742(Zebra is a network \336)FmTX
136.177 217.667 FmM -0.141 0 140.508(le system that increases throughput)FmTX
36 229.667 FmM 2.143 0 51.111(by striping \336)FmTX
91.397 229.667 FmM 2.143 0 171.865(le data across multiple servers. Rather than)FmTX
36 241.667 FmM 1.271 0 59.426(striping each \336)FmTX
97.968 241.667 FmM 1.271 0 50.244(le separately)FmTX
148.834 241.667 FmM 1.271 0 119.661(, Zebra forms all the new data)FmTX
36 253.667 FmM 0.882 0 231.301(from each client into a single stream, which it then stripes)FmTX
36 265.667 FmM 1.657 0 186.877(using an approach similar to a log-structured \336)FmTX
234.473 265.667 FmM 1.657 0 39.99(le system.)FmTX
36 277.667 FmM 0.672 0 212.139(This provides high performance for writes of small \336)FmTX
253.514 277.667 FmM 0.672 0 21.934(les as)FmTX
36 289.667 FmM 0.392 0 133.533(well as for reads and writes of lar)FmTX
172.098 289.667 FmM 0.392 0 17.498(ge \336)FmTX
189.988 289.667 FmM 0.392 0 84.956(les. Zebra also writes)FmTX
36 301.667 FmM 0.797 0 232.146(parity information in each stripe in the style of RAID disk)FmTX
36 313.667 FmM 1.483 0 228.252(arrays; this increases storage costs slightly but allows the)FmTX
36 325.666 FmM 1.761 0 226.033(system to continue operation even while a single storage)FmTX
36 337.666 FmM 0.228 0 87.178(server is unavailable. )FmTX
123.312 337.666 FmM 0.228 0 7.219(A)FmTX
129.982 337.666 FmM 0.228 0 145.227( prototype implementation of Zebra,)FmTX
36 349.666 FmM 0.637 0 234.387(built in the Sprite operating system, provides 4-5 times the)FmTX
36 361.666 FmM 1.841 0 140.242(throughput of the standard Sprite \336)FmTX
185.446 361.666 FmM 1.841 0 83.311(le system or NFS for)FmTX
36 373.666 FmM 2.2 0 10.544(lar)FmTX
46.366 373.666 FmM 2.2 0 17.498(ge \336)FmTX
66.064 373.666 FmM 2.2 0 194.656(les and a 20%-3x improvement for writing small)FmTX
36 385.666 FmM 0 0 5.559(\336)FmTX
41.559 385.666 FmM 0 0 13.606(les.)FmTX
0 6 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 415.333 FmM 0 0 7(1)FmTX
57.6 415.333 FmM 0 0 24.1(Intr)FmTX
81.451 415.333 FmM 0 0 52.11(oduction)FmTX
0 10 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 436.666 FmM 1.508 0 82.742(Zebra is a network \336)FmTX
142.773 436.666 FmM 1.508 0 118.591(le system that uses multiple \336)FmTX
268.903 436.666 FmM 1.508 0 7.217(le)FmTX
36 447.666 FmM 2.12 0 75.522(servers in tandem. )FmTX
117.705 447.666 FmM 2.12 0 143.572(The goal of the system is to provide)FmTX
36 458.666 FmM 2.214 0 224.622(greater throughput and availability than can be achieved)FmTX
36 469.666 FmM -0.007 0 78.02(with a single server)FmTX
113.45 469.666 FmM -0.007 0 35.833(. Clients )FmTX
0 12 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
149.268 469.666 FmM -0.007 0 22.773(stripe)FmTX
0 15 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
172.041 469.666 FmM -0.007 0 8.059( \336)FmTX
180.093 469.666 FmM -0.007 0 96.055(le data across servers so)FmTX
36 480.666 FmM 0.748 0 28.601(that dif)FmTX
65.171 480.666 FmM 0.748 0 148.521(ferent pieces of data are stored on dif)FmTX
218.75 480.666 FmM 0.748 0 56.621(ferent servers.)FmTX
36 491.666 FmM 0.187 0 238.252(Striping makes it possible for a single client to keep several)FmTX
36 502.666 FmM 0.131 0 238.809(servers busy and it distributes the load among the servers to)FmTX
36 513.666 FmM 0.887 0 232.139(reduce the likelihood of hot spots. Zebra also stores parity)FmTX
36 524.666 FmM 2.975 0 216.321(information in each stripe, which allows it to continue)FmTX
36 535.666 FmM 0 0 183.53(operation while any one server is unavailable.)FmTX
54 548.666 FmM 2.985 0 82.461(In current network \336)FmTX
145.415 548.666 FmM 2.985 0 115.781(le systems the read and write)FmTX
36 559.666 FmM 0.409 0 97.751(bandwidth for a single \336)FmTX
135.389 559.666 FmM 0.409 0 138.274(le is limited by the performance of)FmTX
36 570.666 FmM 1.983 0 57.744(a single server)FmTX
97.312 570.666 FmM 1.983 0 166.912(, including its memory bandwidth and the)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 196.667 FmM 1.571 0 86.35(speed of its processor)FmTX
390.545 196.667 FmM 1.571 0 141.599(, network interface, I/O busses, and)FmTX
299.88 207.667 FmM 1.598 0 121.104(disks. It is possible to split a \336)FmTX
432.169 207.667 FmM 1.598 0 103.037(le system among multiple)FmTX
299.88 218.667 FmM 0.435 0 72.463(servers but each \336)FmTX
373.647 218.667 FmM 0.435 0 162.441(le must reside on a single server and it is)FmTX
299.88 229.667 FmM 1.669 0 11.106(dif)FmTX
310.808 229.667 FmM 1.669 0 5.559(\336)FmTX
316.367 229.667 FmM 1.669 0 135.779(cult to balance the loads of the dif)FmTX
463.653 229.667 FmM 1.669 0 73.008(ferent servers. For)FmTX
299.88 240.667 FmM 0.409 0 234.341(example, the system directories often lie on a single server)FmTX
537.5 240.667 FmM 0.409 0 2.5(,)FmTX
299.88 251.667 FmM 0 0 118.296(making that server a hot spot.)FmTX
317.88 264.667 FmM 1.231 0 211.045(In the future, new styles of computing such as multi-)FmTX
299.88 275.667 FmM 0.581 0 235.469(media and parallel computation are likely to demand much)FmTX
299.88 286.667 FmM 2.393 0 121.895(greater throughput than today\325)FmTX
428.403 286.667 FmM 2.393 0 104.419(s applications, making the)FmTX
299.88 297.667 FmM 4.366 0 205.188(limitations of a single server even more severe. For)FmTX
299.88 308.667 FmM 0.061 0 239.634(example, a single video playback can consume a substantial)FmTX
299.88 319.666 FmM 0.318 0 56.914(fraction of a \336)FmTX
357.749 319.666 FmM 0.318 0 34.138(le server)FmTX
392.573 319.666 FmM 0.318 0 3.328(\325)FmTX
395.352 319.666 FmM 0.318 0 142.739(s bandwidth even when the video is)FmTX
299.88 330.666 FmM 0.132 0 52.2(compressed. )FmTX
351.662 330.666 FmM 0.132 0 7.219(A)FmTX
358.332 330.666 FmM 0.132 0 180.747( cluster of workstations can easily exceed the)FmTX
299.88 341.666 FmM 0.576 0 68.04(bandwidth of a \336)FmTX
369.648 341.666 FmM 0.576 0 166.318(le server if they all run video applications)FmTX
299.88 352.666 FmM 0.517 0 60.547(simultaneously)FmTX
359.777 352.666 FmM 0.517 0 176.606(, and the problems will become much worse)FmTX
299.88 363.666 FmM 0.779 0 232.678(when video resolution increases with the arrival of HDTV)FmTX
537.5 363.666 FmM 0.779 0 2.5(.)FmTX
299.88 374.666 FmM 1.29 0 232.378(Another example is parallel applications. Several research)FmTX
299.88 385.666 FmM 0.856 0 233.271(groups are exploring the possibility of using collections of)FmTX
299.88 396.666 FmM 9.355 0 202.7(workstations connected by high-speed low-latency)FmTX
299.88 407.666 FmM 3.813 0 193.545(networks to run massively parallel applications. )FmTX
516.125 407.666 FmM 3.813 0 23.875(These)FmTX
299.88 418.666 FmM 0.23 0 238.511(\322distributed supercomputers\323 are likely to present I/O loads)FmTX
299.88 429.666 FmM 1.377 0 231.86(equivalent to traditional supercomputers, which cannot be)FmTX
299.88 440.666 FmM 0 0 72.2(handled by today\325)FmTX
371.53 440.666 FmM 0 0 47.212(s network \336)FmTX
418.742 440.666 FmM 0 0 40.527(le servers.)FmTX
317.88 453.666 FmM 1.962 0 7.219(A)FmTX
324.55 453.666 FmM 1.962 0 41.111( striping \336)FmTX
369.585 453.666 FmM 1.962 0 48.318(le system of)FmTX
421.65 453.666 FmM 1.962 0 110.5(fers the potential to achieve)FmTX
299.88 464.666 FmM 2.998 0 222.134(very high performance using collections of inexpensive)FmTX
299.88 475.666 FmM 2.804 0 157.737(computers and disks. Several striping \336)FmTX
471.636 475.666 FmM 2.804 0 62.756(le systems have)FmTX
299.88 486.666 FmM 1.59 0 227.4(already been built, such as Swift [Cabrera91] and Bridge)FmTX
299.88 497.666 FmM 2.027 0 48.87([Dibble88]. )FmTX
350.598 497.666 FmM 2.027 0 175.212(These systems are similar in that they stripe)FmTX
299.88 508.666 FmM 0.656 0 95.82(data within individual \336)FmTX
397.67 508.666 FmM 0.656 0 58.318(les, so only lar)FmTX
457.779 508.666 FmM 0.656 0 17.498(ge \336)FmTX
475.933 508.666 FmM 0.656 0 38.042(les bene\336)FmTX
514.631 508.666 FmM 0.656 0 24.712(t from)FmTX
299.88 519.666 FmM 0.157 0 113.843(the striping. Zebra uses a dif)FmTX
414.329 519.666 FmM 0.157 0 125.2(ferent approach borrowed from)FmTX
299.88 530.666 FmM 3.704 0 64.143(log-structured \336)FmTX
367.727 530.666 FmM 3.704 0 157.456(le systems \(LFS\) [Rosenblum91]. Each)FmTX
299.88 541.666 FmM 1.154 0 133.003(client forms its new data for all \336)FmTX
440.963 541.666 FmM 1.154 0 94.419(les into a sequential log)FmTX
299.88 552.666 FmM 1.278 0 161.035(that it stripes across the storage servers. )FmTX
469.686 552.666 FmM 1.278 0 67.756(This allows even)FmTX
299.88 563.666 FmM 0.701 0 29.722(small \336)FmTX
330.302 563.666 FmM 0.701 0 48.32(les to bene\336)FmTX
380.024 563.666 FmM 0.701 0 155.771(t from striping. It also reduces network)FmTX
299.88 574.666 FmM 1.104 0 72.205(overhead, simpli\336)FmTX
373.188 574.666 FmM 1.104 0 160.19(es the storage servers, and spreads write)FmTX
299.88 585.666 FmM 0 0 13.872(traf)FmTX
313.574 585.666 FmM 0 0 5.559(\336)FmTX
319.133 585.666 FmM 0 0 122.439(c uniformly across the servers.)FmTX
317.88 598.666 FmM 2.866 0 26.641(Zebra\325)FmTX
343.971 598.666 FmM 2.866 0 170.232(s style of striping also makes it easy to use)FmTX
299.88 609.666 FmM 1.022 0 232.964(redundancy techniques from RAID disk arrays to improve)FmTX
299.88 620.666 FmM 2.728 0 221.025(availability and data integrity [Patterson88]. One of the)FmTX
299.88 631.666 FmM 2.079 0 219.329(fragments of each stripe stores parity for the rest of the)FmTX
299.88 642.666 FmM 1.011 0 104.961(stripe, allowing the stripe\325)FmTX
407.324 642.666 FmM 1.011 0 126.611(s data to be reconstructed in the)FmTX
299.88 653.666 FmM 3.73 0 206.55(event of a disk or server failure. Zebra can continue)FmTX
299.88 664.666 FmM 1.66 0 223.518(operation while a server is unavailable. Even if a disk is)FmTX
299.88 675.666 FmM 0 0 209.348(totally destroyed Zebra can reconstruct the lost data.)FmTX
317.88 688.666 FmM 2.537 0 9.438(W)FmTX
326.52 688.666 FmM 2.537 0 198.257(e have constructed a prototype implementation of)FmTX
299.88 699.666 FmM -0.077 0 240.732(Zebra as part of the Sprite operating system [Ousterhout88].)FmTX
0 0 gm
0 gr
0 0 lin
64 gr
0 0 lin
36 586 275.76 640 FmqF
0 gr
0 0 lin
(36 586 275.76 592)FmKp
(nc 586 36 592 276 6 rc)kp
0 0 lin
0 0 lin
45 588 FmM
189 588 FmL
false 2 0.5 FmSt
0 0 gm
(nc 0 0 776 576 6 rc)kp
F 1 setTxMode
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 598 FmM 0.334 0 236.421(This work was supported in part by the National Science Founda-)FmTX
36 608 FmM 2.616 0 163.217(tion under grant CCR-8900029, the National )FmTX
214.421 608 FmM 2.616 0 58.722(Aeronautics and)FmTX
36 618 FmM -0.13 0 23.737(Space )FmTX
59.113 618 FmM -0.13 0 85.23(Administration and the )FmTX
143.46 618 FmM -0.13 0 105.196(Advanced Research Projects )FmTX
247.773 618 FmM -0.13 0 27.987(Agency)FmTX
36 628 FmM 0 0 233.416(under contract NAG 2-591, and the California MICRO Program.)FmTX
0 0 gm
0 gr
0 0 lin
F T cp
%%Page: ? 2
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 52.667 FmM -0.092 0 241.035(Although it does not yet incorporate all of the reliability and)FmTX
36 63.667 FmM 5.908 0 198.767(recovery aspects of the Zebra architecture, it does)FmTX
36 74.667 FmM 0.51 0 143.535(demonstrate the performance bene\336)FmTX
181.064 74.667 FmM 0.51 0 93.018(ts. For reads and writes)FmTX
36 85.667 FmM 0.505 0 21.372(of lar)FmTX
57.699 85.667 FmM 0.505 0 17.498(ge \336)FmTX
75.701 85.667 FmM 0.505 0 196.885(les the prototype achieves up to 4 Mbytes/second)FmTX
36 96.667 FmM 0.625 0 233.242(for a single client with four servers, which is 4-5 times the)FmTX
36 107.667 FmM 0.329 0 197.168(throughput of either NFS or the standard Sprite \336)FmTX
235.8 107.667 FmM 0.329 0 39.99(le system.)FmTX
36 118.667 FmM 1.261 0 46.108(For small \336)FmTX
84.63 118.667 FmM 1.261 0 185.186(les the Zebra prototype improves performance)FmTX
36 129.667 FmM -0.116 0 149.941(by more than a factor of 3 over NFS. )FmTX
184.72 129.667 FmM -0.116 0 91.631(The improvement over)FmTX
36 140.667 FmM 1.799 0 138.296(Sprite is only about 20%, however)FmTX
182.739 140.667 FmM 1.799 0 5(. )FmTX
189.359 140.667 FmM 1.799 0 81.365(This is because both)FmTX
36 151.667 FmM -0.105 0 196.311(Zebra and Sprite require the client to notify the \336)FmTX
231.364 151.667 FmM -0.105 0 44.966(le server of)FmTX
36 162.667 FmM 1.81 0 5.559(\336)FmTX
41.559 162.667 FmM 1.81 0 184.116(le opens and closes, and when writing small \336)FmTX
240.159 162.667 FmM 1.81 0 34.15(les these)FmTX
36 173.666 FmM 1.138 0 21.116(noti\336)FmTX
57.116 173.666 FmM 1.138 0 141.631(cations dominate the running time. )FmTX
204.257 173.666 FmM 1.138 0 9.438(W)FmTX
213.298 173.666 FmM 1.138 0 60.547(ith the addition)FmTX
36 184.666 FmM -0.201 0 16.387(of \336)FmTX
52.185 184.666 FmM -0.201 0 225.747(le name caching to both systems we would expect Zebra)FmTX
36 195.666 FmM 0 0 188.523(to have even more of an advantage over Sprite.)FmTX
54 208.666 FmM 0.267 0 102.725(The rest of the paper is or)FmTX
158.146 208.666 FmM 0.267 0 79.414(ganized as follows. )FmTX
238.361 208.666 FmM 0.267 0 37.493(Section 2)FmTX
36 219.666 FmM 9.635 0 163.262(describes the RAID and log-structured-\336)FmTX
237.802 219.666 FmM 9.635 0 38.318(le-system)FmTX
36 230.666 FmM 0.862 0 197.688(technologies used in Zebra and introduces Zebra\325)FmTX
238.312 230.666 FmM 0.862 0 36.946(s logging)FmTX
36 241.666 FmM 0.377 0 41.643(approach. )FmTX
78.02 241.666 FmM 0.377 0 37.493(Section 3)FmTX
115.889 241.666 FmM 0.377 0 157.971( describes the structure of Zebra, which)FmTX
36 252.666 FmM 1.859 0 153.271(consists of clients, storage servers, a \336)FmTX
200.426 252.666 FmM 1.859 0 44.138(le manager)FmTX
246.025 252.666 FmM 1.859 0 26.377(, and a)FmTX
36 263.666 FmM 0.7 0 53.572(stripe cleaner)FmTX
89.723 263.666 FmM 0.7 0 5(. )FmTX
95.423 263.666 FmM 0.7 0 37.493(Section 4)FmTX
133.617 263.666 FmM 0.7 0 138.301( shows how the components of the)FmTX
36 274.666 FmM 0.865 0 234.929(system work together in normal operation; communication)FmTX
36 285.666 FmM 0.338 0 148.286(between the components is based on )FmTX
0 3 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
186.313 285.666 FmM 0.338 0 23.884(deltas)FmTX
0 6 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
210.198 285.666 FmM 0.338 0 65.247(, which describe)FmTX
36 296.666 FmM 0.505 0 159.39(block creations, updates, and deletions. )FmTX
197.917 296.666 FmM 0.505 0 37.493(Section 5)FmTX
235.915 296.666 FmM 0.505 0 39.7( describes)FmTX
36 307.666 FmM 1.349 0 229.329(how Zebra restores consistency to its data structures after)FmTX
36 318.666 FmM 2.766 0 51.36(crashes, and )FmTX
92.892 318.666 FmM 2.766 0 37.493(Section 6)FmTX
133.15 318.666 FmM 2.766 0 129.141( shows how the system provides)FmTX
36 329.666 FmM 1.172 0 169.648(service even while components are down. )FmTX
212.678 329.666 FmM 1.172 0 37.493(Section 7)FmTX
251.342 329.666 FmM 1.172 0 23.606( gives)FmTX
36 340.666 FmM 4.33 0 205.476(the status of the Zebra prototype and presents some)FmTX
36 351.666 FmM 3.601 0 115.21(performance measurements. )FmTX
158.412 351.666 FmM 3.601 0 37.493(Section 8)FmTX
199.506 351.666 FmM 3.601 0 69.412( discusses related)FmTX
36 362.666 FmM 0 0 39.985(work and )FmTX
75.985 362.666 FmM 0 0 37.493(Section 9)FmTX
113.478 362.666 FmM 0 0 44.983( concludes.)FmTX
0 8 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 391.333 FmM 0 0 7(2)FmTX
57.6 391.333 FmM 0 0 104.221(Striping in Zebra)FmTX
0 12 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 412.666 FmM -0.207 0 75.53(Zebra distributes \336)FmTX
129.115 412.666 FmM -0.207 0 85.508(le data over several \336)FmTX
213.793 412.666 FmM -0.207 0 62.742(le servers while)FmTX
36 423.666 FmM 0.768 0 202.146(ensuring that the loss of a single server does not af)FmTX
245.652 423.666 FmM 0.768 0 29.7(fect the)FmTX
36 434.666 FmM 0.525 0 94.685(availability of the data. )FmTX
132.607 434.666 FmM 0.525 0 6.108(T)FmTX
138.017 434.666 FmM 0.525 0 134.954(o do this Zebra borrows from two)FmTX
36 445.666 FmM 3.798 0 213.535(recent innovations in the management of disk storage)FmTX
36 456.666 FmM 8.535 0 159.963(systems: RAID technology \(Redundant )FmTX
229.555 456.666 FmM 8.535 0 38.03(Arrays of)FmTX
36 467.666 FmM 2.709 0 219.36(Inexpensive Disks\) [Patterson88], and log-structured \336)FmTX
268.903 467.666 FmM 2.709 0 7.217(le)FmTX
36 478.666 FmM 2.479 0 227.727(systems \(LFS\) [Rosenblum91]. RAID technology allows)FmTX
36 489.666 FmM 2.535 0 109.395(Zebra to provide scalable \336)FmTX
155.536 489.666 FmM 2.535 0 112.979(le access performance while)FmTX
36 500.666 FmM 1.761 0 226.035(using parity instead of redundant copies to guard against)FmTX
36 511.666 FmM 1.503 0 61.899(server failures. )FmTX
100.727 511.666 FmM 1.503 0 146.335(The log-structured approach simpli\336)FmTX
251.572 511.666 FmM 1.503 0 23.044(es the)FmTX
36 522.666 FmM 0.268 0 238.247(parity implementation, reduces the impact of managing and)FmTX
36 533.666 FmM 2.084 0 53.596(storing parity)FmTX
91.031 533.666 FmM 2.084 0 170.5(, and allows clients to batch together small)FmTX
36 544.666 FmM 0 0 107.72(writes to improve server ef)FmTX
143.542 544.666 FmM 0 0 5.559(\336)FmTX
149.101 544.666 FmM 0 0 26.094(ciency)FmTX
174.545 544.666 FmM 0 0 2.5(.)FmTX
0 14 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 568.333 FmM 0 0 17.5(2.1)FmTX
64.8 568.333 FmM 0 0 35.766(RAID)FmTX
0 18 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 589.666 FmM 1.04 0 213.801(RAID is a storage system architecture in which many)FmTX
36 600.666 FmM 0.072 0 239.614(small disks work together to provide increased performance)FmTX
36 611.666 FmM 3.959 0 81.079(and data availability)FmTX
124.348 611.666 FmM 3.959 0 5(. )FmTX
132.758 611.666 FmM 3.959 0 7.219(A)FmTX
139.428 611.666 FmM 3.959 0 98.291( RAID appears to higher)FmTX
253.359 611.666 FmM 3.959 0 22.761(-level)FmTX
36 622.666 FmM 0.238 0 111.88(software as a single very lar)FmTX
148.89 622.666 FmM 0.238 0 67.478(ge and fast disk. )FmTX
217.141 622.666 FmM 0.238 0 6.108(T)FmTX
222.9 622.666 FmM 0.238 0 52.744(ransfers to or)FmTX
36 633.666 FmM 1.102 0 199.084(from the disk array are divided into blocks called )FmTX
0 20 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
245.007 633.666 FmM 1.102 0 31.113(striping)FmTX
36 644.666 FmM 1.799 0 19.446(units)FmTX
0 23 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
55.446 644.666 FmM 1.799 0 184.951(. Consecutive striping units are assigned to dif)FmTX
252.809 644.666 FmM 1.799 0 23.311(ferent)FmTX
36 655.666 FmM 3.679 0 120.798(disks in the array as shown in )FmTX
182.548 655.666 FmM 3.679 0 33.604(Figure 1)FmTX
219.83 655.666 FmM 3.679 0 45.254( and can be)FmTX
36 666.666 FmM 0.2 0 91.05(transferred in parallel. )FmTX
127.099 666.666 FmM 0.2 0 7.219(A)FmTX
133.769 666.666 FmM 0.2 0 141.353( group of consecutive striping units)FmTX
36 677.666 FmM 1.348 0 122.439(that spans the array is called a )FmTX
0 25 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
167.874 677.666 FmM 1.348 0 22.773(stripe)FmTX
0 28 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
190.648 677.666 FmM 1.348 0 18.875(. Lar)FmTX
210.692 677.666 FmM 1.348 0 62.732(ge transfers can)FmTX
36 688.666 FmM 1.188 0 228.242(proceed at the aggregate bandwidth of all the disks in the)FmTX
36 699.666 FmM 6.553 0 20.532(array)FmTX
55.883 699.666 FmM 6.553 0 174.363(, or multiple small transfers can be serviced)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 52.667 FmM 0 0 76.633(concurrently by dif)FmTX
376.335 52.667 FmM 0 0 48.867(ferent disks.)FmTX
317.88 65.667 FmM 1.631 0 207.437(Since a RAID has more disks than a traditional disk)FmTX
299.88 76.667 FmM 5.069 0 204.639(storage system, disk failures will occur more often.)FmTX
299.88 87.667 FmM 3.882 0 209.063(Furthermore, a disk failure anywhere in a RAID can)FmTX
299.88 98.667 FmM 0.24 0 192.146(potentially make the entire disk array unusable. )FmTX
493.527 98.667 FmM 0.24 0 6.108(T)FmTX
498.937 98.667 FmM 0.24 0 40.823(o improve)FmTX
299.88 109.667 FmM 2.07 0 53.035(data integrity)FmTX
354.335 109.667 FmM 2.07 0 169.104(, a RAID reserves one of the striping units)FmTX
299.88 120.667 FmM 0.745 0 192.959(within each stripe for parity instead of data \(see )FmTX
499.545 120.667 FmM 0.745 0 33.604(Figure 1)FmTX
533.894 120.667 FmM 0.745 0 6.106(\):)FmTX
299.88 131.667 FmM -0.092 0 241.038(each bit of the parity striping unit contains the exclusive OR)FmTX
299.88 142.667 FmM 1.185 0 228.271(of the corresponding bits of the other striping units in the)FmTX
299.88 153.667 FmM 2.821 0 209.087(stripe. If a disk fails, each of its striping units can be)FmTX
299.88 164.667 FmM 0.796 0 232.957(recovered using the data and parity from the other striping)FmTX
299.88 175.666 FmM 1.214 0 74.702(units of the stripe. )FmTX
379.261 175.666 FmM 1.214 0 23.606(The \336)FmTX
404.081 175.666 FmM 1.214 0 131.062(le system can continue operation)FmTX
299.88 186.666 FmM 0 0 190.203(during recovery by reconstructing data on the \337)FmTX
490.083 186.666 FmM 0 0 5(y)FmTX
494.433 186.666 FmM 0 0 2.5(.)FmTX
317.88 199.666 FmM 0.365 0 7.219(A)FmTX
324.55 199.666 FmM 0.365 0 37.764( RAID of)FmTX
362.865 199.666 FmM 0.365 0 28.027(fers lar)FmTX
391.078 199.666 FmM 0.365 0 147.463(ge improvements in throughput, data)FmTX
299.88 210.666 FmM 3.504 0 33.879(integrity)FmTX
333.11 210.666 FmM 3.504 0 66.924(, and availability)FmTX
406.393 210.666 FmM 3.504 0 116.084(, but it presents two potential)FmTX
299.88 221.666 FmM 1.678 0 42.212(problems. )FmTX
343.591 221.666 FmM 1.678 0 23.606(The \336)FmTX
368.875 221.666 FmM 1.678 0 161.06(rst problem is that the parity mechanism)FmTX
299.88 232.666 FmM 0.519 0 235.447(makes small writes expensive. If all write operations are in)FmTX
299.88 243.666 FmM 1.229 0 226.604(units of whole stripes, then it is easy to compute the new)FmTX
299.88 254.666 FmM 0.692 0 214.907(parity for each stripe and write it along with the data. )FmTX
522.224 254.666 FmM 0.692 0 17.776(This)FmTX
299.88 265.666 FmM 1.745 0 222.673(increases the cost of writes by only 1/\(N-1\) relative to a)FmTX
299.88 276.666 FmM -0.076 0 86.65(system without parity)FmTX
385.73 276.666 FmM -0.076 0 154.951(, where N is the number of disks in the)FmTX
299.88 287.666 FmM 0.89 0 20.532(array)FmTX
319.763 287.666 FmM 0.89 0 41.643(. However)FmTX
361.898 287.666 FmM 0.89 0 171.87(, small writes are much more expensive. In)FmTX
299.88 298.666 FmM 0.169 0 95.505(order to keep the stripe\325)FmTX
395.513 298.666 FmM 0.169 0 143.303(s parity consistent with its data, it is)FmTX
299.88 309.666 FmM 0.501 0 234.604(necessary to read the current value of the data block that is)FmTX
299.88 320.666 FmM 0.827 0 233.503(being updated, read the current value of the corresponding)FmTX
299.88 331.666 FmM 0.885 0 232.151(parity block, use this information to compute a new parity)FmTX
299.88 342.666 FmM 0.875 0 162.437(block, then rewrite both parity and data. )FmTX
468.266 342.666 FmM 0.875 0 69.983(This makes small)FmTX
299.88 353.666 FmM 1.965 0 220.474(writes in a RAID about four times as expensive as they)FmTX
299.88 364.666 FmM 1.082 0 155.229(would be in a disk array without parity)FmTX
462.033 364.666 FmM 1.082 0 75.803(. Unfortunately the)FmTX
299.88 375.666 FmM -0.075 0 241.025(best size for a striping unit appears to be tens of kilobytes or)FmTX
299.88 386.666 FmM 0.346 0 112.456(more [Chen90], which is lar)FmTX
413.543 386.666 FmM 0.346 0 88.84(ger than the average \336)FmTX
503.768 386.666 FmM 0.346 0 35.54(le size in)FmTX
299.88 397.666 FmM 3.441 0 216.033(many environments [Baker91], so writes will often be)FmTX
299.88 408.666 FmM 0 0 99.68(smaller than a full stripe.)FmTX
317.88 421.666 FmM 2.249 0 201.875(The second problem with disk arrays is that all the)FmTX
299.88 432.666 FmM 1.048 0 229.641(disks are attached to a single machine, so its memory and)FmTX
299.88 443.666 FmM 1.259 0 228.784(I/O system are likely to be a performance bottleneck. For)FmTX
299.88 454.666 FmM 2.367 0 218.818(example, a SCSI I/O bus can accommodate up to eight)FmTX
299.88 465.666 FmM 0.237 0 137.456(disks, each with a bandwidth of 1-)FmTX
438.755 465.666 FmM 0.237 0 100.535(2 Mbytes/second, but the)FmTX
299.88 476.666 FmM 7.866 0 177.192(SCSI bus has a total bandwidth of only 2-10)FmTX
299.88 487.666 FmM 1.095 0 65.54(Mbytes/second. )FmTX
365.965 487.666 FmM 1.095 0 167.463(Additional SCSI busses can be added, but)FmTX
299.88 498.666 FmM 1.41 0 227.434(data must be copied from the SCSI channel into memory)FmTX
299.88 509.666 FmM 1.136 0 229.897(and from there to a network interface. On the DECstation)FmTX
299.88 520.666 FmM 3.243 0 217.419(5000/200 machines used for the Zebra prototype these)FmTX
299.88 531.666 FmM 1.263 0 214.644(copies can only proceed at about 6-8 Mbytes/second. )FmTX
524.453 531.666 FmM 1.263 0 15.547(The)FmTX
0 0 gm
0 gr
0 0 lin
(299.88 46 540 712)FmKp
(299.88 541.576 539.64 712)FmKp
(nc 541 299 712 540 6 rc)kp
0 0 lin
64 gr
0 0 lin
0 360 18 7.2 true 512.28 633.4 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 512.28 633.4 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 512.28 628.6 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 512.28 628.6 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 512.28 623.799 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 512.28 623.799 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 512.28 619 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 512.28 619 0 1 FmAP
F 32<0F87C3E1F0783C1E>pat
0 0 lin
90 136 18 7.2 false 512.28 619 FmAF
0 gr
0 0 lin
false 90 136 18 7.2 512.28 619 2 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 332.28 633.4 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 332.28 633.4 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 332.28 628.6 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 332.28 628.6 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 332.28 623.799 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 332.28 623.799 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 332.28 619 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 332.28 619 0 1 FmAP
60 sg
0 0 lin
90 136 18 7.2 false 332.28 619 FmAF
0 gr
0 0 lin
false 90 136 18 7.2 332.28 619 2 1 FmAP
60 gr
0 0 lin
328.68 590.2 FmM
328.68 615.4 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
330.885 607.71 FmM
328.68 615.4 FmL
326.475 607.71 FmL
328.68 608.512 FmL
true FmFl
328.68 590.2 FmM
328.68 608.512 FmL
false 2 0.5 FmSt
64 gr
0 0 lin
0 360 18 7.2 true 392.28 633.4 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 392.28 633.4 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 392.28 628.6 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 392.28 628.6 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 392.28 623.799 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 392.28 623.799 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 392.28 619 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 392.28 619 0 1 FmAP
60 gr
0 0 lin
90 136 18 7.2 false 392.28 619 FmAF
0 gr
0 0 lin
false 90 136 18 7.2 392.28 619 2 1 FmAP
60 gr
0 0 lin
388.656 590.2 FmM
388.656 615.4 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
390.861 607.71 FmM
388.656 615.4 FmL
386.451 607.71 FmL
388.656 608.512 FmL
true FmFl
388.656 590.2 FmM
388.656 608.512 FmL
false 2 0.5 FmSt
64 gr
0 0 lin
0 360 18 7.2 true 452.28 633.4 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 452.28 633.4 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 452.28 628.6 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 452.28 628.6 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 452.28 623.799 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 452.28 623.799 0 1 FmAP
64 gr
0 0 lin
0 360 18 7.2 true 452.28 619 FmAF
0 gr
0 0 lin
true 0 360 18 7.2 452.28 619 0 1 FmAP
60 gr
0 0 lin
90 136 18 7.2 false 452.28 619 FmAF
0 gr
0 0 lin
false 90 136 18 7.2 452.28 619 2 1 FmAP
60 gr
0 0 lin
448.704 590.2 FmM
448.704 615.4 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
450.909 607.71 FmM
448.704 615.4 FmL
446.499 607.71 FmL
448.704 608.512 FmL
true FmFl
448.704 590.2 FmM
448.704 608.512 FmL
false 2 0.5 FmSt
60 gr
0 0 lin
508.68 590.2 FmM
508.68 615.4 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
510.885 607.71 FmM
508.68 615.4 FmL
506.475 607.71 FmL
508.68 608.512 FmL
true FmFl
508.68 590.2 FmM
508.68 608.512 FmL
false 2 0.5 FmSt
60 gr
0 0 lin
345.48 561.4 374.28 575.8 FmqF
0 gr
0 0 lin
1 345.48 561.4 374.28 575.8 FmqP
0 0 lin
60 gr
0 0 lin
403.08 561.4 431.88 575.8 FmqF
0 gr
0 0 lin
1 403.08 561.4 431.88 575.8 FmqP
0 0 lin
60 gr
0 0 lin
374.28 561.4 403.08 575.8 FmqF
0 gr
0 0 lin
1 374.28 561.4 403.08 575.8 FmqP
0 0 lin
F 32<0F87C3E1F0783C1E>pat
0 0 lin
494.28 561.4 523.08 575.8 FmqF
0 gr
0 0 lin
1 494.28 561.4 523.08 575.8 FmqP
0 0 lin
32 gr
0 0 lin
328.68 590.2 FmM
359.88 590.2 FmL
false FmFl
0 gr
0 0 lin
328.68 590.2 FmM
359.88 590.2 FmL
false 2 0.5 FmSt
32 gr
0 0 lin
417.48 590.2 FmM
448.68 590.2 FmL
false FmFl
0 gr
0 0 lin
417.48 590.2 FmM
448.68 590.2 FmL
false 2 0.5 FmSt
32 gr
0 0 lin
359.88 590.2 FmM
359.88 575.8 FmL
false FmFl
0 gr
0 0 lin
359.88 590.2 FmM
359.88 575.8 FmL
false 2 0.5 FmSt
32 gr
0 0 lin
388.68 590.2 FmM
388.68 575.8 FmL
false FmFl
0 gr
0 0 lin
388.68 590.2 FmM
388.68 575.8 FmL
false 2 0.5 FmSt
32 gr
0 0 lin
417.48 590.2 FmM
417.48 575.8 FmL
false FmFl
0 gr
0 0 lin
417.48 590.2 FmM
417.48 575.8 FmL
false 2 0.5 FmSt
32 gr
0 0 lin
508.68 590.2 FmM
508.68 575.8 FmL
false FmFl
0 gr
0 0 lin
508.68 590.2 FmM
508.68 575.8 FmL
false 2 0.5 FmSt
0 0 gm
F 1 setTxMode
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
380.186 555.183 FmM 0 0 16.987(Data)FmTX
497.933 555.183 FmM 0 0 21.494(Parity)FmTX
0 0 gm
64 gr
0 0 lin
299.88 658.6 539.64 712.6 FmqF
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
317.88 664.6 FmM 0.721 0 21.496(Figur)FmTX
339.215 664.6 FmM 0.721 0 10.745(e 1)FmTX
0 2 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
350.681 664.6 FmM 0.721 0 4.5(. )FmTX
0 5 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
355.901 664.6 FmM 0.721 0 76.489(Striping with parity)FmTX
0 7 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
433.247 664.6 FmM 0.721 0 4.5(. )FmTX
438.307 664.6 FmM 0.721 0 80.451(The storage space of a)FmTX
317.88 673.6 FmM 2.386 0 184.676(RAID disk array is divided into stripes, where each)FmTX
317.88 682.6 FmM 0.667 0 195.427(stripe contains a striping unit on each disk of the array)FmTX
519.39 682.6 FmM 0.667 0 2.25(.)FmTX
317.88 691.6 FmM 1.88 0 184.957(All but one of the striping units hold data; the other)FmTX
317.88 700.6 FmM 0.118 0 202.7(striping unit holds parity information that can be used to)FmTX
317.88 709.6 FmM 0 0 97.178(recover after a disk failure.)FmTX
0 0 gm
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
( )show
302.998 571.668 FmM 0 0 21.494(Stripe)FmTX
0 0 gm
64 gr
0 0 lin
332.933 568.6 FmM
344.88 568.6 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
337.19 566.395 FmM
344.88 568.6 FmL
337.19 570.805 FmL
337.993 568.6 FmL
true FmFl
332.933 568.6 FmM
337.993 568.6 FmL
false 2 0.5 FmSt
0 0 gm
F 1 setTxMode
bu fc

%%BeginFont: Symbol
%%IncludeFont: Symbol
bn
%%EndFont
bu fc
{}mark F /Symbol /|______Symbol 0 rf
bn
12 fz
bu fc
2 F /|______Symbol fnt
bn
( )show
460.873 572.596 FmM 0 0 9.214(\304)FmTX
0 0 gm
64 gr
0 0 lin
433.079 568.6 FmM
458.279 568.6 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
450.589 566.395 FmM
458.279 568.6 FmL
450.589 570.805 FmL
451.392 568.6 FmL
true FmFl
433.079 568.6 FmM
451.392 568.6 FmL
false 2 0.5 FmSt
64 gr
0 0 lin
472.679 568.6 FmM
494.279 568.6 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
486.589 566.395 FmM
494.279 568.6 FmL
486.589 570.805 FmL
487.392 568.6 FmL
true FmFl
472.679 568.6 FmM
487.392 568.6 FmL
false 2 0.5 FmSt
0 0 lin
379.332 624.001 FmM
392.28 619 FmL
392.28 626.2 FmL
false 2 0.5 FmSt
0 0 lin
319.332 624.001 FmM
332.28 619 FmL
332.28 626.2 FmL
false 2 0.5 FmSt
0 0 lin
439.332 624.001 FmM
452.28 619 FmL
452.28 626.2 FmL
false 2 0.5 FmSt
0 0 lin
499.332 624.001 FmM
512.28 619 FmL
512.28 626.2 FmL
false 2 0.5 FmSt
(299.88 46 540 712)FmKp
(nc 46 299 712 540 6 rc)kp
0 0 lin
F T cp
%%Page: ? 3
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 229.067 FmM 0.309 0 237.957(Berkeley RAID project has built a special-purpose memory)FmTX
36 240.067 FmM 1.179 0 231.865(system with a dedicated high-bandwidth path between the)FmTX
36 251.067 FmM 2.028 0 221.868(network and the disks [Lee92] but even this system can)FmTX
36 262.067 FmM 0 0 177.998(support only a few dozen disks at full speed.)FmTX
54 275.067 FmM 4.074 0 197.678(In order to eliminate the performance bottlenecks)FmTX
36 286.067 FmM 0.075 0 239.368(multiple paths must exist between the source or sink of data)FmTX
36 297.067 FmM 1.374 0 94.702(and the disks so that dif)FmTX
137.394 297.067 FmM 1.374 0 130.481(ferent paths can be used to reach)FmTX
36 308.067 FmM 4.489 0 11.106(dif)FmTX
46.928 308.067 FmM 4.489 0 193.284(ferent disks. For example, this might be done by)FmTX
36 319.067 FmM 1.367 0 119.968(spreading the disks among dif)FmTX
161.258 319.067 FmM 1.367 0 109.395(ferent machines on a single)FmTX
36 330.067 FmM 4.179 0 183.552(very high speed network, or even by using dif)FmTX
252.809 330.067 FmM 4.179 0 23.311(ferent)FmTX
36 341.067 FmM 0.982 0 84.68(networks to reach dif)FmTX
123.447 341.067 FmM 0.982 0 107.454(ferent disks. Unfortunately)FmTX
232.215 341.067 FmM 0.982 0 41.941(, this turns)FmTX
36 352.066 FmM 3.01 0 216.042(the disk array into a distributed system and introduces)FmTX
36 363.066 FmM 1.163 0 229.648(issues such as who should allocate disk space or compute)FmTX
36 374.066 FmM 3.058 0 23.323(parity)FmTX
58.673 374.066 FmM 3.058 0 186.863(. One of our goals for Zebra was to solve these)FmTX
36 385.066 FmM 0 0 186.338(distributed system problems in a simple and ef)FmTX
222.16 385.066 FmM 0 0 5.559(\336)FmTX
227.719 385.066 FmM 0 0 38.591(cient way)FmTX
265.661 385.066 FmM 0 0 2.5(.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 408.733 FmM 0 0 17.5(2.2)FmTX
64.8 408.733 FmM 0 0 20.979(Per)FmTX
85.263 408.733 FmM 0 0 79.704(-File Striping)FmTX
164.967 408.733 FmM 0 0 110.8( in a Network File )FmTX
64.8 424.733 FmM 0 0 42.759(System)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 446.066 FmM 0.21 0 7.219(A)FmTX
60.67 446.066 FmM 0.21 0 73.035( striped network \336)FmTX
134.335 446.066 FmM 0.21 0 133.308(le system is one that distributes \336)FmTX
268.903 446.066 FmM 0.21 0 7.217(le)FmTX
36 457.066 FmM 0.806 0 104.68(data over more than one \336)FmTX
144.71 457.066 FmM 0.806 0 125.769(le server in the same way that a)FmTX
36 468.066 FmM 3.145 0 171.902(RAID distributes data over multiple disks. )FmTX
226.595 468.066 FmM 3.145 0 46.379(This allows)FmTX
36 479.066 FmM 0.106 0 229.346(multiple servers to participate in the transfer of a single \336)FmTX
266.403 479.066 FmM 0.106 0 9.717(le.)FmTX
36 490.066 FmM 1.103 0 222.974(The terminology we use to describe a striped network \336)FmTX
268.903 490.066 FmM 1.103 0 7.217(le)FmTX
36 501.066 FmM 1.463 0 107.751(system is similar to RAID\325)FmTX
149.054 501.066 FmM 1.463 0 74.421(s: a collection of \336)FmTX
229.327 501.066 FmM 1.463 0 43.867(le data that)FmTX
36 512.066 FmM 1.938 0 112.722(spans the servers is called a )FmTX
0 9 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
160.35 512.066 FmM 1.938 0 22.773(stripe)FmTX
0 12 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
183.124 512.066 FmM 1.938 0 83.306(, and the portion of a)FmTX
36 523.066 FmM 0 0 166.868(stripe stored on a single server is called a )FmTX
0 14 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
202.868 523.066 FmM 0 0 61.377(stripe fragment)FmTX
0 17 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
264.245 523.066 FmM 0 0 2.5(.)FmTX
54 536.066 FmM 1.546 0 111.924(The most obvious way to or)FmTX
173.475 536.066 FmM 1.546 0 98.008(ganize a striped network)FmTX
36 547.066 FmM 2.223 0 5.559(\336)FmTX
41.559 547.066 FmM 2.223 0 110.522(le system is to stripe each \336)FmTX
165.419 547.066 FmM 2.223 0 50.244(le separately)FmTX
217.237 547.066 FmM 2.223 0 52.214(, as shown in)FmTX
36 558.066 FmM 0.694 0 33.604(Figure 2)FmTX
70.297 558.066 FmM 0.694 0 5(. )FmTX
75.813 558.066 FmM 0.694 0 9.438(W)FmTX
84.453 558.066 FmM 0.694 0 98.845(e refer to this method as )FmTX
0 19 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
187.46 558.066 FmM 0.694 0 13.328(per)FmTX
200.589 558.066 FmM 0.694 0 8.328(-\336)FmTX
208.917 558.066 FmM 0.694 0 40.83(le striping)FmTX
0 22 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
250.441 558.066 FmM 0.694 0 24.985(. Each)FmTX
36 569.066 FmM 0.89 0 5.559(\336)FmTX
41.559 569.066 FmM 0.89 0 143.296(le is stored in its own set of stripes. )FmTX
192.312 569.066 FmM 0.89 0 80.249(As a result, parity is)FmTX
36 580.066 FmM 1.511 0 74.138(computed on a per)FmTX
114.473 580.066 FmM 1.511 0 8.887(-\336)FmTX
123.36 580.066 FmM 1.511 0 145.205(le basis because each stripe contains)FmTX
36 591.066 FmM 0.42 0 83.865(data from only one \336)FmTX
121.545 591.066 FmM 0.42 0 12.217(le. )FmTX
134.003 591.066 FmM 0.42 0 124.951(While conceptually simple, per)FmTX
260.016 591.066 FmM 0.42 0 8.887(-\336)FmTX
268.903 591.066 FmM 0.42 0 7.217(le)FmTX
36 602.066 FmM 0.318 0 167.183(striping has two drawbacks. First, small \336)FmTX
205.094 602.066 FmM 0.318 0 39.417(les are dif)FmTX
244.969 602.066 FmM 0.318 0 5.559(\336)FmTX
250.528 602.066 FmM 0.318 0 25.273(cult to)FmTX
36 613.066 FmM 0.802 0 36.921(handle ef)FmTX
73.545 613.066 FmM 0.802 0 5.559(\336)FmTX
79.104 613.066 FmM 0.802 0 27.212(ciently)FmTX
105.667 613.066 FmM 0.802 0 50.815(. If a small \336)FmTX
159.69 613.066 FmM 0.802 0 111.619(le is striped across all of the)FmTX
36 624.066 FmM 0.804 0 51.917(servers as in )FmTX
90.33 624.066 FmM 0.804 0 33.604(Figure 3)FmTX
124.737 624.066 FmM 0.804 0 11.094(\(a\))FmTX
135.831 624.066 FmM 0.804 0 134.658( then each server will only store a)FmTX
36 635.066 FmM 0.045 0 99.126(very small piece of the \336)FmTX
135.349 635.066 FmM 0.045 0 12.217(le. )FmTX
147.432 635.066 FmM 0.045 0 128.555(This provides little performance)FmTX
36 646.066 FmM 0.422 0 24.436(bene\336)FmTX
60.436 646.066 FmM 0.422 0 211.038(t, since most of the access cost is due to network and)FmTX
36 657.066 FmM -0.161 0 48.04(disk latency)FmTX
83.229 657.066 FmM -0.161 0 194.336(, yet it incurs overhead on every server for every)FmTX
36 668.066 FmM 3.498 0 5.559(\336)FmTX
41.559 668.066 FmM 3.498 0 40.249(le access. )FmTX
88.625 668.066 FmM 3.498 0 151.904(Thus it seems better to handle small \336)FmTX
265.014 668.066 FmM 3.498 0 11.106(les)FmTX
36 679.066 FmM 0.734 0 11.106(dif)FmTX
46.928 679.066 FmM 0.734 0 63.85(ferently than lar)FmTX
112.068 679.066 FmM 0.734 0 17.498(ge \336)FmTX
130.299 679.066 FmM 0.734 0 113.293(les and to store each small \336)FmTX
247.996 679.066 FmM 0.734 0 26.655(le on a)FmTX
36 690.066 FmM 1.244 0 50.806(single server)FmTX
87.651 690.066 FmM 1.244 0 26.106(, as in )FmTX
117.488 690.066 FmM 1.244 0 33.604(Figure 3)FmTX
152.336 690.066 FmM 1.244 0 16.655(\(b\). )FmTX
170.056 690.066 FmM 1.244 0 101.089(This leads to problems in)FmTX
36 701.066 FmM 1.076 0 116.335(parity management, however)FmTX
153.939 701.066 FmM 1.076 0 50.815(. If a small \336)FmTX
209.059 701.066 FmM 1.076 0 62.756(le is stored on a)FmTX
0 0 gm
0 gr
0 0 lin
(36 46 276.12 712)FmKp
(36 46 275.76 222.4)FmKp
(nc 46 36 223 276 6 rc)kp
0 0 lin
60 sg
0 0 lin
96.3 69.4 182.7 83.8 FmqF
0 gr
0 0 lin
0.5 96.3 69.4 182.7 83.8 FmqP
0 0 lin
0 0 gm
F 1 setTxMode
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
132.501 63.63 FmM 0 0 13.999(File)FmTX
117.884 179.047 FmM 0 0 43.231(File Servers)FmTX
0 0 gm
64 gr
0 0 lin
36 190 275.76 217 FmqF
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 196 FmM 1.114 0 21.496(Figur)FmTX
75.335 196 FmM 1.114 0 10.745(e 2)FmTX
0 2 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
87.194 196 FmM 1.114 0 4.5(. )FmTX
0 5 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
92.807 196 FmM 1.114 0 13.487(Per)FmTX
105.962 196 FmM 1.114 0 7.998(-\336)FmTX
113.96 196 FmM 1.114 0 52.482(le striping for)FmTX
168.509 196 FmM 1.114 0 35.743( a large \336)FmTX
207.593 196 FmM 1.114 0 6.495(le)FmTX
0 7 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
214.088 196 FmM 1.114 0 4.5(. )FmTX
219.541 196 FmM 1.114 0 21.245(The \336)FmTX
241.9 196 FmM 1.114 0 14.746(le is)FmTX
54 205 FmM 1.351 0 192.955(divided up into stripe units that are distributed among)FmTX
54 214 FmM 0 0 191.158(the servers. Each stripe contains one parity fragment.)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0.5 96.3 69.4 110.7 83.8 FmqP
0 0 lin
0 0 lin
0.5 125.1 69.4 139.5 83.8 FmqP
0 0 lin
0 0 lin
0.5 110.7 69.4 125.1 83.8 FmqP
0 0 lin
0 0 lin
0.5 139.5 69.4 153.9 83.8 FmqP
0 0 lin
0 0 lin
0.5 153.9 69.4 168.3 83.8 FmqP
0 0 lin
0 0 lin
0.5 168.3 69.4 182.7 83.8 FmqP
0 0 lin
0 0 gm
F 1 setTxMode
( )show
101.25 80.01 FmM 0 0 4.5(1)FmTX
115.65 80.01 FmM 0 0 4.5(2)FmTX
130.05 80.01 FmM 0 0 4.5(3)FmTX
144.45 80.01 FmM 0 0 4.5(4)FmTX
158.85 80.01 FmM 0 0 4.5(5)FmTX
173.25 80.01 FmM 0 0 4.5(6)FmTX
229.5 129.914 FmM 0 0 4.5(1)FmTX
0 2 gm
bu fc
2 F /|______Symbol fnt
bn
( )show
234 129.914 FmM 0 0 9.16( \304)FmTX
0 4 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
243.16 129.914 FmM 0 0 9( 2 )FmTX
0 7 gm
bu fc
2 F /|______Symbol fnt
bn
( )show
252.16 129.914 FmM 0 0 6.91(\304)FmTX
0 9 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
259.071 129.914 FmM 0 0 6.75( 3)FmTX
229.5 144.313 FmM 0 0 6.75(4 )FmTX
0 11 gm
bu fc
2 F /|______Symbol fnt
bn
( )show
236.25 144.313 FmM 0 0 6.91(\304)FmTX
0 13 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
243.16 144.313 FmM 0 0 9( 5 )FmTX
0 16 gm
bu fc
2 F /|______Symbol fnt
bn
( )show
252.16 144.313 FmM 0 0 6.91(\304)FmTX
0 18 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
259.071 144.313 FmM 0 0 6.75( 6)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
219.19 143.109 FmM
211.5 140.904 FmL
219.19 138.699 FmL
218.388 140.904 FmL
true FmFl
218.388 140.904 FmM
225.9 140.904 FmL
false 2 0.5 FmSt
0 0 lin
0 0 lin
219.19 128.709 FmM
211.5 126.504 FmL
219.19 124.299 FmL
218.388 126.504 FmL
true FmFl
218.388 126.504 FmM
225.9 126.504 FmL
false 2 0.5 FmSt
60 gr
0 0 lin
67.5 119.798 81.9 134.197 FmqF
0 gr
0 0 lin
0.5 67.5 119.798 81.9 134.197 FmqP
0 0 lin
0 0 gm
F 1 setTxMode
8 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
72.7 130.407 FmM 0 0 4(1)FmTX
0 0 gm
60 gr
0 0 lin
67.5 134.197 81.9 148.597 FmqF
0 gr
0 0 lin
0.5 67.5 134.197 81.9 148.597 FmqP
0 0 lin
0 0 gm
F 1 setTxMode
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
72.451 144.807 FmM 0 0 4.5(4)FmTX
0 0 gm
60 gr
0 0 lin
110.7 119.798 125.1 134.197 FmqF
0 gr
0 0 lin
0.5 110.7 119.798 125.1 134.197 FmqP
0 0 lin
115.65 130.407 FmM 0 0 4.5(2)FmTX
60 gr
0 0 lin
153.9 119.798 168.3 134.197 FmqF
0 gr
0 0 lin
0.5 153.9 119.798 168.3 134.197 FmqP
0 0 lin
158.85 130.407 FmM 0 0 4.5(3)FmTX
60 gr
0 0 lin
110.7 134.197 125.1 148.597 FmqF
0 gr
0 0 lin
0.5 110.7 134.197 125.1 148.597 FmqP
0 0 lin
115.65 144.807 FmM 0 0 4.5(5)FmTX
60 gr
0 0 lin
153.9 134.197 168.3 148.597 FmqF
0 gr
0 0 lin
0.5 153.9 134.197 168.3 148.597 FmqP
0 0 lin
158.85 144.807 FmM 0 0 4.5(6)FmTX
F 32<0F87C3E1F0783C1E>pat
0 0 lin
197.1 134.197 211.5 148.597 FmqF
0 gr
0 0 lin
0.5 197.1 134.197 211.5 148.597 FmqP
0 0 lin
32 gr
0 0 lin
197.1 119.798 211.5 134.197 FmqF
0 gr
0 0 lin
0.5 197.1 119.798 211.5 134.197 FmqP
0 0 lin
0 0 lin
1 67.5 105.4 81.9 163 FmqP
0 0 lin
0 0 lin
1 110.7 105.4 125.1 163 FmqP
0 0 lin
0 0 lin
1 197.1 105.4 211.5 163 FmqP
0 0 lin
0 0 lin
1 153.9 105.4 168.3 163 FmqP
0 0 lin
0 0 lin
1 96.3 69.398 182.7 83.798 FmqP
0 0 lin
(36 46 276.12 712)FmKp
(nc 46 36 712 277 6 rc)kp
0 0 lin
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 gm
F 1 setTxMode
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
299.88 394.667 FmM 0.465 0 235.466(single server then its parity will consume as much space as)FmTX
299.88 405.667 FmM -0.225 0 20.276(the \336)FmTX
319.931 405.667 FmM -0.225 0 221.87(le itself, resulting in high storage overhead. In addition,)FmTX
299.88 416.667 FmM 1.351 0 64.138(the approach in )FmTX
368.07 416.667 FmM 1.351 0 33.604(Figure 3)FmTX
403.024 416.667 FmM 1.351 0 130.222(\(b\) can result in unbalanced disk)FmTX
299.88 427.667 FmM 0 0 119.402(utilization and server loading.)FmTX
317.88 440.667 FmM 2.006 0 47.202(Second, per)FmTX
366.891 440.667 FmM 2.006 0 8.887(-\336)FmTX
375.777 440.667 FmM 2.006 0 152.185(le striping also leads to problems with)FmTX
299.88 451.667 FmM 2.42 0 204.377(parity management during updates. If an existing \336)FmTX
521.196 451.667 FmM 2.42 0 16.384(le is)FmTX
299.88 462.667 FmM 2.952 0 26.116(modi\336)FmTX
325.996 462.667 FmM 2.952 0 161.067(ed then its parity must be updated to re\337)FmTX
510.676 462.667 FmM 2.952 0 26.372(ect the)FmTX
299.88 473.667 FmM 4.109 0 26.116(modi\336)FmTX
325.996 473.667 FmM 4.109 0 29.434(cation. )FmTX
358.989 473.667 FmM 4.109 0 156.357(As with RAIDs, small updates like this)FmTX
299.88 484.667 FmM 0.411 0 236.006(require two reads \(the old data and the old parity\) followed)FmTX
299.88 495.667 FmM 5.208 0 193.25(by two writes \(the new data and the new parity\).)FmTX
299.88 506.667 FmM 0.629 0 233.24(Furthermore the two writes must be carried out atomically)FmTX
537.5 506.667 FmM 0.629 0 2.5(.)FmTX
299.88 517.666 FmM 0.244 0 237.681(If one write should complete but not the other \(e.g. because)FmTX
299.88 528.666 FmM 5.179 0 193.508(a client or server crashed\) then the parity will be)FmTX
299.88 539.666 FmM 1.964 0 220.481(inconsistent with the data; if this parity is used later for)FmTX
299.88 550.666 FmM 0.785 0 234.622(reconstructing lost data, incorrect results will be produced.)FmTX
299.88 561.666 FmM 1.658 0 225.198(There exist protocols for ensuring that two writes to two)FmTX
299.88 572.666 FmM 9.143 0 11.106(dif)FmTX
310.808 572.666 FmM 9.143 0 31.37(ferent \336)FmTX
351.32 572.666 FmM 9.143 0 142.966(le servers are carried out atomically)FmTX
299.88 583.666 FmM 0 0 203.53([Bernstein81] but they are complex and expensive.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 607.333 FmM 0 0 17.5(2.3)FmTX
328.68 607.333 FmM 0 0 79.304(Log-Structur)FmTX
407.734 607.333 FmM 0 0 121.311(ed File Systems and )FmTX
328.68 623.333 FmM 0 0 20.979(Per)FmTX
349.143 623.333 FmM 0 0 93.7(-Client Striping)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 644.666 FmM 2.841 0 140.779(Zebra solves the problems with per)FmTX
472.664 644.666 FmM 2.841 0 8.887(-\336)FmTX
481.55 644.666 FmM 2.841 0 52.769(le striping by)FmTX
299.88 655.666 FmM 0.588 0 168.833(applying techniques from log-structured \336)FmTX
471.063 655.666 FmM 0.588 0 67.761(le systems \(LFS\))FmTX
299.88 666.666 FmM 1.136 0 232.166([Rosenblum91]. LFS is a disk management technique that)FmTX
299.88 677.666 FmM 0.566 0 157.729(treats the disk like an append-only log. )FmTX
461.396 677.666 FmM 0.566 0 51.094(When new \336)FmTX
513.623 677.666 FmM 0.566 0 25.811(les are)FmTX
299.88 688.666 FmM 2.679 0 81.909(created or existing \336)FmTX
389.826 688.666 FmM 2.679 0 54.426(les are modi\336)FmTX
449.611 688.666 FmM 2.679 0 79.673(ed, the new data are)FmTX
299.88 699.666 FmM 0.97 0 220.193(batched together and written to the end of the log in lar)FmTX
530.561 699.666 FmM 0.97 0 9.438(ge)FmTX
0 0 gm
0 gr
0 0 lin
(299.88 46 540 712)FmKp
(299.88 46 539.64 388)FmKp
(nc 46 299 388 540 6 rc)kp
0 0 lin
64 gr
0 0 lin
299.88 334 539.64 379 FmqF
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
9 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
317.88 340 FmM -0.069 0 21.496(Figur)FmTX
339.215 340 FmM -0.069 0 10.745(e 3)FmTX
0 2 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
349.891 340 FmM -0.069 0 4.5(. )FmTX
0 5 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
354.322 340 FmM -0.069 0 13.487(Per)FmTX
367.477 340 FmM -0.069 0 7.998(-\336)FmTX
375.475 340 FmM -0.069 0 52.482(le striping for)FmTX
427.657 340 FmM -0.069 0 36.749( a small \336)FmTX
464.199 340 FmM -0.069 0 6.495(le)FmTX
0 7 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
470.694 340 FmM -0.069 0 44.728(. In \(a\) the \336)FmTX
515.145 340 FmM -0.069 0 6.495(le)FmTX
317.88 349 FmM 1.51 0 191.678(is striped evenly across the servers, resulting in small)FmTX
317.88 358 FmM 0.561 0 90.193(fragments on each server)FmTX
409.263 358 FmM 0.561 0 67.968(. In \(b\) the entire \336)FmTX
480.037 358 FmM 0.561 0 40.48(le is placed)FmTX
317.88 367 FmM 0.645 0 196.664(on one server but the parity takes as much space as the)FmTX
317.88 376 FmM 0 0 5.003(\336)FmTX
322.883 376 FmM 0 0 8.745(le.)FmTX
0 0 gm
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
( )show
408.188 54.837 FmM 0 0 13.999(File)FmTX
393.571 163.054 FmM 0 0 43.231(File Servers)FmTX
0 0 gm
60 sg
0 0 lin
409.787 60.607 420.587 75.007 FmqF
0 gr
0 0 lin
0.5 409.787 60.607 420.587 75.007 FmqP
0 0 lin
60 gr
0 0 lin
353.987 111.007 368.387 114.607 FmqF
0 gr
0 0 lin
0.5 353.987 111.007 368.387 114.607 FmqP
0 0 lin
60 gr
0 0 lin
389.987 111.007 404.387 114.607 FmqF
0 gr
0 0 lin
0.5 389.987 111.007 404.387 114.607 FmqP
0 0 lin
F 32<0F87C3E1F0783C1E>pat
0 0 lin
461.987 111.007 476.387 114.607 FmqF
0 gr
0 0 lin
0.5 461.987 111.007 476.387 114.607 FmqP
0 0 lin
32 gr
0 0 lin
476.387 112.807 FmM
490.786 112.807 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
484.077 115.012 FmM
476.387 112.807 FmL
484.077 110.602 FmL
483.275 112.807 FmL
true FmFl
483.275 112.807 FmM
490.786 112.807 FmL
false 2 0.5 FmSt
0 0 gm
F 1 setTxMode
( )show
494.386 116.217 FmM 0 0 21.494(Parity)FmTX
0 0 gm
60 sg
0 0 lin
425.987 111.007 440.387 114.607 FmqF
0 gr
0 0 lin
0.5 425.987 111.007 440.387 114.607 FmqP
0 0 lin
0 0 gm
F 1 setTxMode
( )show
410.195 172.424 FmM 0 0 9.984(\(a\))FmTX
0 0 gm
0 gr
0 0 lin
1 353.987 89.407 368.387 147.007 FmqP
0 0 lin
0 0 lin
1 389.987 89.407 404.387 147.007 FmqP
0 0 lin
0 0 lin
1 425.986 89.407 440.386 147.007 FmqP
0 0 lin
0 0 lin
1 461.987 89.407 476.387 147.007 FmqP
0 0 lin
0 0 gm
F 1 setTxMode
( )show
408.188 198.837 FmM 0 0 13.999(File)FmTX
393.571 307.054 FmM 0 0 43.231(File Servers)FmTX
0 0 gm
60 gr
0 0 lin
409.787 204.607 420.587 219.007 FmqF
0 gr
0 0 lin
0.5 409.787 204.607 420.587 219.007 FmqP
0 0 lin
60 gr
0 0 lin
353.987 251.407 368.387 262.207 FmqF
0 gr
0 0 lin
0.5 353.987 251.407 368.387 262.207 FmqP
0 0 lin
F 32<0F87C3E1F0783C1E>pat
0 0 lin
461.987 251.407 476.387 262.207 FmqF
0 gr
0 0 lin
0.5 461.987 251.407 476.387 262.207 FmqP
0 0 lin
32 gr
0 0 lin
476.387 256.807 FmM
490.786 256.807 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
484.077 259.012 FmM
476.387 256.807 FmL
484.077 254.602 FmL
483.275 256.807 FmL
true FmFl
483.275 256.807 FmM
490.786 256.807 FmL
false 2 0.5 FmSt
0 0 gm
F 1 setTxMode
( )show
494.386 260.217 FmM 0 0 21.494(Parity)FmTX
0 2 gm
( )show
409.942 317.333 FmM 0 0 10.49(\(b\))FmTX
0 0 gm
0 gr
0 0 lin
1 353.987 233.407 368.387 291.007 FmqP
0 0 lin
0 0 lin
1 389.987 233.407 404.387 291.007 FmqP
0 0 lin
0 0 lin
1 425.986 233.407 440.386 291.007 FmqP
0 0 lin
0 0 lin
1 461.987 233.407 476.387 291.007 FmqP
0 0 lin
(299.88 46 540 712)FmKp
(nc 46 299 712 540 6 rc)kp
0 0 lin
F T cp
%%Page: ? 4
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 277.667 FmM -0.02 0 167.7(sequential transfers. LFS is particularly ef)FmTX
203.423 277.667 FmM -0.02 0 72.737(fective for writing)FmTX
36 288.667 FmM 0.271 0 29.722(small \336)FmTX
65.993 288.667 FmM 0.271 0 116.902(les, since it can write many \336)FmTX
184.522 288.667 FmM 0.271 0 90.513(les in a single transfer;)FmTX
36 299.667 FmM 2.976 0 96.084(in contrast, traditional \336)FmTX
141.012 299.667 FmM 2.976 0 120.227(le systems require at least two)FmTX
36 310.667 FmM -0.207 0 147.986(independent disk transfers for each \336)FmTX
182.952 310.667 FmM -0.207 0 93.582(le. Rosenblum reported)FmTX
36 321.667 FmM 1.344 0 142.449(a tenfold speedup over traditional \336)FmTX
185.17 321.667 FmM 1.344 0 86.917(le systems for writing)FmTX
36 332.667 FmM 1.687 0 29.722(small \336)FmTX
67.409 332.667 FmM 1.687 0 195.212(les. LFS is also well-suited for RAIDs because it)FmTX
36 343.667 FmM 0.495 0 147.439(batches small writes together into lar)FmTX
185.735 343.667 FmM 0.495 0 89.395(ge sequential transfers)FmTX
36 354.667 FmM 2.449 0 222.976(and avoids the expensive parity updates associated with)FmTX
36 365.667 FmM 0 0 84.138(small random writes.)FmTX
54 378.667 FmM -0.031 0 215.186(Zebra can be thought of as a log-structured network \336)FmTX
268.903 378.667 FmM -0.031 0 7.217(le)FmTX
36 389.667 FmM 2.94 0 216.597(system: whereas LFS uses the logging approach at the)FmTX
36 400.666 FmM 0.552 0 85.776(interface between a \336)FmTX
123.432 400.666 FmM 0.552 0 148.826(le server and its disks, Zebra uses the)FmTX
36 411.666 FmM 1.353 0 227.947(logging approach at the interface between a client and its)FmTX
36 422.666 FmM 1.902 0 33.311(servers. )FmTX
71.212 422.666 FmM 1.902 0 33.604(Figure 4)FmTX
106.718 422.666 FmM 1.902 0 157.991( illustrates this approach, which we call)FmTX
0 3 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
36 433.666 FmM 0.735 0 13.328(per)FmTX
49.13 433.666 FmM 0.735 0 25.54(-client)FmTX
0 6 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
74.669 433.666 FmM 0.735 0 119.39( striping. Each Zebra client or)FmTX
197.554 433.666 FmM 0.735 0 69.146(ganizes its new \336)FmTX
268.903 433.666 FmM 0.735 0 7.217(le)FmTX
36 444.666 FmM -0.23 0 242.422(data into an append-only log, which it then stripes across the)FmTX
36 455.666 FmM 2.667 0 33.311(servers. )FmTX
71.799 455.666 FmM 2.667 0 182.988(The client computes parity for the log, not for)FmTX
36 466.666 FmM 0.63 0 48.611(individual \336)FmTX
85.241 466.666 FmM 0.63 0 185.208(les. Each client creates its own log, so a single)FmTX
36 477.666 FmM 1.574 0 55.266(stripe in the \336)FmTX
95.989 477.666 FmM 1.574 0 169.111(le system contains data written by a single)FmTX
36 488.666 FmM 0 0 24.712(client.)FmTX
54 501.666 FmM -0.228 0 13.325(Per)FmTX
67.127 501.666 FmM -0.228 0 207.683(-client striping has a number of advantages over per)FmTX
272.792 501.666 FmM -0.228 0 3.328(-)FmTX
36 512.666 FmM 0.529 0 5.559(\336)FmTX
41.559 512.666 FmM 0.529 0 45.269(le striping. )FmTX
87.707 512.666 FmM 0.529 0 23.606(The \336)FmTX
111.842 512.666 FmM 0.529 0 127.983(rst is that the servers are used ef)FmTX
243.349 512.666 FmM 0.529 0 5.559(\336)FmTX
248.908 512.666 FmM 0.529 0 27.212(ciently)FmTX
36 523.666 FmM 1.892 0 59.414(regardless of \336)FmTX
99.197 523.666 FmM 1.892 0 44.973(le sizes: lar)FmTX
147.775 523.666 FmM 1.892 0 120.779(ge writes are striped, allowing)FmTX
36 534.666 FmM 2.863 0 214.355(them to be completed in parallel, and small writes are)FmTX
36 545.666 FmM 1.164 0 229.644(batched together by the log mechanism and written to the)FmTX
36 556.666 FmM 0.571 0 51.633(servers in lar)FmTX
88.597 556.666 FmM 0.571 0 183.528(ge transfers; no special handling is needed for)FmTX
36 567.666 FmM 2.567 0 210.21(either case. Second, the parity mechanism is simpli\336)FmTX
264.182 567.666 FmM 2.567 0 11.938(ed.)FmTX
36 578.666 FmM 0.576 0 234.355(Each client computes parity for its own log without fear of)FmTX
36 589.666 FmM 3.113 0 154.958(interactions with other clients. Small \336)FmTX
206.521 589.666 FmM 3.113 0 60.261(les do not have)FmTX
36 600.666 FmM 1.5 0 229.622(excessive parity overhead because parity is not computed)FmTX
36 611.666 FmM 1.559 0 32.205(on a per)FmTX
71.124 611.666 FmM 1.559 0 8.887(-\336)FmTX
80.011 611.666 FmM 1.559 0 185.198(le basis. Furthermore, parity never needs to be)FmTX
36 622.666 FmM 0 0 73.857(updated because \336)FmTX
109.857 622.666 FmM 0 0 150.74(le data are never overwritten in place.)FmTX
54 635.666 FmM 2.899 0 118.848(The above introduction to per)FmTX
184.247 635.666 FmM 2.899 0 86.074(-client striping leaves)FmTX
36 646.666 FmM 0.441 0 213.545(some unanswered questions. For example, how can \336)FmTX
252.634 646.666 FmM 0.441 0 23.044(les be)FmTX
36 657.666 FmM 0.652 0 234.9(shared between client workstations if each client is writing)FmTX
36 668.666 FmM 1.902 0 222.998(its own log? Zebra solves this problem by introducing a)FmTX
36 679.666 FmM 0.497 0 29.7(central )FmTX
0 8 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
66.197 679.666 FmM 0.497 0 5(\336)FmTX
71.197 679.666 FmM 0.497 0 45.264(le manager)FmTX
0 11 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
116.56 679.666 FmM 0.497 0 156.577(, separate from the storage servers, that)FmTX
36 690.666 FmM 0.167 0 174.919(manages metadata such as directories and \336)FmTX
211.923 690.666 FmM 0.167 0 63.862(le attributes and)FmTX
36 701.666 FmM 1.736 0 160.21(supervises interactions between clients. )FmTX
202.606 701.666 FmM 1.736 0 68.306(Also, how is free)FmTX
0 0 gm
0 gr
0 0 lin
(36 46 276.12 712)FmKp
(36 46 275.76 271)FmKp
(nc 46 36 271 276 6 rc)kp
0 0 lin
60 sg
0 0 lin
109.06 143.663 123.46 172.195 FmqF
0 gr
0 0 lin
60 gr
0 0 lin
152.26 143.663 166.66 172.195 FmqF
0 gr
0 0 lin
60 gr
0 0 lin
65.86 143.93 80.26 172.462 FmqF
0 gr
0 0 lin
0 0 lin
0.5 152.26 158.063 166.66 172.463 FmqP
0 0 lin
0 0 gm
F 1 setTxMode
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
157.21 169.355 FmM 0 0 4.5(6)FmTX
0 0 gm
0 gr
0 0 lin
0.5 152.26 143.663 166.66 158.063 FmqP
0 0 lin
157.21 154.955 FmM 0 0 4.5(3)FmTX
0 0 lin
0.5 109.06 158.063 123.46 172.463 FmqP
0 0 lin
114.01 169.355 FmM 0 0 4.5(5)FmTX
0 0 lin
0.5 109.06 143.663 123.46 158.063 FmqP
0 0 lin
114.01 154.955 FmM 0 0 4.5(2)FmTX
0 0 lin
0.5 65.86 158.063 80.26 172.463 FmqP
0 0 lin
70.81 169.355 FmM 0 0 4.5(4)FmTX
0 0 lin
0.5 65.86 143.663 80.26 158.063 FmqP
0 0 lin
70.81 154.955 FmM 0 0 4.5(1)FmTX
60 gr
0 0 lin
76.66 100.463 199.06 114.863 FmqF
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
( )show
171.61 111.755 FmM 0 0 4.5(6)FmTX
142.81 111.755 FmM 0 0 4.5(4)FmTX
118.769 196.138 FmM 0 0 43.231(File Servers)FmTX
231.46 154.273 FmM 0 0 6.75(1 )FmTX
0 2 gm
bu fc
2 F /|______Symbol fnt
bn
( )show
238.21 154.273 FmM 0 0 6.91(\304)FmTX
0 5 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
245.12 154.273 FmM 0 0 9( 2 )FmTX
0 7 gm
bu fc
2 F /|______Symbol fnt
bn
( )show
254.12 154.273 FmM 0 0 6.91(\304)FmTX
0 9 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
261.031 154.273 FmM 0 0 6.75( 3)FmTX
231.46 168.483 FmM 0 0 6.75(4 )FmTX
0 11 gm
bu fc
2 F /|______Symbol fnt
bn
( )show
238.21 168.483 FmM 0 0 6.91(\304)FmTX
0 14 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
245.12 168.483 FmM 0 0 9( 5 )FmTX
0 16 gm
bu fc
2 F /|______Symbol fnt
bn
( )show
254.12 168.483 FmM 0 0 6.91(\304)FmTX
0 18 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
261.031 168.483 FmM 0 0 6.75( 6)FmTX
0 0 gm
60 gr
0 0 lin
209.86 165.073 FmM
224.26 165.073 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
217.55 167.278 FmM
209.86 165.073 FmL
217.55 162.868 FmL
216.747 165.073 FmL
true FmFl
216.747 165.073 FmM
224.26 165.073 FmL
false 2 0.5 FmSt
60 gr
0 0 lin
209.86 150.863 FmM
224.26 150.863 FmL
false FmFl
0 gr
0 0 lin
0 0 lin
217.55 153.068 FmM
209.86 150.863 FmL
217.55 148.658 FmL
216.747 150.863 FmL
true FmFl
216.747 150.863 FmM
224.26 150.863 FmL
false 2 0.5 FmSt
0 0 lin
0.5 94.66 100.463 109.06 114.863 FmqP
0 0 lin
0 0 gm
F 1 setTxMode
( )show
99.61 111.755 FmM 0 0 4.5(1)FmTX
0 0 gm
0 gr
0 0 lin
0.5 109.06 100.463 123.46 114.863 FmqP
0 0 lin
114.01 111.755 FmM 0 0 4.5(2)FmTX
0 0 lin
0.5 123.46 100.463 137.86 114.863 FmqP
0 0 lin
128.41 111.755 FmM 0 0 4.5(3)FmTX
0 0 lin
0.5 137.86 100.463 152.26 114.863 FmqP
0 0 lin
0 0 lin
0.5 166.66 100.463 181.06 114.863 FmqP
0 0 lin
0 0 lin
0.5 152.26 100.463 166.66 114.863 FmqP
0 0 lin
157.21 111.755 FmM 0 0 4.5(5)FmTX
0 0 lin
141.46 82.463 FmM
141.46 89.663 FmL
false 2 0.5 FmSt
0 0 lin
148.66 82.463 FmM
148.66 89.663 FmL
false 2 0.5 FmSt
0 0 lin
159.46 82.463 FmM
159.46 89.663 FmL
false 2 0.5 FmSt
0 0 lin
87.46 86.063 FmM
184.66 86.063 FmL
false 2 0.5 FmSt
0 0 gm
F 1 setTxMode
( )show
45.253 61.138 FmM 0 0 22.252(File B)FmTX
45.253 75.538 FmM 0 0 16.249(File )FmTX
61.007 75.538 FmM 0 0 6.497(A)FmTX
204.84 61.355 FmM 0 0 22.252(File C)FmTX
204.923 75.755 FmM 0 0 22.746(File D)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
116.665 78.373 FmM
114.46 86.063 FmL
112.255 78.373 FmL
114.46 79.175 FmL
true FmFl
114.46 71.663 FmM
114.46 79.175 FmL
false 2 0.5 FmSt
0 0 lin
0 0 lin
174.265 78.373 FmM
172.06 86.063 FmL
169.855 78.373 FmL
172.06 79.175 FmL
true FmFl
172.06 71.663 FmM
172.06 79.175 FmL
false 2 0.5 FmSt
0 0 lin
0 0 lin
156.265 78.373 FmM
154.06 86.063 FmL
151.855 78.373 FmL
154.06 79.175 FmL
true FmFl
154.06 57.263 FmM
154.06 79.175 FmL
false 2 0.5 FmSt
0 0 lin
172.06 71.663 FmM
199.06 71.663 FmL
false 2 0.5 FmSt
0 0 lin
154.06 57.263 FmM
199.06 57.263 FmL
false 2 0.5 FmSt
0 0 lin
0 0 lin
147.265 78.373 FmM
145.06 86.063 FmL
142.855 78.373 FmL
145.06 79.175 FmL
true FmFl
145.06 57.263 FmM
145.06 79.175 FmL
false 2 0.5 FmSt
0 0 lin
114.46 71.663 FmM
73.06 71.663 FmL
false 2 0.5 FmSt
0 0 lin
145.06 57.263 FmM
73.06 57.263 FmL
false 2 0.5 FmSt
0 0 lin
0 0 lin
200.487 109.651 FmM
192.797 107.445 FmL
200.487 105.24 FmL
199.685 107.445 FmL
true FmFl
219.253 107.445 FmM
199.685 107.445 FmL
false 2 0.5 FmSt
0 0 gm
F 1 setTxMode
( )show
225.253 111.538 FmM 0 0 24.994(Client\325)FmTX
249.752 111.538 FmM 0 0 20.248(s Log)FmTX
0 0 gm
64 gr
0 0 lin
36 208 275.76 262 FmqF
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 214 FmM 2.51 0 21.496(Figur)FmTX
75.335 214 FmM 2.51 0 10.745(e 4)FmTX
0 2 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
88.59 214 FmM 2.51 0 4.5(. )FmTX
0 4 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
95.6 214 FmM 2.51 0 13.487(Per)FmTX
108.755 214 FmM 2.51 0 91.729(-client striping in Zebra)FmTX
0 7 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
208.013 214 FmM 2.51 0 44.728(. Each client)FmTX
54 223 FmM 0.132 0 56.237(forms its new \336)FmTX
110.632 223 FmM 0.132 0 146.206(le data into a single append-only log and)FmTX
54 232 FmM 0.358 0 185.436(stripes this log across the servers. In this example \336)FmTX
242.654 232 FmM 0.358 0 8.745(le )FmTX
251.262 232 FmM 0.358 0 6.497(A)FmTX
54 241 FmM 0.434 0 104.95(spans several servers while \336)FmTX
160.686 241 FmM 0.434 0 94.469(le B is stored entirely on a)FmTX
54 250 FmM 2.008 0 45.725(single server)FmTX
101.238 250 FmM 2.008 0 140.46(. Parity is computed for the log, not for)FmTX
54 259 FmM 0 0 43.75(individual \336)FmTX
97.75 259 FmM 0 0 12.245(les.)FmTX
0 0 gm
0 gr
0 0 lin
F 32<0F87C3E1F0783C1E>pat
0 0 lin
195.46 143.663 209.86 158.063 FmqF
0 gr
0 0 lin
0.5 195.46 143.663 209.86 158.063 FmqP
0 0 lin
32 gr
0 0 lin
195.46 158.063 209.86 172.463 FmqF
0 gr
0 0 lin
0.5 195.46 158.063 209.86 172.463 FmqP
0 0 lin
0 0 lin
1 109.06 129.263 123.46 186.863 FmqP
0 0 lin
0 0 lin
1 195.46 129.263 209.86 186.863 FmqP
0 0 lin
0 0 lin
1 152.26 129.263 166.66 186.863 FmqP
0 0 lin
0 0 lin
1 65.86 129.263 80.26 186.863 FmqP
0 0 lin
0 0 lin
76.66 100.463 FmM
199.06 100.463 FmL
false 2 1 FmSt
0 0 lin
76.66 114.863 FmM
199.06 114.863 FmL
false 2 1 FmSt
0 0 lin
87.46 82.463 FmM
87.46 89.663 FmL
false 2 0.5 FmSt
0 0 lin
184.66 82.463 FmM
184.66 89.663 FmL
false 2 0.5 FmSt
(36 46 276.12 712)FmKp
(nc 46 36 712 277 6 rc)kp
0 0 lin
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 gm
F 1 setTxMode
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
299.88 241.667 FmM 1.208 0 230.454(space reclaimed from the logs? Zebra solves this problem)FmTX
299.88 252.667 FmM 0.257 0 27.214(with a )FmTX
0 3 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
327.608 252.667 FmM 0.257 0 55.256(stripe cleaner)FmTX
0 6 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
382.724 252.667 FmM 0.257 0 155.22(, which is analogous to the cleaner in a)FmTX
299.88 263.667 FmM 0.083 0 64.143(log-structured \336)FmTX
364.106 263.667 FmM 0.083 0 42.49(le system. )FmTX
406.583 263.667 FmM 0.083 0 133.003(The next section provides a more)FmTX
299.88 274.667 FmM 0 0 213.252(detailed discussion of these issues and several others.)FmTX
0 8 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 303.333 FmM 0 0 7(3)FmTX
321.48 303.333 FmM 0 0 115.479(Zebra Components)FmTX
0 12 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 324.667 FmM 0.988 0 49.419(The Zebra \336)FmTX
369.275 324.667 FmM 0.988 0 165.786(le system contains four main components)FmTX
299.88 335.667 FmM 0.881 0 49.714(as shown in )FmTX
352.237 335.667 FmM 0.881 0 33.604(Figure 5)FmTX
386.721 335.667 FmM 0.881 0 5.278(: )FmTX
0 14 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
392.881 335.667 FmM 0.881 0 26.101(clients)FmTX
0 17 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
418.982 335.667 FmM 0.881 0 116.614(, which are the machines that)FmTX
299.88 346.667 FmM 0.902 0 105.796(run application programs; )FmTX
0 19 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
408.381 346.667 FmM 0.902 0 44.712(storage ser)FmTX
453.994 346.667 FmM 0.902 0 16.655(vers)FmTX
0 22 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
470.649 346.667 FmM 0.902 0 59.429(, which store \336)FmTX
532.783 346.667 FmM 0.902 0 7.217(le)FmTX
299.88 357.667 FmM 0.994 0 28.872(data; a )FmTX
0 25 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
330.739 357.667 FmM 0.994 0 5(\336)FmTX
335.739 357.667 FmM 0.994 0 45.264(le manager)FmTX
0 27 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
381.599 357.667 FmM 0.994 0 89.695(, which manages the \336)FmTX
475.268 357.667 FmM 0.994 0 62.744(le and directory)FmTX
299.88 368.667 FmM 2.289 0 68.582(structure of the \336)FmTX
375.328 368.667 FmM 2.289 0 66.646(le system; and a )FmTX
0 30 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
451.128 368.667 FmM 2.289 0 55.256(stripe cleaner)FmTX
0 33 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
508.275 368.667 FmM 2.289 0 29.436(, which)FmTX
299.88 379.666 FmM 0.17 0 183.799(reclaims unused space on the storage servers. )FmTX
484.691 379.666 FmM 0.17 0 54.968(There may be)FmTX
299.88 390.666 FmM 0.521 0 234.912(any number of clients and storage servers but only a single)FmTX
299.88 401.666 FmM 2.309 0 5.559(\336)FmTX
305.439 401.666 FmM 2.309 0 117.148(le manager and stripe cleaner)FmTX
431.273 401.666 FmM 2.309 0 97.183(. More than one of these)FmTX
299.88 412.666 FmM 3.719 0 214.084(components may share a single physical machine; for)FmTX
299.88 423.666 FmM 0.271 0 237.141(example, it is possible for one machine to be both a storage)FmTX
299.88 434.666 FmM 0.602 0 78.01(server and a client. )FmTX
380.12 434.666 FmM 0.602 0 156.87(The remainder of this section describes)FmTX
299.88 445.666 FmM 0.915 0 147.18(each of the components in isolation; )FmTX
452.548 445.666 FmM 0.915 0 37.493(Section 4)FmTX
490.956 445.666 FmM 0.915 0 47.214( then shows)FmTX
299.88 456.666 FmM -0.092 0 240.764(how the components work together to implement operations)FmTX
299.88 467.666 FmM 2.324 0 118.018(such as reading and writing \336)FmTX
429.516 467.666 FmM 2.324 0 69.426(les, and Sections )FmTX
505.914 467.666 FmM 2.324 0 5(5)FmTX
510.914 467.666 FmM 2.324 0 19.438( and )FmTX
535 467.666 FmM 2.324 0 5(6)FmTX
299.88 478.666 FmM 0 0 156.584(describe how Zebra deals with crashes.)FmTX
317.88 491.666 FmM 0.169 0 9.438(W)FmTX
326.52 491.666 FmM 0.169 0 212.129(e will describe Zebra under the assumption that there)FmTX
299.88 502.666 FmM 4.543 0 203.779(are several storage servers, each with a single disk.)FmTX
299.88 513.666 FmM 1.365 0 36.643(However)FmTX
336.125 513.666 FmM 1.365 0 191.592(, this need not be the case. For example, storage)FmTX
299.88 524.666 FmM 3.015 0 216.003(servers could each contain several disks managed as a)FmTX
299.88 535.666 FmM 0.827 0 232.681(RAID, thereby giving the appearance to clients of a single)FmTX
299.88 546.666 FmM 0.205 0 238.274(disk with higher capacity and throughput. It is also possible)FmTX
299.88 557.666 FmM 0.34 0 236.035(to put all of the disks on a single server; clients would treat)FmTX
299.88 568.666 FmM 1.382 0 227.681(it as several logical servers, all implemented by the same)FmTX
299.88 579.666 FmM 0.846 0 74.695(physical machine. )FmTX
376.089 579.666 FmM 0.846 0 159.68(This approach would still provide many)FmTX
299.88 590.666 FmM 0.855 0 37.468(of Zebra\325)FmTX
337.653 590.666 FmM 0.855 0 30.825(s bene\336)FmTX
369.333 590.666 FmM 0.855 0 139.424(ts: clients would still batch small \336)FmTX
513.884 590.666 FmM 0.855 0 25.261(les for)FmTX
299.88 601.666 FmM 0.936 0 230.759(transfer over the network, and it would still be possible to)FmTX
299.88 612.666 FmM 2.581 0 180.72(reconstruct data after a disk failure. However)FmTX
495.688 612.666 FmM 2.581 0 39.15(, a single-)FmTX
299.88 623.666 FmM 0.786 0 233.828(server Zebra system would limit system throughput to that)FmTX
299.88 634.666 FmM 2.276 0 66.904(of the one server)FmTX
373.215 634.666 FmM 2.276 0 148.577(, and the system would not be able to)FmTX
299.88 645.666 FmM 0 0 155.474(operate when the server is unavailable.)FmTX
0 35 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 669.333 FmM 0 0 17.5(3.1)FmTX
328.68 669.333 FmM 0 0 41.986(Clients)FmTX
0 39 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 690.666 FmM 4.942 0 197.412(Clients are machines where application programs)FmTX
299.88 701.666 FmM 1.649 0 35.532(execute. )FmTX
336.883 701.666 FmM 1.649 0 121.335(When an application reads a \336)FmTX
466.462 701.666 FmM 1.649 0 68.591(le the client must)FmTX
0 0 gm
0 gr
0 0 lin
(299.88 46 540 712)FmKp
(300.06 46 539.82 235)FmKp
(nc 46 300 235 540 6 rc)kp
0 0 lin
64 gr
0 0 lin
297.06 181 536.82 228.472 FmqF
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
9 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
315.06 187 FmM 1.705 0 21.496(Figur)FmTX
336.395 187 FmM 1.705 0 10.745(e 5)FmTX
348.845 187 FmM 1.705 0 68.968(: Zebra schematic)FmTX
0 2 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
421.223 187 FmM 1.705 0 92.481(. Clients run applications;)FmTX
315.06 196 FmM 2.408 0 95.194(storage servers store data. )FmTX
419.727 196 FmM 2.408 0 21.245(The \336)FmTX
443.381 196 FmM 2.408 0 68.214(le manager and the)FmTX
315.06 205 FmM 1.704 0 188.42(stripe cleaner can run on any machine in the system,)FmTX
315.06 214 FmM 1.18 0 191.958(although it is likely that one machine will run both of)FmTX
315.06 223 FmM 0 0 22.496(them. )FmTX
337.061 223 FmM 0 0 6.497(A)FmTX
343.064 223 FmM 0 0 128.435( storage server may also be a client.)FmTX
0 0 gm
0 gr
0 0 lin
60 sg
0 0 lin
0 360 72 22.5 true 419.31 113.5 FmAF
0 gr
0 0 lin
true 0 360 72 22.5 419.31 113.5 2 1 FmAP
0 0 gm
F 1 setTxMode
( )show
401.31 116.047 FmM 0 0 31.485(Network)FmTX
340.81 80.569 FmM 0 0 21.999(Client)FmTX
439.81 61.843 FmM 0 0 13.999(File)FmTX
430.82 70.843 FmM 0 0 31.979(Manager)FmTX
0 0 gm
0 gr
0 0 lin
1 426.965 54.328 466.654 74.172 9.922 FmQP
0 0 lin
0 0 gm
F 1 setTxMode
( )show
487.718 78.67 FmM 0 0 21.494(Stripe)FmTX
484.474 87.67 FmM 0 0 27.982(Cleaner)FmTX
0 0 gm
0 gr
0 0 lin
1 478.621 71.155 518.31 91 9.922 FmQP
0 0 lin
0 0 lin
true 0 360 13.5 13.5 351.81 77.5 2 1 FmAP
0 0 gm
F 1 setTxMode
( )show
376.81 71.569 FmM 0 0 21.999(Client)FmTX
0 0 gm
0 gr
0 0 lin
true 0 360 13.5 13.5 387.81 68.5 2 1 FmAP
0 0 gm
F 1 setTxMode
( )show
329.066 142.593 FmM 0 0 27.488(Storage)FmTX
331.069 151.593 FmM 0 0 23.482(Server)FmTX
0 0 gm
0 gr
0 0 lin
355.75 90 FmM
364.25 99 FmL
false 2 1 FmSt
0 0 lin
389.25 81.5 FmM
392.25 91.5 FmL
false 2 1 FmSt
0 0 lin
447.25 74 FmM
436.75 91 FmL
false 2 1 FmSt
0 0 lin
497.75 91 FmM
481.25 102 FmL
false 2 1 FmSt
0 0 lin
511.25 135.1 FmM
482.25 124 FmL
false 2 1 FmSt
0 0 lin
456.75 152.2 FmM
445.25 134 FmL
false 2 1 FmSt
0 0 lin
392.75 152.2 FmM
395.25 134.5 FmL
false 2 1 FmSt
0 0 lin
327.96 135.1 FmM
357.66 135.1 FmL
367.56 154.9 FmL
318.06 154.9 FmL
true 2 1 FmSt
0 0 gm
F 1 setTxMode
( )show
380.816 159.693 FmM 0 0 27.488(Storage)FmTX
382.819 168.693 FmM 0 0 23.482(Server)FmTX
0 0 gm
0 gr
0 0 lin
379.71 152.2 FmM
409.41 152.2 FmL
419.31 172 FmL
369.81 172 FmL
true 2 1 FmSt
0 0 gm
F 1 setTxMode
( )show
443.816 159.693 FmM 0 0 27.488(Storage)FmTX
445.819 168.693 FmM 0 0 23.482(Server)FmTX
0 0 gm
0 gr
0 0 lin
442.71 152.2 FmM
472.41 152.2 FmL
482.31 172 FmL
432.81 172 FmL
true 2 1 FmSt
0 0 gm
F 1 setTxMode
( )show
497.816 142.593 FmM 0 0 27.488(Storage)FmTX
499.819 151.593 FmM 0 0 23.482(Server)FmTX
0 0 gm
0 gr
0 0 lin
496.71 135.1 FmM
526.41 135.1 FmL
536.31 154.9 FmL
486.81 154.9 FmL
true 2 1 FmSt
0 0 lin
341.25 135.1 FmM
357.095 124.824 FmL
false 2 1 FmSt
(299.88 46 540 712)FmKp
(nc 46 299 712 540 6 rc)kp
0 0 lin
F T cp
%%Page: ? 5
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 52.667 FmM 2.334 0 223.782(determine which stripe fragments store the desired data,)FmTX
36 63.667 FmM -0.17 0 241.816(retrieve the data from the storage servers, and return them to)FmTX
36 74.667 FmM 2.162 0 64.146(the application. )FmTX
103.92 74.667 FmM 2.162 0 88.303(As will be seen below)FmTX
200.22 74.667 FmM 2.162 0 25.276(, the \336)FmTX
229.82 74.667 FmM 2.162 0 44.138(le manager)FmTX
36 85.667 FmM 1.023 0 91.06(keeps track of where \336)FmTX
131.152 85.667 FmM 1.023 0 138.828(le data are stored and provides this)FmTX
36 96.667 FmM 1.642 0 146.06(information to clients when needed. )FmTX
190.092 96.667 FmM 1.642 0 82.744(When an application)FmTX
36 107.667 FmM 1.312 0 39.429(writes a \336)FmTX
78.053 107.667 FmM 1.312 0 184.944(le the client appends the new data to its log by)FmTX
36 118.667 FmM 0.824 0 232.7(creating new stripes to hold the data, computing the parity)FmTX
36 129.667 FmM 0 0 235.461(of the stripes, and writing the stripes to the storage servers.)FmTX
54 142.667 FmM 1.092 0 31.66(Clients\325)FmTX
84.92 142.667 FmM 1.092 0 86.938( logs do not contain \336)FmTX
177.318 142.667 FmM 1.092 0 96.619(le attributes, directories,)FmTX
36 153.667 FmM 1.009 0 74.961(or other metadata. )FmTX
113.811 153.667 FmM 1.009 0 158.271(This information is managed separately)FmTX
36 164.667 FmM 0 0 32.776(by the \336)FmTX
68.776 164.667 FmM 0 0 122.712(le manager as described below)FmTX
190.839 164.667 FmM 0 0 2.5(.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 188.333 FmM 0 0 17.5(3.2)FmTX
64.8 188.333 FmM 0 0 94.452(Storage Servers)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 209.666 FmM -0.102 0 202.666(The storage servers are the simplest part of Zebra. )FmTX
255.573 209.666 FmM -0.102 0 20.547(They)FmTX
36 220.666 FmM 0.219 0 164.641(are just repositories for stripe fragments. )FmTX
201.404 220.666 FmM 0.219 0 73.84(As far as a storage)FmTX
36 231.666 FmM 1.626 0 179.06(server is concerned, a stripe fragment is a lar)FmTX
227.886 231.666 FmM 1.626 0 44.983(ge block of)FmTX
36 242.666 FmM 0.598 0 108.87(bytes with a unique identi\336)FmTX
147.262 242.666 FmM 0.598 0 7.766(er)FmTX
154.479 242.666 FmM 0.598 0 5(. )FmTX
159.899 242.666 FmM 0.598 0 46.379(The identi\336)FmTX
206.877 242.666 FmM 0.598 0 67.449(er for a fragment)FmTX
36 253.666 FmM 4.004 0 85.261(consists of an identi\336)FmTX
133.272 253.666 FmM 4.004 0 118.826(er for the client that wrote the)FmTX
36 264.666 FmM 3.76 0 166.042(fragment, a sequence number that identi\336)FmTX
220.843 264.666 FmM 3.76 0 47.756(es the stripe)FmTX
36 275.666 FmM 0.01 0 225.767(uniquely among all those written by the client, and an of)FmTX
261.686 275.666 FmM 0.01 0 14.434(fset)FmTX
36 286.666 FmM -0.005 0 134.673(for the fragment within its stripe. )FmTX
170.091 286.666 FmM -0.005 0 106.05(All fragments in Zebra are)FmTX
36 297.666 FmM 2.387 0 167.158(the same size, which should be chosen lar)FmTX
219.69 297.666 FmM 2.387 0 51.655(ge enough to)FmTX
36 308.666 FmM 2.655 0 140.208(make network and disk transfers ef)FmTX
189.305 308.666 FmM 2.655 0 5.559(\336)FmTX
194.864 308.666 FmM 2.655 0 73.291(cient. In the Zebra)FmTX
36 319.666 FmM 0 0 161.05(prototype we use 512-Kbyte fragments. )FmTX
54 332.666 FmM 0 0 102.456(Storage servers provide \336)FmTX
156.456 332.666 FmM 0 0 56.367(ve operations:)FmTX
0 10 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 345.666 FmM 1.56 0 18.325(Stor)FmTX
72.147 345.666 FmM 1.56 0 53.857(e a fragment)FmTX
0 13 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
129.124 345.666 FmM 1.56 0 2.5(.)FmTX
0 15 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
131.624 345.666 FmM 1.56 0 2.5( )FmTX
135.506 345.666 FmM 1.56 0 134.375(This operation allocates space for)FmTX
54 356.666 FmM 0.971 0 214.348(the fragment, writes the fragment to disk, and records)FmTX
54 367.666 FmM 0.213 0 81.638(the fragment identi\336)FmTX
136.065 367.666 FmM 0.213 0 138.562(er and disk location for use in sub-)FmTX
54 378.666 FmM 0.102 0 71.904(sequent accesses. )FmTX
125.929 378.666 FmM 0.102 0 149.683(The operation is synchronous: it does)FmTX
54 389.666 FmM 0.942 0 198.276(not complete until the fragment is safely on disk. )FmTX
260.573 389.666 FmM 0.942 0 15.547(The)FmTX
54 400.666 FmM 2.002 0 204.099(fragment must not already exist unless it is a parity)FmTX
54 411.666 FmM 0.741 0 215.454(fragment, in which case the new copy of the fragment)FmTX
54 422.666 FmM 0.697 0 67.744(replaces the old. )FmTX
123.658 422.666 FmM 0.697 0 148.279(This is done in a non-overwrite man-)FmTX
54 433.666 FmM 0 0 184.922(ner to avoid corruption in the event of a crash.)FmTX
0 18 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 446.666 FmM 2.16 0 134.971(Append to an existing fragment)FmTX
0 21 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
197.612 446.666 FmM 2.16 0 2.5(.)FmTX
0 23 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
200.112 446.666 FmM 2.16 0 2.5( )FmTX
204.595 446.666 FmM 2.16 0 67.205(This operation is)FmTX
54 457.666 FmM 0.276 0 219.358(similar to storing a fragment except that it allows a cli-)FmTX
54 468.666 FmM 0.747 0 189.922(ent to write out a fragment in pieces if it doesn\325)FmTX
251.217 468.666 FmM 0.747 0 24.155(t have)FmTX
54 479.666 FmM 0.332 0 66.931(enough data to \336)FmTX
121.927 479.666 FmM 0.332 0 151.868(ll the entire fragment at once \(this can)FmTX
54 490.666 FmM 3.131 0 200.2(happen, for example, if an application invokes the)FmTX
0 26 gm
bu fc

%%BeginFont: Courier
%%IncludeFont: Courier
bn
%%EndFont
bu fc
{}mark T /Courier /|______Courier 0 rf
bn
bu fc
2 F /|______Courier fnt
bn
( )show
54 501.666 FmM 1.482 0 30(fsync)FmTX
0 32 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
84 501.666 FmM 0.741 0 138( system call to force data to disk\). )FmTX
227.379 501.666 FmM 0.741 0 48(Appends are)FmTX
54 512.666 FmM 3.606 0 196.875(implemented atomically so that a crash during an)FmTX
54 523.666 FmM 0.555 0 217.676(append cannot cause the previous contents of the frag-)FmTX
54 534.666 FmM 0 0 61.658(ment to be lost.)FmTX
0 35 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 547.666 FmM 0.267 0 85.498(Retrieve a fragment)FmTX
0 38 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
140.032 547.666 FmM 0.267 0 2.5(.)FmTX
0 40 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
142.532 547.666 FmM 0.267 0 2.5( )FmTX
145.12 547.666 FmM 0.267 0 129.666(This operation returns part or all)FmTX
54 558.666 FmM 0.506 0 216.555(of the data from a fragment. It is not necessary to read)FmTX
54 569.666 FmM 1.789 0 155.205(the entire fragment; a fragment identi\336)FmTX
218.152 569.666 FmM 1.789 0 7.766(er)FmTX
225.52 569.666 FmM 1.789 0 13.328(, of)FmTX
240.459 569.666 FmM 1.789 0 33.872(fset, and)FmTX
54 580.666 FmM 0 0 164.094(length specify the desired range of bytes.)FmTX
0 43 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 593.666 FmM 1.513 0 76.06(Delete a fragment)FmTX
0 46 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
133.085 593.666 FmM 1.513 0 5(. )FmTX
0 48 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
139.419 593.666 FmM 1.513 0 129.138(This operation is invoked by the)FmTX
54 604.666 FmM 2.103 0 207.402(stripe cleaner when the fragment no longer contains)FmTX
54 615.666 FmM 2.325 0 156.311(any useful data. It makes the fragment\325)FmTX
223.709 615.666 FmM 2.325 0 47.761(s disk space)FmTX
54 626.666 FmM 0 0 114.38(available for new fragments.)FmTX
0 51 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 639.666 FmM 1.032 0 79.688(Identify fragments)FmTX
0 54 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
134.72 639.666 FmM 1.032 0 5(. )FmTX
140.574 639.666 FmM 1.032 0 132.449(This operation provides informa-)FmTX
54 650.666 FmM 1.091 0 178.54(tion about the fragments stored by the server)FmTX
239.782 650.666 FmM 1.091 0 34.155(, such as)FmTX
54 661.666 FmM 0.638 0 215.745(the most recent fragment written by a client. It is used)FmTX
54 672.666 FmM 0 0 15.837(to \336)FmTX
69.837 672.666 FmM 0 0 103.018(nd the ends of the clients\325)FmTX
172.115 672.666 FmM 0 0 73.01( logs after a crash.)FmTX
54 685.666 FmM 0.449 0 187.693(Stripes are immutable once they are complete. )FmTX
244.289 685.666 FmM 0.449 0 7.219(A)FmTX
250.959 685.666 FmM 0.449 0 24.712( stripe)FmTX
36 696.666 FmM 1.013 0 231.006(may be created with a sequence of append operations, but)FmTX
36 707.666 FmM 2.138 0 225.156(non-parity fragments are never overwritten and once the)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 52.667 FmM 0.965 0 141.074(stripe is complete it is never modi\336)FmTX
446.742 52.667 FmM 0.965 0 89.399(ed except to delete the)FmTX
299.88 63.667 FmM -0.164 0 52.473(entire stripe. )FmTX
351.476 63.667 FmM -0.164 0 7.219(A)FmTX
358.145 63.667 FmM -0.164 0 103.835( parity fragment, however)FmTX
461.09 63.667 FmM -0.164 0 79.402(, can be overwritten)FmTX
299.88 74.667 FmM 0 0 171.843(if data are appended to a partial stripe \(see )FmTX
471.723 74.667 FmM 0 0 44.993(Section 4.2)FmTX
516.716 74.667 FmM 0 0 5.828(\).)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 98.333 FmM 0 0 17.5(3.3)FmTX
328.68 98.333 FmM 0 0 80.469(File Manager)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 119.667 FmM 0.054 0 23.606(The \336)FmTX
341.539 119.667 FmM 0.054 0 190.762(le manager stores all of the information in the \336)FmTX
532.783 119.667 FmM 0.054 0 7.217(le)FmTX
299.88 130.667 FmM 0.815 0 78.582(system except for \336)FmTX
380.906 130.667 FmM 0.815 0 31.372(le data. )FmTX
413.729 130.667 FmM 0.815 0 9.438(W)FmTX
422.369 130.667 FmM 0.815 0 113.557(e refer to this information as)FmTX
0 10 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
299.88 141.667 FmM 3.796 0 37.214(metadata)FmTX
0 13 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
337.094 141.667 FmM 3.796 0 54.717(: it includes \336)FmTX
403.198 141.667 FmM 3.796 0 121.619(le attributes such as protection)FmTX
299.88 152.667 FmM 2.77 0 176.887(information, block pointers that tell where \336)FmTX
493.384 152.667 FmM 2.77 0 41.077(le data are)FmTX
299.88 163.667 FmM 0.755 0 192.996(stored, directories, symbolic links, and special \336)FmTX
497.404 163.667 FmM 0.755 0 41.086(les for I/O)FmTX
299.88 174.667 FmM 4.667 0 34.983(devices. )FmTX
339.352 174.667 FmM 4.667 0 23.606(The \336)FmTX
367.625 174.667 FmM 4.667 0 144.373(le manager performs all of the usual)FmTX
299.88 185.666 FmM 0.978 0 63.037(functions of a \336)FmTX
365.851 185.666 FmM 0.978 0 94.678(le server in a network \336)FmTX
465.42 185.666 FmM 0.978 0 71.646(le system, such as)FmTX
299.88 196.666 FmM 0.787 0 226.606(name lookup and maintaining the consistency of client \336)FmTX
532.783 196.666 FmM 0.787 0 7.217(le)FmTX
299.88 207.666 FmM 0.797 0 68.286(caches. However)FmTX
368.565 207.666 FmM 0.797 0 51.089(, the Zebra \336)FmTX
422.046 207.666 FmM 0.797 0 73.293(le manager doesn\325)FmTX
496.755 207.666 FmM 0.797 0 41.65(t store any)FmTX
299.88 218.666 FmM 1.416 0 5.559(\336)FmTX
305.439 218.666 FmM 1.416 0 114.668(le data; where a traditional \336)FmTX
427.187 218.666 FmM 1.416 0 108.564(le server would manipulate)FmTX
299.88 229.666 FmM 0.201 0 65.244(data the Zebra \336)FmTX
365.726 229.666 FmM 0.201 0 173.271(le manager manipulates block pointers. For)FmTX
299.88 240.666 FmM 2.667 0 211.57(example, consider a read operation. In a traditional \336)FmTX
532.783 240.666 FmM 2.667 0 7.217(le)FmTX
299.88 251.666 FmM 1.188 0 181.045(system the client requests the data from the \336)FmTX
490.429 251.666 FmM 1.188 0 47.195(le server; in)FmTX
299.88 262.666 FmM 3.845 0 202.141(Zebra the client requests block pointers from the \336)FmTX
532.783 262.666 FmM 3.845 0 7.217(le)FmTX
299.88 273.666 FmM 0 0 34.421(manager)FmTX
333.903 273.666 FmM 0 0 189.072(, then it reads the data from the storage servers.)FmTX
317.88 286.666 FmM 4.797 0 181.321(In the Zebra prototype we implemented the \336)FmTX
532.783 286.666 FmM 4.797 0 7.217(le)FmTX
299.88 297.666 FmM 0.549 0 99.968(manager using a Sprite \336)FmTX
402.043 297.666 FmM 0.549 0 127.996(le server with a log-structured \336)FmTX
532.783 297.666 FmM 0.549 0 7.217(le)FmTX
299.88 308.666 FmM 2.493 0 101.348(system. For each Zebra \336)FmTX
411.198 308.666 FmM 2.493 0 63.865(le there is one \336)FmTX
485.034 308.666 FmM 2.493 0 40.271(le in the \336)FmTX
532.783 308.666 FmM 2.493 0 7.217(le)FmTX
299.88 319.666 FmM -0.114 0 34.421(manager)FmTX
334.67 319.666 FmM -0.114 0 3.328(\325)FmTX
337.448 319.666 FmM -0.114 0 11.948(s \336)FmTX
349.283 319.666 FmM -0.114 0 134.961(le system, and the \322data\323 in this \336)FmTX
483.448 319.666 FmM -0.114 0 56.892(le are an array)FmTX
299.88 330.666 FmM 0.633 0 233.787(of block pointers that indicate where the blocks of data for)FmTX
299.88 341.666 FmM 0.036 0 46.089(the Zebra \336)FmTX
346.041 341.666 FmM 0.036 0 53.855(le are stored. )FmTX
399.827 341.666 FmM 0.036 0 139.956(This allows Zebra to use almost all)FmTX
299.88 352.666 FmM 4.746 0 126.912(of the existing Sprite network \336)FmTX
450.524 352.666 FmM 4.746 0 79.983(le protocols without)FmTX
299.88 363.666 FmM 0.429 0 26.116(modi\336)FmTX
325.996 363.666 FmM 0.429 0 211.003(cation. Clients open, read, and cache Zebra metadata)FmTX
299.88 374.666 FmM 1.322 0 214.617(in the same manner that they cache \322regular\323 Sprite \336)FmTX
526.394 374.666 FmM 1.322 0 13.606(les.)FmTX
299.88 385.666 FmM 2.737 0 218.223(There is nothing in the Zebra architecture that requires)FmTX
299.88 396.666 FmM 0.77 0 135.793(Sprite to be used as the network \336)FmTX
441.06 396.666 FmM 0.77 0 96.631(le system, however: any)FmTX
299.88 407.666 FmM 0.632 0 74.985(existing network \336)FmTX
376.129 407.666 FmM 0.632 0 158.818(le server could be used in the same way)FmTX
299.88 418.666 FmM 0 0 118.04(by storing block pointers in \336)FmTX
417.92 418.666 FmM 0 0 74.412(les instead of data.)FmTX
317.88 431.666 FmM 3.196 0 102.166(The performance of the \336)FmTX
432.829 431.666 FmM 3.196 0 94.387(le manager is a concern)FmTX
299.88 442.666 FmM 0.898 0 232.939(because it is a centralized resource. In our implementation)FmTX
299.88 453.666 FmM 2.399 0 102.195(clients must contact the \336)FmTX
411.672 453.666 FmM 2.399 0 116.331(le manager on each open and)FmTX
299.88 464.666 FmM 4.71 0 142.192(close, so communication with the \336)FmTX
465.624 464.666 FmM 4.71 0 60.244(le manager is a)FmTX
299.88 475.666 FmM 2.17 0 227.102(performance bottleneck when clients are accessing small)FmTX
299.88 486.666 FmM 0.09 0 5.559(\336)FmTX
305.439 486.666 FmM 0.09 0 16.106(les. )FmTX
321.457 486.666 FmM 0.09 0 9.438(W)FmTX
330.097 486.666 FmM 0.09 0 209.089(e believe that this problem can be solved by caching)FmTX
299.88 497.666 FmM 0.238 0 172.463(naming information on clients so that the \336)FmTX
474.009 497.666 FmM 0.238 0 65.515(le manager need)FmTX
299.88 508.666 FmM 2.073 0 223.533(not be contacted for most opens and closes. Client-level)FmTX
299.88 519.666 FmM 1.657 0 192.144(name caching has been used successfully in the )FmTX
504.729 519.666 FmM 1.657 0 26.396(AFS \336)FmTX
532.783 519.666 FmM 1.657 0 7.217(le)FmTX
299.88 530.666 FmM 1.579 0 124.67(system [Howard88] and Shirrif)FmTX
429.108 530.666 FmM 1.579 0 102.998(f found that a name cache)FmTX
299.88 541.666 FmM -0.132 0 151.064(occupying only 40 Kbytes of a client\325)FmTX
449.602 541.666 FmM -0.132 0 90.793(s memory can produce)FmTX
299.88 552.666 FmM 0.276 0 98.56(a hit rate of 97% [Shirrif)FmTX
399.643 552.666 FmM 0.276 0 21.655(f92]. )FmTX
421.397 552.666 FmM 0.276 0 9.438(W)FmTX
430.037 552.666 FmM 0.276 0 108.857(e decided not to implement)FmTX
299.88 563.666 FmM 0.241 0 237.954(name caching in the Zebra prototype because it would have)FmTX
299.88 574.666 FmM 1.168 0 87.749(required major modi\336)FmTX
389.965 574.666 FmM 1.168 0 87.759(cations to the Sprite \336)FmTX
482.395 574.666 FmM 1.168 0 55.269(le system, but)FmTX
299.88 585.666 FmM 3.845 0 209.363(we would expect any production version of Zebra to)FmTX
299.88 596.666 FmM 0 0 105.776(incorporate name caching.)FmTX
317.88 609.666 FmM 1.043 0 122.988(The centralized nature of the \336)FmTX
446.083 609.666 FmM 1.043 0 90.789(le manager also makes)FmTX
299.88 620.666 FmM 0 0 197.988(its reliability a concern; this issue is addressed in )FmTX
497.868 620.666 FmM 0 0 37.493(Section 6)FmTX
535.361 620.666 FmM 0 0 2.5(.)FmTX
0 15 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 644.333 FmM 0 0 17.5(3.4)FmTX
328.68 644.333 FmM 0 0 87.462(Stripe Cleaner)FmTX
0 19 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 665.666 FmM 0.983 0 211.311(When a client writes a new stripe it is initially full of)FmTX
299.88 676.666 FmM 1.503 0 226.594(live data. Over time, though, blocks in the stripe become)FmTX
299.88 687.666 FmM 1.881 0 106.318(free, either because their \336)FmTX
413.723 687.666 FmM 1.881 0 116.87(les are deleted or because the)FmTX
299.88 698.666 FmM 3.366 0 216.555(blocks are overwritten. If an application overwrites an)FmTX
0 0 gm
0 gr
0 0 lin
F T cp
%%Page: ? 6
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 52.667 FmM 2.202 0 82.205(existing block of a \336)FmTX
127.012 52.667 FmM 2.202 0 64.685(le, Zebra doesn\325)FmTX
195.923 52.667 FmM 2.202 0 73.591(t modify the stripe)FmTX
36 63.667 FmM 1.631 0 223.813(containing the block; instead it writes a new copy of the)FmTX
36 74.667 FmM 0.245 0 88.303(block to a new stripe. )FmTX
125.35 74.667 FmM 0.245 0 148.809(The only way to reuse free space in a)FmTX
36 85.667 FmM 1.08 0 44.158(stripe is to )FmTX
0 3 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
83.399 85.667 FmM 1.08 0 21.655(clean)FmTX
0 6 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
105.054 85.667 FmM 1.08 0 161.343( the stripe so that it contains no live data)FmTX
36 96.667 FmM 1.394 0 45.53(whatsoever)FmTX
81.132 96.667 FmM 1.394 0 118.279(, then delete the entire stripe. )FmTX
207.222 96.667 FmM 1.394 0 64.717(At this point the)FmTX
36 107.667 FmM 1.723 0 144.087(storage servers will reuse the stripe\325)FmTX
188.153 107.667 FmM 1.723 0 81.074(s disk space for new)FmTX
36 118.667 FmM 0 0 28.601(stripes.)FmTX
54 131.667 FmM 1.625 0 154.07(The Zebra stripe cleaner runs as a user)FmTX
219.25 131.667 FmM 1.625 0 55.244(-level process)FmTX
36 142.667 FmM -0.2 0 242.119(and is very similar to the segment cleaner in a log-structured)FmTX
36 153.667 FmM 1.151 0 5.559(\336)FmTX
41.559 153.667 FmM 1.151 0 56.655(le system. It \336)FmTX
101.667 153.667 FmM 1.151 0 40.828(rst identi\336)FmTX
143.645 153.667 FmM 1.151 0 70.249(es stripes with lar)FmTX
217.168 153.667 FmM 1.151 0 56.65(ge amounts of)FmTX
36 164.667 FmM 0.121 0 238.784(free space, then it reads the remaining live blocks out of the)FmTX
36 175.666 FmM 0.409 0 236.03(stripes and writes them to a new stripe \(by appending them)FmTX
36 186.666 FmM 2.63 0 47.764(to its client\325)FmTX
88.474 186.666 FmM 2.63 0 166.609(s log\). Once this has been done, the stripe)FmTX
36 197.666 FmM 2.614 0 101.877(cleaner deletes the stripe\325)FmTX
145.169 197.666 FmM 2.614 0 120.496(s fragments from their storage)FmTX
36 208.666 FmM 2.767 0 33.311(servers. )FmTX
72.078 208.666 FmM 2.767 0 44.993(Section 4.5)FmTX
119.838 208.666 FmM 2.767 0 142.446( describes the cleaning algorithm in)FmTX
36 219.666 FmM 0 0 47.756(more detail.)FmTX
0 9 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 248.333 FmM 0 0 7(4)FmTX
57.6 248.333 FmM 0 0 107.69(System Operation)FmTX
0 13 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 269.666 FmM 0.623 0 217.139(This section describes several of the key algorithms in)FmTX
36 280.666 FmM 0.688 0 233.245(Zebra to show how the pieces of the system work together)FmTX
36 291.666 FmM 1.935 0 222.705(in operation. Most of these algorithms are similar to the)FmTX
36 302.666 FmM 1.338 0 142.72(approaches used in log-structured \336)FmTX
184.073 302.666 FmM 1.338 0 88.032(le systems, RAIDs, or)FmTX
36 313.666 FmM 0 0 63.867(other network \336)FmTX
99.867 313.666 FmM 0 0 43.879(le systems.)FmTX
0 15 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 337.333 FmM 0 0 17.5(4.1)FmTX
64.8 337.333 FmM 0 0 158.628(Communication via Deltas)FmTX
0 19 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 358.666 FmM -0.007 0 7.219(A)FmTX
60.67 358.666 FmM -0.007 0 28.04( client\325)FmTX
88.154 358.666 FmM -0.007 0 162.468(s log contains two kinds of information: )FmTX
0 22 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
250.575 358.666 FmM -0.007 0 25.544(blocks)FmTX
0 24 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 369.666 FmM -0.144 0 16.938(and )FmTX
0 27 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
52.794 369.666 FmM -0.144 0 23.884(deltas)FmTX
0 29 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
76.679 369.666 FmM -0.144 0 5(. )FmTX
80.985 369.666 FmM -0.144 0 7.219(A)FmTX
87.655 369.666 FmM -0.144 0 165.762( block is just a piece of raw data from a \336)FmTX
251.831 369.666 FmM -0.144 0 24.434(le, i.e.)FmTX
36 380.666 FmM 2.282 0 221.868(the information that is read and written by applications.)FmTX
36 391.666 FmM 0.473 0 172.725(Deltas identify changes to the blocks in a \336)FmTX
212.512 391.666 FmM 0.473 0 62.188(le, and are used)FmTX
36 402.666 FmM 0.825 0 226.301(to communicate these changes between the clients, the \336)FmTX
268.903 402.666 FmM 0.825 0 7.217(le)FmTX
36 413.666 FmM 0.09 0 34.421(manager)FmTX
70.023 413.666 FmM 0.09 0 90.227(, and the stripe cleaner)FmTX
160.063 413.666 FmM 0.09 0 115.515(. For example, a client puts a)FmTX
36 424.666 FmM 1.658 0 138.857(delta into its log when it writes a \336)FmTX
188.122 424.666 FmM 1.658 0 74.148(le block, and the \336)FmTX
268.903 424.666 FmM 1.658 0 7.217(le)FmTX
36 435.666 FmM -0.25 0 242.117(manager subsequently reads the delta to update the metadata)FmTX
36 446.666 FmM 0 0 224.927(for that block. Deltas contain the following information:)FmTX
0 32 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 459.666 FmM 0.587 0 48.604(File identi\336)FmTX
103.19 459.666 FmM 0.587 0 8.877(er)FmTX
0 35 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
112.067 459.666 FmM 0.587 0 70.266(: a unique identi\336)FmTX
184.093 459.666 FmM 0.587 0 36.919(er for a \336)FmTX
222.772 459.666 FmM 0.587 0 52.761(le, analogous)FmTX
54 470.666 FmM 0 0 104.69(to an i-number in UNIX \336)FmTX
158.69 470.666 FmM 0 0 43.879(le systems.)FmTX
0 38 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 483.666 FmM 2.909 0 49.707(File version)FmTX
0 40 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
106.616 483.666 FmM 2.909 0 33.611(: identi\336)FmTX
143.137 483.666 FmM 2.909 0 115.527(es the point in time when the)FmTX
54 494.666 FmM 0.172 0 160.747(change described by the delta occurred. )FmTX
215.229 494.666 FmM 0.172 0 7.219(A)FmTX
221.899 494.666 FmM 0.172 0 8.059( \336)FmTX
230.13 494.666 FmM 0.172 0 10.544(le\325)FmTX
240.125 494.666 FmM 0.172 0 35.823(s version)FmTX
54 505.666 FmM 0.091 0 182.983(number increments whenever a block in the \336)FmTX
237.622 505.666 FmM 0.091 0 38.315(le is writ-)FmTX
54 516.666 FmM 0.08 0 59.417(ten or deleted. )FmTX
113.478 516.666 FmM 0.08 0 162.163(The version numbers allow deltas in dif-)FmTX
54 527.666 FmM 0 0 187.397(ferent logs to be ordered during crash recovery)FmTX
240.748 527.666 FmM 0 0 2.5(.)FmTX
0 43 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 540.666 FmM -0.006 0 60.828(Block number)FmTX
0 46 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
114.822 540.666 FmM -0.006 0 33.611(: identi\336)FmTX
148.426 540.666 FmM -0.006 0 127.729(es a particular block by its posi-)FmTX
54 551.666 FmM 0 0 66.387(tion within the \336)FmTX
120.387 551.666 FmM 0 0 9.717(le.)FmTX
0 48 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 564.666 FmM 1.62 0 75.552(Old block pointer)FmTX
0 51 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
132.792 564.666 FmM 1.62 0 110.522(: gives the fragment identi\336)FmTX
249.795 564.666 FmM 1.62 0 24.705(er and)FmTX
54 575.666 FmM 0.154 0 8.328(of)FmTX
62.149 575.666 FmM 0.154 0 68.022(fset of the block\325)FmTX
130.086 575.666 FmM 0.154 0 144.954(s old storage location. If this delta is)FmTX
54 586.666 FmM 0.125 0 220.747(for a new block then the old block pointer has a special)FmTX
54 597.666 FmM 0 0 42.212(null value.)FmTX
0 54 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 610.666 FmM 1.226 0 78.313(New block pointer)FmTX
0 57 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
134.764 610.666 FmM 1.226 0 110.522(: gives the fragment identi\336)FmTX
250.19 610.666 FmM 1.226 0 24.705(er and)FmTX
54 621.666 FmM 0.389 0 8.328(of)FmTX
62.149 621.666 FmM 0.389 0 71.35(fset for the block\325)FmTX
134.118 621.666 FmM 0.389 0 139.666(s new storage location. If this delta)FmTX
54 632.666 FmM 0.276 0 219.087(is for a block deletion then the new block pointer has a)FmTX
54 643.666 FmM 0 0 72.473(special null value.)FmTX
54 656.666 FmM 0.497 0 207.932(Deltas are created whenever blocks are added to a \336)FmTX
266.403 656.666 FmM 0.497 0 9.717(le,)FmTX
36 667.666 FmM 1.301 0 65.803(deleted from a \336)FmTX
105.706 667.666 FmM 1.301 0 74.131(le, or overwritten. )FmTX
183.191 667.666 FmM 1.301 0 87.725(All of these are called)FmTX
0 59 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
36 678.666 FmM 0.891 0 53.601(update deltas)FmTX
0 62 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
90.492 678.666 FmM 0.891 0 178.501(. Deltas are also created by the stripe cleaner)FmTX
36 689.666 FmM 1.465 0 225.466(when it copies live blocks out of stripes; these are called)FmTX
0 64 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
36 700.666 FmM 1.342 0 56.367(cleaner deltas)FmTX
0 67 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
93.709 700.666 FmM 1.342 0 29.993(. Lastly)FmTX
124.394 700.666 FmM 1.342 0 5(, )FmTX
0 70 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
130.736 700.666 FmM 1.342 0 3.889(r)FmTX
134.256 700.666 FmM 1.342 0 45.256(eject deltas)FmTX
0 72 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
180.854 700.666 FmM 1.342 0 81.34( are created by the \336)FmTX
268.903 700.666 FmM 1.342 0 7.217(le)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 52.667 FmM 1.488 0 220.999(manager to resolve races between stripe cleaning and \336)FmTX
532.783 52.667 FmM 1.488 0 7.217(le)FmTX
299.88 63.667 FmM 0.382 0 35.544(updates. )FmTX
335.257 63.667 FmM 0.382 0 201.309(All of these deltas will be described in more detail)FmTX
299.88 74.667 FmM 0 0 89.678(in the rest of the paper)FmTX
389.008 74.667 FmM 0 0 2.5(.)FmTX
317.88 87.667 FmM -0.216 0 224.067(Deltas provide a simple and reliable way for the various)FmTX
299.88 98.667 FmM 0.502 0 198.284(system components to communicate changes to \336)FmTX
501.177 98.667 FmM 0.502 0 38.32(les. Since)FmTX
299.88 109.667 FmM 0.525 0 234.341(deltas are stored in the client logs and the logs are reliable,)FmTX
299.88 120.667 FmM 0.247 0 237.407(each component can be sure that any delta it writes will not)FmTX
299.88 131.667 FmM -0.143 0 31.384(be lost. )FmTX
330.801 131.667 FmM -0.143 0 84.143(When a client modi\336)FmTX
414.516 131.667 FmM -0.143 0 65.808(es a block of a \336)FmTX
479.61 131.667 FmM -0.143 0 60.818(le it only needs)FmTX
299.88 142.667 FmM 0.665 0 232.144(to write the block and the update delta to the log to ensure)FmTX
299.88 153.667 FmM 0.198 0 58.049(that both the \336)FmTX
358.523 153.667 FmM 0.198 0 179.893(le manager and the stripe cleaner learn of the)FmTX
299.88 164.667 FmM 3.363 0 26.116(modi\336)FmTX
325.996 164.667 FmM 3.363 0 29.434(cation. )FmTX
358.243 164.667 FmM 3.363 0 75.789(After crashes the \336)FmTX
444.121 164.667 FmM 3.363 0 85.789(le manager and stripe)FmTX
299.88 175.666 FmM 1.539 0 226.267(cleaner replay deltas from the client logs to recover their)FmTX
299.88 186.666 FmM 0 0 20.823(state.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 210.333 FmM 0 0 17.5(4.2)FmTX
328.68 210.333 FmM 0 0 14(W)FmTX
342.43 210.333 FmM 0 0 64.924(riting Files)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 231.666 FmM 0.174 0 108.262(In order for Zebra to run ef)FmTX
427.009 231.666 FmM 0.174 0 5.559(\336)FmTX
432.568 231.666 FmM 0.174 0 106.909(ciently clients must collect)FmTX
299.88 242.666 FmM 0.061 0 10.544(lar)FmTX
310.246 242.666 FmM 0.061 0 83.867(ge amounts of new \336)FmTX
394.358 242.666 FmM 0.061 0 145.215(le data and write them to the storage)FmTX
299.88 253.666 FmM -0.193 0 51.633(servers in lar)FmTX
350.949 253.666 FmM -0.193 0 74.961(ge batches \(ideally)FmTX
424.875 253.666 FmM -0.193 0 66.365(, whole stripes\). )FmTX
490.483 253.666 FmM -0.193 0 49.709(The existing)FmTX
299.88 264.666 FmM 0.931 0 94.963(structure of the Sprite \336)FmTX
398.569 264.666 FmM 0.931 0 137.705(le caches made batching relatively)FmTX
299.88 275.666 FmM 0.798 0 17.766(easy)FmTX
316.997 275.666 FmM 0.798 0 5(. )FmTX
322.616 275.666 FmM 0.798 0 211.003(When an application writes new data they are placed)FmTX
299.88 286.666 FmM 1.013 0 50.535(in the client\325)FmTX
351.89 286.666 FmM 1.013 0 11.948(s \336)FmTX
364.851 286.666 FmM 1.013 0 37.471(le cache. )FmTX
404.169 286.666 FmM 1.013 0 79.119(The dirty data aren\325)FmTX
486.147 286.666 FmM 1.013 0 50.815(t written to a)FmTX
299.88 297.666 FmM -0.086 0 240.981(server until either \(a\) they reach a threshold age \(30 seconds)FmTX
299.88 308.666 FmM 3.965 0 102.173(in Sprite\), \(b\) the cache \336)FmTX
421.88 308.666 FmM 3.965 0 98.293(lls with dirty data, \(c\) an)FmTX
299.88 319.666 FmM -0.098 0 86(application issues an )FmTX
0 9 gm
bu fc
2 F /|______Courier fnt
bn
( )show
385.587 319.666 FmM -0.196 0 30(fsync)FmTX
0 15 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
415.587 319.666 FmM -0.098 0 125( system call to request that data)FmTX
299.88 330.666 FmM 0.373 0 119.963(be written to disk, or \(d\) the \336)FmTX
422.457 330.666 FmM 0.373 0 116.05(le manager requests that data)FmTX
299.88 341.666 FmM 1.83 0 225.479(be written in order to maintain consistency among client)FmTX
299.88 352.666 FmM 1.141 0 96.34(caches. In many cases \336)FmTX
400.783 352.666 FmM 1.141 0 133.513(les are created and deleted before)FmTX
299.88 363.666 FmM 0.854 0 230.72(the threshold age is reached so their data never need to be)FmTX
299.88 374.666 FmM 0 0 96.062(written at all [Baker91].)FmTX
317.88 387.666 FmM 0.737 0 215.488(When information does need to be written to disk, the)FmTX
299.88 398.666 FmM 0.3 0 237.122(client forms the new data into one or more stripe fragments)FmTX
299.88 409.666 FmM 2.678 0 184.087(and writes them to storage servers. For each \336)FmTX
505.388 409.666 FmM 2.678 0 31.934(le block)FmTX
299.88 420.666 FmM 0.85 0 230.769(written the client also puts an update delta into its log and)FmTX
299.88 431.666 FmM 0.06 0 66.643(increments the \336)FmTX
366.644 431.666 FmM 0.06 0 10.544(le\325)FmTX
376.639 431.666 FmM 0.06 0 68.867(s version number)FmTX
445.078 431.666 FmM 0.06 0 94.68(. In the Zebra prototype)FmTX
299.88 442.666 FmM 0.253 0 5.559(\336)FmTX
305.439 442.666 FmM 0.253 0 186.042(le deletion and truncation are handled by the \336)FmTX
493.506 442.666 FmM 0.253 0 44.138(le manager)FmTX
537.5 442.666 FmM 0.253 0 2.5(,)FmTX
299.88 453.666 FmM 1.556 0 227.673(so it generates deltas for these operations and increments)FmTX
299.88 464.666 FmM 2.224 0 20.276(the \336)FmTX
322.379 464.666 FmM 2.224 0 131.89(le version numbers appropriately)FmTX
460.29 464.666 FmM 2.224 0 70.815(. In a system with)FmTX
299.88 475.666 FmM 0.999 0 232.131(name caching the deltas for deletion and truncation would)FmTX
299.88 486.666 FmM 0 0 94.399(be generated by clients.)FmTX
317.88 499.666 FmM 3.764 0 6.108(T)FmTX
323.29 499.666 FmM 3.764 0 31.936(o bene\336)FmTX
358.99 499.666 FmM 3.764 0 154.666(t from the multiple storage servers it is)FmTX
299.88 510.666 FmM 2.133 0 218.787(important for a client to transfer fragments to all of the)FmTX
299.88 521.666 FmM 6.189 0 112.71(storage servers concurrently)FmTX
424.318 521.666 FmM 6.189 0 5(. )FmTX
435.328 521.666 FmM 6.189 0 9.438(W)FmTX
443.968 521.666 FmM 6.189 0 77.466(e added support for)FmTX
299.88 532.666 FmM 2.847 0 220.19(asynchronous remote procedure calls to Sprite to allow)FmTX
299.88 543.666 FmM 1.028 0 70.825(clients to do this. )FmTX
374.267 543.666 FmM 1.028 0 7.219(A)FmTX
380.937 543.666 FmM 1.028 0 151.868( client can also transfer the next stripe)FmTX
299.88 554.666 FmM 0.69 0 233.218(fragment to a storage server while the server is writing the)FmTX
299.88 565.666 FmM 0.048 0 239.639(current stripe fragment to disk, so that both the network and)FmTX
299.88 576.666 FmM 0.75 0 87.195(the disk are kept busy)FmTX
389.424 576.666 FmM 0.75 0 5(. )FmTX
394.996 576.666 FmM 0.75 0 140.505(The client computes the parity as it)FmTX
299.88 587.666 FmM 0.4 0 235.72(writes the fragments and at the end of each stripe the client)FmTX
299.88 598.666 FmM 3.604 0 207.686(writes the parity to complete the stripe. In the Zebra)FmTX
299.88 609.666 FmM 0.686 0 163.831(prototype the client also sends the stripe\325)FmTX
467.275 609.666 FmM 0.686 0 62.766(s deltas to the \336)FmTX
532.783 609.666 FmM 0.686 0 7.217(le)FmTX
299.88 620.666 FmM 0.773 0 107.432(manager and stripe cleaner)FmTX
409.082 620.666 FmM 0.773 0 5(. )FmTX
414.677 620.666 FmM 0.773 0 123.003(This improves performance by)FmTX
299.88 631.666 FmM 3.36 0 127.454(avoiding disk accesses for the \336)FmTX
444.132 631.666 FmM 3.36 0 85.789(le manager and stripe)FmTX
299.88 642.666 FmM 0.138 0 194.641(cleaner to read the deltas from the log, but it isn\325)FmTX
495.723 642.666 FmM 0.138 0 44.138(t necessary)FmTX
299.88 653.666 FmM -0.156 0 241.526(for correct operation. If the client crashes before sending the)FmTX
299.88 664.666 FmM 0.468 0 65.815(deltas then the \336)FmTX
367.099 664.666 FmM 0.468 0 169.624(le manager and stripe cleaner will read the)FmTX
299.88 675.666 FmM 0 0 130.793(deltas from the log on their own.)FmTX
317.88 688.666 FmM 1.086 0 210.171(If a client is forced to write data in small pieces \(e.g.)FmTX
299.88 699.666 FmM 1.446 0 126(because an application invokes )FmTX
0 18 gm
bu fc
2 F /|______Courier fnt
bn
( )show
431.663 699.666 FmM 2.891 0 30(fsync)FmTX
0 24 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
461.663 699.666 FmM 1.446 0 74( frequently\) then it)FmTX
0 0 gm
0 gr
0 0 lin
F T cp
%%Page: ? 7
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 52.667 FmM 0.317 0 5.559(\336)FmTX
41.559 52.667 FmM 0.317 0 196.045(lls the stripe a piece at a time, appending to the \336)FmTX
241.095 52.667 FmM 0.317 0 34.707(rst stripe)FmTX
36 63.667 FmM -0.203 0 120.808(fragment until it is full, then \336)FmTX
155.588 63.667 FmM -0.203 0 121.345(lling the second fragment, and)FmTX
36 74.667 FmM 1.953 0 137.466(so on until the entire stripe is full. )FmTX
188.915 74.667 FmM 1.953 0 83.298(When writing partial)FmTX
36 85.667 FmM 1.638 0 223.525(stripes the client has two choices for dealing with parity)FmTX
273.62 85.667 FmM 1.638 0 2.5(.)FmTX
36 96.667 FmM 2.935 0 210.774(First, it can delay writing the parity until the stripe is)FmTX
36 107.667 FmM 2.345 0 41.65(complete. )FmTX
79.817 107.667 FmM 2.345 0 73.872(This is the most ef)FmTX
162.89 107.667 FmM 2.345 0 5.559(\336)FmTX
168.449 107.667 FmM 2.345 0 98.291(cient alternative and it is)FmTX
36 118.667 FmM 0.227 0 235.999(relatively safe \(the client has a copy of the unwritten parity)FmTX
273.62 118.667 FmM 0.227 0 2.5(,)FmTX
36 129.667 FmM 0.798 0 231.343(so information will be lost only if both a disk is destroyed)FmTX
36 140.667 FmM -0.22 0 242.097(and the client crashes\). For even greater protection the client)FmTX
36 151.667 FmM 0.241 0 85.789(can update the stripe\325)FmTX
121.962 151.667 FmM 0.241 0 152.712(s parity fragment each time it appends)FmTX
36 162.667 FmM 0.548 0 234.641(to the stripe. Parity fragments written in this way include a)FmTX
36 173.666 FmM 0.037 0 239.636(count of the number of bytes of data in the stripe at the time)FmTX
36 184.666 FmM 1.505 0 226.577(the fragment was written, which is used to determine the)FmTX
36 195.666 FmM 1.315 0 229.602(relationship between the parity and the data after crashes.)FmTX
36 206.666 FmM 0.117 0 239.065(Parity updates are implemented by storage servers in a non-)FmTX
36 217.666 FmM 0.438 0 235.735(overwrite fashion, so either the old parity or the new parity)FmTX
36 228.666 FmM 0 0 129.363(is always available after a crash.)FmTX
54 241.666 FmM -0.11 0 153(The rate at which applications invoke )FmTX
0 3 gm
bu fc
2 F /|______Courier fnt
bn
( )show
206.34 241.666 FmM -0.22 0 30(fsync)FmTX
0 9 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
236.34 241.666 FmM -0.11 0 40( will have)FmTX
36 252.666 FmM 1.806 0 17.483(a lar)FmTX
55.111 252.666 FmM 1.806 0 80.791(ge impact on Zebra\325)FmTX
140.771 252.666 FmM 1.806 0 119.102(s performance \(or any other \336)FmTX
268.903 252.666 FmM 1.806 0 7.217(le)FmTX
36 263.666 FmM 5.844 0 31(system\325)FmTX
66.451 263.666 FmM 5.844 0 43(s\) because )FmTX
0 12 gm
bu fc
2 F /|______Courier fnt
bn
( )show
121.138 263.666 FmM 11.687 0 30(fsync)FmTX
0 18 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
151.138 263.666 FmM 5.844 0 3(\325)FmTX
153.589 263.666 FmM 5.844 0 105(s require synchronous disk)FmTX
36 274.666 FmM 3.013 0 216.016(operations. Baker et. al [Baker92b] found that under a)FmTX
36 285.666 FmM 0.233 0 238.254(transaction processing workload up to 90% of the segments)FmTX
36 296.666 FmM 0.301 0 80.544(written on an LFS \336)FmTX
117.747 296.666 FmM 0.301 0 156.87(le system were partial segments caused)FmTX
36 307.666 FmM 6.303 0 25(by an )FmTX
0 21 gm
bu fc
2 F /|______Courier fnt
bn
( )show
73.606 307.666 FmM 12.606 0 36(fsync.)FmTX
0 27 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
109.606 307.666 FmM 6.303 0 135(Such a workload would have poor)FmTX
36 318.666 FmM 0.595 0 170.469(performance on Zebra as well. Fortunately)FmTX
208.795 318.666 FmM 0.595 0 65.54(, they found that)FmTX
36 329.666 FmM 0.824 0 165(on non-transaction processing workloads )FmTX
0 30 gm
bu fc
2 F /|______Courier fnt
bn
( )show
204.296 329.666 FmM 1.648 0 30(fsync)FmTX
0 36 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
234.296 329.666 FmM 0.824 0 41( accounted)FmTX
36 340.666 FmM 0 0 168.271(for less than 20% of the segments written.)FmTX
0 39 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 364.333 FmM 0 0 17.5(4.3)FmTX
64.8 364.333 FmM 0 0 81.266(Reading Files)FmTX
0 43 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 385.666 FmM 0.945 0 212.673(File reads in Zebra are carried out in almost the same)FmTX
36 396.666 FmM 0.968 0 148.84(fashion as in a non-striped network \336)FmTX
190.646 396.666 FmM 0.968 0 42.49(le system. )FmTX
234.893 396.666 FmM 0.968 0 40.259(The client)FmTX
36 407.666 FmM -0.028 0 89.976(opens and closes the \336)FmTX
125.865 407.666 FmM -0.028 0 150.476(le in the same way as for a non-Zebra)FmTX
36 418.666 FmM 0.549 0 5.559(\336)FmTX
41.559 418.666 FmM 0.549 0 221.304(le; in Sprite this means a remote procedure call to the \336)FmTX
268.903 418.666 FmM 0.549 0 7.217(le)FmTX
36 429.666 FmM 0.44 0 235.72(manager for each open or close. Reading data is a two-step)FmTX
36 440.666 FmM 0.393 0 236.582(operation in the Zebra prototype. First the client must fetch)FmTX
36 451.666 FmM 1.144 0 116.355(the block pointers from the \336)FmTX
158.075 451.666 FmM 1.144 0 44.138(le manager)FmTX
202.96 451.666 FmM 1.144 0 68.584(, then it reads the)FmTX
36 462.666 FmM 1.346 0 5.559(\336)FmTX
41.559 462.666 FmM 1.346 0 130.205(le data from the storage servers. )FmTX
179.66 462.666 FmM 1.346 0 91.077(This results in an extra)FmTX
36 473.666 FmM 0.424 0 124.692(RPC relative to a non-striped \336)FmTX
162.812 473.666 FmM 0.424 0 111.611(le system; a better approach)FmTX
36 484.666 FmM 1.508 0 223.533(would be to return the block pointers as the result of the)FmTX
36 495.666 FmM 0.129 0 238.567(open RPC. In the prototype this extra RPC takes 2 ms if the)FmTX
36 506.666 FmM 1.843 0 5.559(\336)FmTX
41.559 506.666 FmM 1.843 0 217.971(le manager has the block pointers cached, and 19.5 ms)FmTX
36 517.666 FmM 0.455 0 43.87(otherwise. )FmTX
79.775 517.666 FmM 0.455 0 192.708(As many as 2048 block pointers can be returned)FmTX
36 528.666 FmM 0.037 0 205.791(by the RPC, allowing all of the block pointers for \336)FmTX
242.161 528.666 FmM 0.037 0 33.884(les up to)FmTX
36 539.666 FmM -0.146 0 241.87(8 Mbytes in size to be fetched in a single RPC. Zebra clients)FmTX
36 550.666 FmM 1.317 0 228.264(cache both block pointers and data, so this information is)FmTX
36 561.666 FmM 2.41 0 84.976(only fetched on the \336)FmTX
130.614 561.666 FmM 2.41 0 63.303(rst access to a \336)FmTX
203.556 561.666 FmM 2.41 0 67.744(le; name caching)FmTX
36 572.666 FmM 0 0 232.446(would eliminate most of the open and close RPCs as well.)FmTX
54 585.666 FmM 4.349 0 26.931(For lar)FmTX
85.102 585.666 FmM 4.349 0 17.498(ge \336)FmTX
106.949 585.666 FmM 4.349 0 124.111(les being accessed sequentially)FmTX
243.458 585.666 FmM 4.349 0 28.313(, Zebra)FmTX
36 596.666 FmM 0.747 0 232.646(prefetches data far enough ahead to keep all of the storage)FmTX
36 607.666 FmM 0.381 0 49.7(servers busy)FmTX
85.431 607.666 FmM 0.381 0 5(. )FmTX
90.263 607.666 FmM 0.381 0 183.569(As with writing, asynchronous RPCs are used)FmTX
36 618.666 FmM 0.553 0 235.144(to transfer data from all of the storage servers concurrently)FmTX
36 629.666 FmM 0.45 0 235.166(and to read the next stripe fragment on a given server from)FmTX
36 640.666 FmM 0.055 0 239.629(disk while transferring the previous one over the network to)FmTX
36 651.666 FmM 0 0 39.429(the client.)FmTX
54 664.666 FmM -0.003 0 222.141(The Zebra prototype does not attempt to optimize reads)FmTX
36 675.666 FmM 0.944 0 40.549(of small \336)FmTX
78.438 675.666 FmM 0.944 0 42.759(les: each \336)FmTX
123.086 675.666 FmM 0.944 0 145.479(le is read from its storage server in a)FmTX
36 686.666 FmM 2.457 0 180.476(separate operation, just as for a non-striped \336)FmTX
233.673 686.666 FmM 2.457 0 39.99(le system.)FmTX
36 697.666 FmM 1.671 0 36.643(However)FmTX
72.245 697.666 FmM 1.671 0 132.747(, it is possible to prefetch small \336)FmTX
216.689 697.666 FmM 1.671 0 56.089(les by reading)FmTX
36 708.666 FmM 0.298 0 171.594(entire stripes at a time, even if they cross \336)FmTX
210.279 708.666 FmM 0.298 0 65.244(le boundaries. If)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 52.667 FmM 1.913 0 80.527(there is locality of \336)FmTX
388.06 52.667 FmM 1.913 0 112.737(le access so that groups of \336)FmTX
512.276 52.667 FmM 1.913 0 25.811(les are)FmTX
299.88 63.667 FmM 0.808 0 175.464(written together and then later read together)FmTX
479.795 63.667 FmM 0.808 0 58.589(, this approach)FmTX
299.88 74.667 FmM 1.76 0 136.877(might improve read performance. )FmTX
443.619 74.667 FmM 1.76 0 9.438(W)FmTX
452.259 74.667 FmM 1.76 0 82.461(e speculate that such)FmTX
299.88 85.667 FmM 3.138 0 211.88(locality exists but we have not attempted to verify its)FmTX
299.88 96.667 FmM 0 0 147.981(existence or capitalize on it in Zebra.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 120.333 FmM 0 0 17.5(4.4)FmTX
328.68 120.333 FmM 0 0 152.397(Client Cache Consistency)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 141.667 FmM 0.055 0 56.917(If a network \336)FmTX
374.96 141.667 FmM 0.055 0 138.286(le system allows clients to cache \336)FmTX
513.573 141.667 FmM 0.055 0 26.372(le data)FmTX
299.88 152.667 FmM 2.43 0 69.707(and also allows \336)FmTX
376.876 152.667 FmM 2.43 0 148.547(les to be shared between clients, then)FmTX
299.88 163.667 FmM 1.762 0 226.021(cache consistency is a potential problem. For example, a)FmTX
299.88 174.667 FmM 0.904 0 84.968(client could write a \336)FmTX
388.462 174.667 FmM 0.904 0 145.212(le that is cached on another client; if)FmTX
299.88 185.666 FmM 0.084 0 168.276(the second client subsequently reads the \336)FmTX
468.658 185.666 FmM 0.084 0 71.091(le, it must discard)FmTX
299.88 196.666 FmM -0.107 0 177.129(its stale cached data and fetch the new data. )FmTX
475.869 196.666 FmM -0.107 0 9.438(W)FmTX
484.51 196.666 FmM -0.107 0 55.811(e chose to use)FmTX
299.88 207.666 FmM 0.436 0 137.17(the Sprite approach to consistency)FmTX
438.145 207.666 FmM 0.436 0 73.879(, which involves \337)FmTX
513.332 207.666 FmM 0.436 0 26.667(ushing)FmTX
299.88 218.666 FmM 3.443 0 108.85(or disabling caches when \336)FmTX
422.503 218.666 FmM 3.443 0 107.168(les are opened [Nelson88],)FmTX
299.88 229.666 FmM 2.077 0 223.501(because it was readily available, but any other approach)FmTX
299.88 240.666 FmM 0.846 0 121.34(could have been used as well. )FmTX
426.118 240.666 FmM 0.846 0 110.498(The only changes for Zebra)FmTX
299.88 251.666 FmM 0.526 0 86.072(occur when a client \337)FmTX
388.055 251.666 FmM 0.526 0 37.214(ushes a \336)FmTX
426.321 251.666 FmM 0.526 0 111.05(le from its cache. Instead of)FmTX
299.88 262.666 FmM -0.247 0 119.412(just returning dirty data to a \336)FmTX
417.808 262.666 FmM -0.247 0 34.138(le server)FmTX
451.301 262.666 FmM -0.247 0 89.688(, the Zebra client must)FmTX
299.88 273.666 FmM 1.156 0 220.19(write the dirty blocks to a storage server and then the \336)FmTX
532.783 273.666 FmM 1.156 0 7.217(le)FmTX
299.88 284.666 FmM 0.095 0 239.075(manager must process all of the deltas for the blocks so that)FmTX
299.88 295.666 FmM 0 0 222.419(it can provide up-to-date block pointers to other clients.)FmTX
0 9 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 319.333 FmM 0 0 17.5(4.5)FmTX
328.68 319.333 FmM 0 0 93.707(Stripe Cleaning)FmTX
0 13 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 340.666 FmM -0.078 0 23.606(The \336)FmTX
341.408 340.666 FmM -0.078 0 199.37(rst step in cleaning is to select one or more stripes)FmTX
299.88 351.666 FmM 0.691 0 36.372(to clean. )FmTX
337.456 351.666 FmM 0.691 0 6.108(T)FmTX
342.866 351.666 FmM 0.691 0 191.604(o do this intelligently the stripe cleaner needs to)FmTX
299.88 362.666 FmM 0.979 0 229.348(know how much live data is left in each stripe. Deltas are)FmTX
299.88 373.666 FmM 4.498 0 137.192(used to compute this information. )FmTX
459.385 373.666 FmM 4.498 0 71.619(The stripe cleaner)FmTX
299.88 384.666 FmM 1.131 0 228.809(processes the deltas from the client logs and uses them to)FmTX
299.88 395.666 FmM 1.35 0 227.974(keep a running count of space utilization in each existing)FmTX
299.88 406.666 FmM 0.758 0 234.055(stripe. For each delta the cleaner increments the utilization)FmTX
299.88 417.666 FmM 4.158 0 202.698(of the stripe containing the new block \(if any\), and)FmTX
299.88 428.666 FmM 1.624 0 227.131(decrements the utilization of the stripe that contained the)FmTX
299.88 439.666 FmM -0.005 0 240.178(old block \(if any\). In addition, the cleaner appends all of the)FmTX
299.88 450.666 FmM 1.408 0 184.36(deltas that refer to a given stripe to a special \336)FmTX
498.317 450.666 FmM 1.408 0 38.867(le for that)FmTX
299.88 461.666 FmM 3.57 0 68.301(stripe, called the )FmTX
0 15 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
378.89 461.666 FmM 3.57 0 56.108(stripe status \336)FmTX
442.137 461.666 FmM 3.57 0 7.217(le)FmTX
0 18 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
449.354 461.666 FmM 3.57 0 76.367(, whose use will be)FmTX
299.88 472.666 FmM 4.192 0 65.247(described below)FmTX
368.669 472.666 FmM 4.192 0 5(. )FmTX
377.683 472.666 FmM 4.192 0 73.591(The stripe status \336)FmTX
463.851 472.666 FmM 4.192 0 63.572(les are stored as)FmTX
299.88 483.666 FmM 1.63 0 67.744(ordinary Zebra \336)FmTX
370.885 483.666 FmM 1.63 0 157.703(les. Note that a single update or cleaner)FmTX
299.88 494.666 FmM 0.736 0 46.077(delta can af)FmTX
347.251 494.666 FmM 0.736 0 46.086(fect two dif)FmTX
394.632 494.666 FmM 0.736 0 140.212(ferent stripes; a copy of the delta is)FmTX
299.88 505.666 FmM 0 0 96.643(appended to the status \336)FmTX
396.523 505.666 FmM 0 0 79.141(les for both stripes. )FmTX
317.88 518.666 FmM 4.715 0 193.828(Given the utilizations computed above the stripe)FmTX
299.88 529.666 FmM 1.232 0 36.919(cleaner \336)FmTX
338.031 529.666 FmM 1.232 0 189.644(rst looks for stripes with no live data. If any are)FmTX
299.88 540.666 FmM 1.303 0 166.028(found then the cleaner deletes the stripes\325)FmTX
472.983 540.666 FmM 1.303 0 64.412( fragments from)FmTX
299.88 551.666 FmM 0.098 0 239.333(the storage servers and also deletes the corresponding stripe)FmTX
299.88 562.666 FmM -0.18 0 30.833(status \336)FmTX
330.533 562.666 FmM -0.18 0 211.265(les. If there are no empty stripes and more free space)FmTX
299.88 573.666 FmM 1.3 0 227.122(is needed then the cleaner chooses one or more stripes to)FmTX
299.88 584.666 FmM 2.205 0 26.094(clean. )FmTX
328.001 584.666 FmM 2.205 0 189.946(The policy it uses for this is identical to the one)FmTX
299.88 595.666 FmM 0.54 0 234.099(described by Rosenblum [Rosenblum91], i.e. a cost-bene\336)FmTX
537.221 595.666 FmM 0.54 0 2.778(t)FmTX
299.88 606.666 FmM 1.381 0 227.693(analysis is done for each stripe, which considers both the)FmTX
299.88 617.666 FmM 0 0 222.412(amount of live data in the stripe and the age of the data.)FmTX
317.88 630.666 FmM -0.217 0 224.075(There are two issues in cleaning a stripe: identifying the)FmTX
299.88 641.666 FmM 1.37 0 186.338(live blocks, and copying them to a new stripe. )FmTX
498.371 641.666 FmM 1.37 0 40.259(The stripe)FmTX
299.88 652.666 FmM 1.522 0 30.833(status \336)FmTX
332.234 652.666 FmM 1.522 0 58.037(les make the \336)FmTX
394.837 652.666 FmM 1.522 0 136.033(rst step easy: the cleaner reads the)FmTX
299.88 663.666 FmM 0.258 0 76.357(deltas in the stripe\325)FmTX
376.462 663.666 FmM 0.258 0 37.222(s status \336)FmTX
414.2 663.666 FmM 0.258 0 32.214(le and \336)FmTX
446.931 663.666 FmM 0.258 0 89.695(nds blocks that haven\325)FmTX
537.221 663.666 FmM 0.258 0 2.778(t)FmTX
299.88 674.666 FmM 2.06 0 69.966(yet been deleted. )FmTX
375.847 674.666 FmM 2.06 0 9.438(W)FmTX
384.887 674.666 FmM 2.06 0 96.096(ithout the stripe status \336)FmTX
489.222 674.666 FmM 2.06 0 46.658(les this step)FmTX
299.88 685.666 FmM 1.462 0 98.303(would be much more dif)FmTX
403.852 685.666 FmM 1.462 0 5.559(\336)FmTX
409.412 685.666 FmM 1.462 0 123.279(cult, since the deltas that cause)FmTX
299.88 696.666 FmM 3.22 0 214.36(blocks to become free could be spread throughout the)FmTX
299.88 707.666 FmM 0 0 59.155(stripes in the \336)FmTX
359.035 707.666 FmM 0 0 39.99(le system.)FmTX
0 0 gm
0 gr
0 0 lin
F T cp
%%Page: ? 8
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 52.667 FmM 2.219 0 155.5(Once the live blocks have been identi\336)FmTX
222.815 52.667 FmM 2.219 0 48.867(ed the stripe)FmTX
36 63.667 FmM 0.037 0 28.86(cleaner)FmTX
64.462 63.667 FmM 0.037 0 103.279(, which executes as a user)FmTX
167.726 63.667 FmM 0.037 0 108.284(-level process, copies them)FmTX
36 74.667 FmM 0.997 0 169.37(to a new stripe using a special kernel call. )FmTX
214.163 74.667 FmM 0.997 0 59.963(The kernel call)FmTX
36 85.667 FmM 2.216 0 222.393(reads one or more blocks from storage servers, appends)FmTX
36 96.667 FmM 0.131 0 238.55(them to its client log, and writes the new log contents to the)FmTX
36 107.667 FmM -0.059 0 240.713(storage servers. For each block a cleaner delta is included in)FmTX
36 118.667 FmM 0.678 0 40.256(the client\325)FmTX
76.385 118.667 FmM 0.678 0 24.167(s log. )FmTX
101.731 118.667 FmM 0.678 0 169.641(The kernel call for cleaning blocks has the)FmTX
36 129.667 FmM 0.633 0 30.811(same ef)FmTX
67.265 129.667 FmM 0.633 0 203.792(fect as reading and rewriting the blocks except that)FmTX
36 140.667 FmM 2.482 0 48.306(\(a\) it doesn\325)FmTX
89.091 140.667 FmM 2.482 0 47.493(t open the \336)FmTX
144.028 140.667 FmM 2.482 0 122.166(le or invoke cache consistency)FmTX
36 151.667 FmM 0.698 0 82.739(actions, \(b\) it needn\325)FmTX
120.656 151.667 FmM 0.698 0 103.301(t copy data out to the user)FmTX
227.949 151.667 FmM 0.698 0 47.473(-level stripe)FmTX
36 162.667 FmM 0.014 0 237.375(cleaner process and back into the kernel again, \(c\) it doesn\325)FmTX
273.341 162.667 FmM 0.014 0 2.778(t)FmTX
36 173.666 FmM 0.198 0 72.483(update last-modi\336)FmTX
108.681 173.666 FmM 0.198 0 135.51(ed times or version numbers for \336)FmTX
245.378 173.666 FmM 0.198 0 30.544(les, and)FmTX
36 184.666 FmM 0.693 0 233.193(\(d\) the deltas that it generates are marked as cleaner deltas)FmTX
36 195.666 FmM 0 0 96.628(instead of update deltas.)FmTX
54 208.666 FmM 1.265 0 210.737(One concern about the stripe cleaner is how much of)FmTX
36 219.666 FmM 1.307 0 45.818(the system\325)FmTX
82.576 219.666 FmM 1.307 0 184.395(s resources it will consume in copying blocks.)FmTX
36 230.666 FmM 4.85 0 9.438(W)FmTX
44.64 230.666 FmM 4.85 0 192.678(e do not have measurements of Zebra under real)FmTX
36 241.666 FmM 0.217 0 237.952(workloads, but we expect the cleaning costs for Zebra to be)FmTX
36 252.666 FmM 0.131 0 184.365(comparable to those for other log-structured \336)FmTX
221.151 252.666 FmM 0.131 0 54.707(le systems. In)FmTX
36 263.666 FmM 1.976 0 226.289(a transaction-processing benchmark on a nearly full disk)FmTX
36 274.666 FmM 2.25 0 222.119(Seltzer found that cleaning accounted for 60-80% of all)FmTX
36 285.666 FmM 2.224 0 36.914(write traf)FmTX
74.96 285.666 FmM 2.224 0 5.559(\336)FmTX
80.519 285.666 FmM 2.224 0 48.882(c and signi\336)FmTX
133.848 285.666 FmM 2.224 0 34.7(cantly af)FmTX
170.593 285.666 FmM 2.224 0 101.079(fected system throughput)FmTX
36 296.666 FmM 8.735 0 86.057([Seltzer93]. However)FmTX
130.394 296.666 FmM 8.735 0 110.786(, in a software development)FmTX
36 307.666 FmM 1.656 0 228.53(benchmark that is more typical of workstation workloads)FmTX
36 318.666 FmM 1.772 0 227.715(Seltzer found cleaning costs to be negligible. Rosenblum)FmTX
36 329.666 FmM 2.04 0 223.801(measured production usage of LFS on Sprite for several)FmTX
36 340.666 FmM 0.446 0 235.215(months and found that only 2-7% of the data in stripes that)FmTX
36 351.666 FmM 6.14 0 191.001(were cleaned were live and needed to be copied)FmTX
36 362.666 FmM 1.284 0 232.415([Rosenblum91]. Based on these measurements we believe)FmTX
36 373.666 FmM 5.442 0 196.584(that the cleaning overhead will be low for typical)FmTX
36 384.666 FmM 0.998 0 232.136(workstation workloads but more work is needed to reduce)FmTX
36 395.666 FmM 0 0 208.513(the overheads for transaction-processing workloads.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 419.333 FmM 0 0 17.5(4.6)FmTX
64.8 419.333 FmM 0 0 32.672(Con\337)FmTX
97.472 419.333 FmM 0 0 160.966(icts Between Cleaning and )FmTX
64.8 435.333 FmM 0 0 26.045(File )FmTX
90.076 435.333 FmM 0 0 39.638(Access)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 456.666 FmM -0.23 0 217.429(It is possible for an application to modify or delete a \336)FmTX
268.903 456.666 FmM -0.23 0 7.217(le)FmTX
36 467.666 FmM 0.675 0 232.693(block at the same time that the stripe cleaner is copying it.)FmTX
36 478.666 FmM 3.139 0 9.438(W)FmTX
45.041 478.666 FmM 3.139 0 209.109(ithout any synchronization a client could modify the)FmTX
36 489.666 FmM 1.746 0 222.659(block after the cleaner reads the old copy but before the)FmTX
36 500.666 FmM 2.742 0 215.439(cleaner rewrites the block, in which case the new data)FmTX
36 511.666 FmM 0.318 0 236.301(would be lost in favor of the rewritten copy of the old data.)FmTX
36 522.666 FmM 2.52 0 217.437(In the original LFS this race condition was avoided by)FmTX
36 533.666 FmM 1.782 0 101.069(having the cleaner lock \336)FmTX
144.197 533.666 FmM 1.782 0 123.013(les to prevent them from being)FmTX
36 544.666 FmM 1.9 0 26.116(modi\336)FmTX
62.116 544.666 FmM 1.9 0 113.562(ed until after cleaning was \336)FmTX
185.177 544.666 FmM 1.9 0 87.192(nished. Unfortunately)FmTX
273.62 544.666 FmM 1.9 0 2.5(,)FmTX
36 555.666 FmM 4.062 0 137.456(this produced lock convoys that ef)FmTX
193.589 555.666 FmM 4.062 0 74.407(fectively halted all)FmTX
36 566.666 FmM 4.831 0 36.382(normal \336)FmTX
77.213 566.666 FmM 4.831 0 169.922(le accesses during cleaning and resulted in)FmTX
36 577.666 FmM 0 0 25.005(signi\336)FmTX
61.005 577.666 FmM 0 0 48.311(cant pauses.)FmTX
54 590.666 FmM 3.795 0 26.641(Zebra\325)FmTX
80.091 590.666 FmM 3.795 0 173.257(s stripe cleaner uses an optimistic approach)FmTX
36 601.666 FmM 1.207 0 205.737(similar to that of Seltzer et al. [Seltzer93]. It doesn\325)FmTX
252.418 601.666 FmM 1.207 0 22.495(t lock)FmTX
36 612.666 FmM 1.206 0 22.498(any \336)FmTX
59.704 612.666 FmM 1.206 0 207.971(les during cleaning or invoke any cache consistency)FmTX
36 623.666 FmM 0.642 0 234.346(actions. Instead the stripe cleaner just copies the block and)FmTX
36 634.666 FmM 3.757 0 213.823(issues a cleaner delta, assuming optimistically that its)FmTX
36 645.666 FmM 0.691 0 231.301(information about the block is correct and the block hasn\325)FmTX
273.342 645.666 FmM 0.691 0 2.778(t)FmTX
36 656.666 FmM 2.443 0 87.732(been updated recently)FmTX
127.968 656.666 FmM 2.443 0 131.052(. If in fact the block was updated)FmTX
36 667.666 FmM 1.383 0 226.287(while the cleaner was cleaning it, an update delta will be)FmTX
36 678.666 FmM 0.272 0 237.668(generated by the client that made the change. Regardless of)FmTX
36 689.666 FmM -0.094 0 180.195(the order in which these deltas arrive at the \336)FmTX
215.35 689.666 FmM -0.094 0 44.138(le manager)FmTX
258.997 689.666 FmM -0.094 0 17.217(, the)FmTX
36 700.666 FmM 0.632 0 5.559(\336)FmTX
41.559 700.666 FmM 0.632 0 131.609(le manager makes sure that the \336)FmTX
176.962 700.666 FmM 0.632 0 96.628(nal pointer for the block)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 241.667 FmM -0.232 0 13.325(re\337)FmTX
313.205 241.667 FmM -0.232 0 172.139(ects the update delta, not the cleaner delta. )FmTX
483.313 241.667 FmM -0.232 0 56.919(This approach)FmTX
299.88 252.667 FmM 1.355 0 226.572(results in wasted work by the cleaner in the unusual case)FmTX
299.88 263.667 FmM 0.208 0 53.86(where a con\337)FmTX
354.155 263.667 FmM 0.208 0 184.392(ict occurs, but it avoids synchronization in the)FmTX
299.88 274.667 FmM 0 0 148.271(common case where there is no con\337)FmTX
448.151 274.667 FmM 0 0 12.495(ict.)FmTX
317.88 287.667 FmM -0.003 0 23.606(The \336)FmTX
341.483 287.667 FmM -0.003 0 96.897(le manager detects con\337)FmTX
438.371 287.667 FmM -0.003 0 101.641(icts by comparing the old)FmTX
299.88 298.667 FmM 0.361 0 236.873(block pointer in each incoming delta with the block pointer)FmTX
299.88 309.667 FmM 0.227 0 57.488(stored in the \336)FmTX
358.048 309.667 FmM 0.227 0 44.138(le manager)FmTX
402.782 309.667 FmM 0.227 0 3.328(\325)FmTX
405.56 309.667 FmM 0.227 0 101.89(s metadata; if they are dif)FmTX
508.406 309.667 FmM 0.227 0 31.367(ferent it)FmTX
299.88 320.667 FmM 3.797 0 213.538(means that the block was simultaneously cleaned and)FmTX
299.88 331.667 FmM 1.367 0 36.655(updated. )FmTX
337.902 331.667 FmM 1.367 0 6.108(T)FmTX
343.312 331.667 FmM 1.367 0 24.155(able 1)FmTX
368.835 331.667 FmM 1.367 0 159.646( shows the four scenarios that can occur)FmTX
537.5 331.667 FmM 1.367 0 2.5(.)FmTX
299.88 342.667 FmM 0.08 0 23.606(The \336)FmTX
323.566 342.667 FmM 0.08 0 215.715(rst two scenarios represent the cases where there is no)FmTX
299.88 353.667 FmM 3.495 0 19.998(con\337)FmTX
319.878 353.667 FmM 3.495 0 52.751(ict: the delta\325)FmTX
379.07 353.667 FmM 3.495 0 132.744(s old block pointer matches the \336)FmTX
532.783 353.667 FmM 3.495 0 7.217(le)FmTX
299.88 364.666 FmM -0.142 0 34.421(manager)FmTX
334.67 364.666 FmM -0.142 0 3.328(\325)FmTX
337.448 364.666 FmM -0.142 0 90.239(s current block pointer)FmTX
426.863 364.666 FmM -0.142 0 36.665(, so the \336)FmTX
463.102 364.666 FmM -0.142 0 77.183(le manager updates)FmTX
299.88 375.666 FmM 0.624 0 233.259(its block pointer with the new block pointer in the delta. If)FmTX
299.88 386.666 FmM -0.239 0 239.91(an update delta arrives with an old block pointer that doesn\325)FmTX
537.221 386.666 FmM -0.239 0 2.778(t)FmTX
299.88 397.666 FmM 1.604 0 224.075(match, it can only mean that the block was cleaned \(any)FmTX
299.88 408.666 FmM 4.128 0 202.971(other update to the block is prevented by the cache)FmTX
299.88 419.666 FmM 2.131 0 111.355(consistency protocol\); the \336)FmTX
417.629 419.666 FmM 2.131 0 113.845(le manager updates its block)FmTX
299.88 430.666 FmM 2.493 0 215.19(pointer with the new block pointer from the delta. If a)FmTX
299.88 441.666 FmM 0.816 0 230.176(cleaner delta arrives with an old block pointer that doesn\325)FmTX
537.222 441.666 FmM 0.816 0 2.778(t)FmTX
299.88 452.666 FmM 0.549 0 234.634(match, it means that the block has already been updated so)FmTX
299.88 463.666 FmM 0 0 232.661(the cleaned copy is irrelevant: the cleaner delta is ignored.)FmTX
317.88 476.666 FmM 1.334 0 127.444(In both of the cases where the \336)FmTX
454.66 476.666 FmM 1.334 0 81.338(le manager detects a)FmTX
299.88 487.666 FmM 1.606 0 19.998(con\337)FmTX
319.878 487.666 FmM 1.606 0 204.065(ict it generates a reject delta, which is placed in the)FmTX
299.88 498.666 FmM -0.066 0 104.963(client log for its machine. )FmTX
404.336 498.666 FmM -0.066 0 136.06(The old block pointer in the reject)FmTX
299.88 509.666 FmM 1.309 0 225.723(delta refers to the cleaned copy of the block and the new)FmTX
299.88 520.666 FmM 1.245 0 211.052(pointer is null to indicate that this block is now free. )FmTX
524.453 520.666 FmM 1.245 0 15.547(The)FmTX
299.88 531.666 FmM 1.612 0 222.383(reject delta is used by the stripe cleaner to keep track of)FmTX
299.88 542.666 FmM 1.843 0 223.53(stripe usage; without it the stripe cleaner would have no)FmTX
299.88 553.666 FmM 0.91 0 231.016(way of knowing that the block generated by the cleaner is)FmTX
299.88 564.666 FmM 0 0 30.828(unused.)FmTX
317.88 577.666 FmM 0.781 0 213.53(It is also possible for an application to read a block at)FmTX
299.88 588.666 FmM -0.036 0 240.479(the same time that it is being cleaned. For example, suppose)FmTX
299.88 599.666 FmM 2.522 0 207.688(that a client has retrieved a block pointer from the \336)FmTX
532.783 599.666 FmM 2.522 0 7.217(le)FmTX
299.88 610.666 FmM 1.078 0 229.343(manager but the block is moved by the cleaner before the)FmTX
299.88 621.666 FmM 1.031 0 228.782(client retrieves it. If the client then tries to use the out-of-)FmTX
299.88 632.666 FmM 1.781 0 72.195(date block pointer)FmTX
375.239 632.666 FmM 1.781 0 150.513(, one of two things will happen. If the)FmTX
299.88 643.666 FmM 1.612 0 25.544(block\325)FmTX
324.875 643.666 FmM 1.612 0 197.156(s stripe still exists then the client can use it safely)FmTX
537.5 643.666 FmM 1.612 0 2.5(,)FmTX
299.88 654.666 FmM 0.187 0 90.227(since the cleaner didn\325)FmTX
390.49 654.666 FmM 0.187 0 148.013(t modify the old copy of the block. If)FmTX
299.88 665.666 FmM 0.803 0 231.282(the stripe has been deleted then the client will get an error)FmTX
299.88 676.666 FmM 1.089 0 226.287(from the storage server when it tries to read the old copy)FmTX
537.5 676.666 FmM 1.089 0 2.5(.)FmTX
299.88 687.666 FmM 0.246 0 237.412(This error indicates that the block pointer is out of date: the)FmTX
299.88 698.666 FmM 0.513 0 236.013(client simply discards the pointer and fetches an up-to-date)FmTX
0 0 gm
0 gr
0 0 lin
(299.88 46 540 712)FmKp
(299.88 46 539.64 235)FmKp
(nc 46 299 235 540 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
312.582 64.667 FmM 0 0 6.67(T)FmTX
318.512 64.667 FmM 0 0 25.825(ype of)FmTX
317.077 75.667 FmM 0 0 22.764(Delta)FmTX
356.337 64.667 FmM 0 0 58.596(Block Pointer)FmTX
365.089 75.667 FmM 0 0 41.091(Matches?)FmTX
429.707 64.667 FmM 0 0 31.104(Update)FmTX
426.933 75.667 FmM 0 0 36.65(Pointer?)FmTX
475.583 64.667 FmM 0 0 51.355(Issue Reject)FmTX
487.379 75.667 FmM 0 0 27.764(Delta?)FmTX
0 3 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
314.022 97.667 FmM 0 0 28.875(Update)FmTX
378.361 97.667 FmM 0 0 7.219(Y)FmTX
384.582 97.667 FmM 0 0 8.328(es)FmTX
437.984 97.667 FmM 0 0 7.219(Y)FmTX
444.205 97.667 FmM 0 0 8.328(es)FmTX
495.151 97.667 FmM 0 0 12.219(No)FmTX
312.914 117.667 FmM 0 0 31.091(Cleaner)FmTX
378.361 117.667 FmM 0 0 7.219(Y)FmTX
384.582 117.667 FmM 0 0 8.328(es)FmTX
437.984 117.667 FmM 0 0 7.219(Y)FmTX
444.205 117.667 FmM 0 0 8.328(es)FmTX
495.151 117.667 FmM 0 0 12.219(No)FmTX
314.022 137.667 FmM 0 0 28.875(Update)FmTX
379.525 137.667 FmM 0 0 12.219(No)FmTX
437.984 137.667 FmM 0 0 7.219(Y)FmTX
444.205 137.667 FmM 0 0 8.328(es)FmTX
493.987 137.667 FmM 0 0 7.219(Y)FmTX
500.208 137.667 FmM 0 0 8.328(es)FmTX
312.914 157.667 FmM 0 0 31.091(Cleaner)FmTX
379.525 157.667 FmM 0 0 12.219(No)FmTX
439.149 157.667 FmM 0 0 12.219(No)FmTX
493.987 157.667 FmM 0 0 7.219(Y)FmTX
500.208 157.667 FmM 0 0 8.328(es)FmTX
0 0 gm
0 gr
0 0 lin
306.582 50.25 FmM
306.582 164.75 FmL
false FmFl
0 0 lin
306.582 50.25 FmM
306.582 164.75 FmL
false 0 0.5 FmSt
0 0 lin
350.337 49.75 FmM
350.337 165.25 FmL
false FmFl
0 0 lin
350.337 49.75 FmM
350.337 165.25 FmL
false 0 0.5 FmSt
0 0 lin
420.933 49.75 FmM
420.933 165.25 FmL
false FmFl
0 0 lin
420.933 49.75 FmM
420.933 165.25 FmL
false 0 0.5 FmSt
0 0 lin
469.583 49.75 FmM
469.583 165.25 FmL
false FmFl
0 0 lin
469.583 49.75 FmM
469.583 165.25 FmL
false 0 0.5 FmSt
0 0 lin
532.938 50.25 FmM
532.938 164.75 FmL
false FmFl
0 0 lin
532.938 50.25 FmM
532.938 164.75 FmL
false 0 0.5 FmSt
0 0 lin
306.332 50 FmM
533.188 50 FmL
false FmFl
0 0 lin
306.332 50 FmM
533.188 50 FmL
false 0 0.5 FmSt
0 0 lin
306.832 83.75 FmM
532.688 83.75 FmL
false FmFl
0 0 lin
306.832 83.75 FmM
532.688 83.75 FmL
false 0 0.5 FmSt
0 0 lin
306.832 86.25 FmM
532.688 86.25 FmL
false FmFl
0 0 lin
306.832 86.25 FmM
532.688 86.25 FmL
false 0 0.5 FmSt
0 0 lin
306.332 105 FmM
533.188 105 FmL
false FmFl
0 0 lin
306.332 105 FmM
533.188 105 FmL
false 0 0.5 FmSt
0 0 lin
306.332 125 FmM
533.188 125 FmL
false FmFl
0 0 lin
306.332 125 FmM
533.188 125 FmL
false 0 0.5 FmSt
0 0 lin
306.332 145 FmM
533.188 145 FmL
false FmFl
0 0 lin
306.332 145 FmM
533.188 145 FmL
false 0 0.5 FmSt
0 0 lin
306.332 165 FmM
533.188 165 FmL
false FmFl
0 0 lin
306.332 165 FmM
533.188 165 FmL
false 0 0.5 FmSt
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
9 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
317.737 182.714 FmM 0.548 0 6.003(T)FmTX
322.914 182.714 FmM 0.548 0 22.748(able 1)FmTX
346.21 182.714 FmM 0.548 0 55.975(: File manager)FmTX
403.12 182.714 FmM 0.548 0 32.491( delta pr)FmTX
436.546 182.714 FmM 0.548 0 33.743(ocessing.)FmTX
0 2 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
470.29 182.714 FmM 0.548 0 2.25( )FmTX
472.927 182.714 FmM 0.548 0 47.474(When a delta)FmTX
317.737 191.714 FmM 0.894 0 53.723(arrives at the \336)FmTX
374.143 191.714 FmM 0.894 0 39.724(le manager)FmTX
414.404 191.714 FmM 0.894 0 101.727(, the old block pointer in the)FmTX
317.737 200.714 FmM 0.371 0 172.679(delta is compared with the current block pointer)FmTX
492.52 200.714 FmM 0.371 0 28.235(. If they)FmTX
317.737 209.714 FmM 0.564 0 189.692(do not match \(the bottom two scenarios\) then a con\337)FmTX
512.501 209.714 FmM 0.564 0 8.996(ict)FmTX
317.737 218.714 FmM 0 0 47.969(has occurred.)FmTX
0 0 gm
0 gr
0 0 lin
(299.88 46 540 712)FmKp
(nc 46 299 712 540 6 rc)kp
0 0 lin
F T cp
%%Page: ? 9
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 52.667 FmM 0 0 74.143(version from the \336)FmTX
110.143 52.667 FmM 0 0 44.138(le manager)FmTX
153.732 52.667 FmM 0 0 2.5(.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 76.333 FmM 0 0 17.5(4.7)FmTX
64.8 76.333 FmM 0 0 147.352(Adding a Storage Server)FmTX
0 6 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 97.667 FmM 0.156 0 26.641(Zebra\325)FmTX
80.091 97.667 FmM 0.156 0 194.624(s architecture makes it easy to add a new storage)FmTX
36 108.667 FmM 0.455 0 116.074(server to an existing system. )FmTX
153.798 108.667 FmM 0.455 0 119.138(All that needs to be done is to)FmTX
36 119.667 FmM 2.235 0 95.781(initialize the new server)FmTX
138.856 119.667 FmM 2.235 0 3.328(\325)FmTX
141.634 119.667 FmM 2.235 0 121.074(s disk\(s\) to an empty state and)FmTX
36 130.667 FmM 0.533 0 77.761(notify the clients, \336)FmTX
115.36 130.667 FmM 0.533 0 44.138(le manager)FmTX
159.634 130.667 FmM 0.533 0 113.821(, and stripe cleaner that each)FmTX
36 141.667 FmM 2.736 0 215.498(stripe now has one more fragment. From this point on)FmTX
36 152.667 FmM 2.574 0 197.136(clients will stripe their logs across the new server)FmTX
253.177 152.667 FmM 2.574 0 5(. )FmTX
260.573 152.667 FmM 2.574 0 15.547(The)FmTX
36 163.667 FmM 1.677 0 222.429(existing stripes can be used as-is even though they don\325)FmTX
273.341 163.667 FmM 1.677 0 2.778(t)FmTX
36 174.667 FmM 0.401 0 235.71(cover all of the servers; in the few places where the system)FmTX
36 185.666 FmM 1.633 0 223.794(needs to know how many fragments there are in a stripe)FmTX
36 196.666 FmM 0.894 0 232.07(\(such as reconstruction after a server failure\), it can detect)FmTX
36 207.666 FmM 0.114 0 238.755(the absence of a fragment for a stripe on the new server and)FmTX
36 218.666 FmM 2.848 0 96.074(adjust itself accordingly)FmTX
137.121 218.666 FmM 2.848 0 121.909(. Over time the old stripes will)FmTX
36 229.666 FmM 0.049 0 239.629(gradually be cleaned, at which point their disk space will be)FmTX
36 240.666 FmM 2.382 0 216.299(used for longer stripes that span all of the servers. Old)FmTX
36 251.666 FmM 0.801 0 232.107(stripes are likely to be cleaned before new ones since they)FmTX
36 262.666 FmM 1.997 0 222.151(will probably contain less live data. If it should become)FmTX
36 273.666 FmM 0.725 0 106.047(desirable for a particular \336)FmTX
144.947 273.666 FmM 0.725 0 128.274(le to be reallocated immediately)FmTX
36 284.666 FmM 0.754 0 197.151(to use the additional bandwidth of the new server)FmTX
238.788 284.666 FmM 0.754 0 35.823(, this can)FmTX
36 295.666 FmM 0.63 0 101.37(be done by copying the \336)FmTX
140.52 295.666 FmM 0.63 0 132.449(le and replacing the original with)FmTX
36 306.666 FmM 0 0 34.155(the copy)FmTX
69.506 306.666 FmM 0 0 2.5(.)FmTX
0 9 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 335.333 FmM 0 0 7(5)FmTX
57.6 335.333 FmM 0 0 136.849(Restoring Consistency )FmTX
193.68 335.333 FmM 0 0 31.852(After)FmTX
225.282 335.333 FmM 0 0 3.5( )FmTX
57.6 351.333 FmM 0 0 48.207(Crashes)FmTX
0 13 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 372.666 FmM 1.32 0 211.558(There are two general issues that Zebra must address)FmTX
36 383.666 FmM 1.488 0 228.218(when a client or server machine crashes: consistency and)FmTX
36 394.666 FmM 0.671 0 44.985(availability)FmTX
80.336 394.666 FmM 0.671 0 189.077(. If a crash occurs in the middle of an operation)FmTX
36 405.666 FmM 0.24 0 207.695(then data structures may be left in a partially-modi\336)FmTX
245.618 405.666 FmM 0.24 0 30.261(ed state)FmTX
36 416.666 FmM 1.044 0 137.156(after the crash. For example, the \336)FmTX
179.42 416.666 FmM 1.044 0 93.567(le manager might crash)FmTX
36 427.666 FmM -0.145 0 241.57(before processing all of the deltas written by clients; when it)FmTX
36 438.666 FmM 1.103 0 230.193(reboots its metadata will not be up-to-date with respect to)FmTX
36 449.666 FmM 0.59 0 104.131(information in the clients\325)FmTX
141.162 449.666 FmM 0.59 0 24.167( logs. )FmTX
166.332 449.666 FmM 0.59 0 108.018(This section describes how)FmTX
36 460.666 FmM 2.612 0 221.838(Zebra restores internal consistency to its data structures)FmTX
36 471.666 FmM 0.759 0 55.232(after crashes. )FmTX
92.571 471.666 FmM 0.759 0 124.961(The second issue is availability)FmTX
219.917 471.666 FmM 0.759 0 54.685(, which refers)FmTX
36 482.666 FmM 1.348 0 56.096(to the system\325)FmTX
94.242 482.666 FmM 1.348 0 172.444(s ability to continue operation even while a)FmTX
36 493.666 FmM 2.964 0 109.961(component is down. Zebra\325)FmTX
154.302 493.666 FmM 2.964 0 109.963(s approach to availability is)FmTX
36 504.666 FmM 0 0 51.089(described in )FmTX
87.089 504.666 FmM 0 0 37.493(Section 6)FmTX
124.582 504.666 FmM 0 0 2.5(.)FmTX
54 517.666 FmM -0.154 0 223.508(In many respects the consistency issues in Zebra are the)FmTX
36 528.666 FmM 0.297 0 108.018(same as in other network \336)FmTX
145.503 528.666 FmM 0.297 0 121.914(le systems. For example, the \336)FmTX
268.903 528.666 FmM 0.297 0 7.217(le)FmTX
36 539.666 FmM 3.51 0 208.528(manager will have to restore consistency to all of its)FmTX
36 550.666 FmM -0.119 0 120.525(structures on disk. Since the \336)FmTX
155.931 550.666 FmM -0.119 0 120.784(le manager uses the same disk)FmTX
36 561.666 FmM 1.381 0 112.732(structures as a non-striped \336)FmTX
154.257 561.666 FmM 1.381 0 113.574(le system, it can also use the)FmTX
36 572.666 FmM 3.524 0 215.452(same recovery mechanism. In the Zebra prototype the)FmTX
36 583.666 FmM 0.271 0 156.05(metadata is stored in a log-structured \336)FmTX
193.673 583.666 FmM 0.271 0 81.365(le system, so we use)FmTX
36 594.666 FmM 3.55 0 218.818(the LFS recovery mechanism described by Rosenblum)FmTX
36 605.666 FmM 2.515 0 67.209([Rosenblum91]. )FmTX
105.546 605.666 FmM 2.515 0 23.606(The \336)FmTX
131.667 605.666 FmM 2.515 0 131.877(le manager must also recover the)FmTX
36 616.666 FmM 0.86 0 233.242(information that it uses to ensure client cache consistency;)FmTX
36 627.666 FmM 0.272 0 237.126(for this Zebra uses the same approach as in Sprite, which is)FmTX
36 638.666 FmM 1.577 0 107.461(to let clients reopen their \336)FmTX
151.346 638.666 FmM 1.577 0 116.89(les to rebuild the client cache)FmTX
36 649.666 FmM 0.026 0 232.673(consistency state [Nelson88]. If a client crashes then the \336)FmTX
268.903 649.666 FmM 0.026 0 7.217(le)FmTX
36 660.666 FmM 1.132 0 228.796(manager cleans up its data structures by closing all of the)FmTX
36 671.666 FmM 0 0 25.54(client\325)FmTX
60.99 671.666 FmM 0 0 33.887(s open \336)FmTX
94.877 671.666 FmM 0 0 152.444(les, also in the same manner as Sprite.)FmTX
54 684.666 FmM 0.413 0 36.643(However)FmTX
90.245 684.666 FmM 0.413 0 183.809(, Zebra introduces three consistency problems)FmTX
36 695.666 FmM 1.4 0 117.732(that are not present in other \336)FmTX
162.132 695.666 FmM 1.4 0 46.379(le systems. )FmTX
211.133 695.666 FmM 1.4 0 63.586(These problems)FmTX
36 706.666 FmM -0.193 0 241.86(arise from the distribution of system state among the storage)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 52.667 FmM 3.413 0 38.87(servers, \336)FmTX
342.162 52.667 FmM 3.413 0 44.138(le manager)FmTX
389.315 52.667 FmM 3.413 0 130.21(, and stripe manager; each of the)FmTX
299.88 63.667 FmM 4.383 0 213.823(problems is a potential inconsistency between system)FmTX
299.88 74.667 FmM 1.122 0 53.323(components. )FmTX
354.147 74.667 FmM 1.122 0 23.606(The \336)FmTX
378.875 74.667 FmM 1.122 0 154.392(rst problem is that stripes may become)FmTX
299.88 85.667 FmM 0.733 0 233.525(internally inconsistent \(e.g. some of the data or parity may)FmTX
299.88 96.667 FmM 2.214 0 215.769(be written but not all of it\); the second problem is that)FmTX
299.88 107.667 FmM -0.092 0 240.762(information written to stripes may become inconsistent with)FmTX
299.88 118.667 FmM 0.671 0 98.298(metadata stored on the \336)FmTX
400.864 118.667 FmM 0.671 0 135.779(le manager; and the third problem)FmTX
299.88 129.667 FmM 1.716 0 94.951(is that the stripe cleaner)FmTX
402.065 129.667 FmM 1.716 0 3.328(\325)FmTX
404.844 129.667 FmM 1.716 0 128.291(s state may become inconsistent)FmTX
299.88 140.667 FmM -0.141 0 155.493(with the stripes on the storage servers. )FmTX
454.211 140.667 FmM -0.141 0 86.069(These three problems)FmTX
299.88 151.667 FmM 0 0 215.75(are discussed separately in the subsections that follow)FmTX
514.98 151.667 FmM 0 0 2.5(.)FmTX
317.88 164.667 FmM 0.46 0 217.983(The solutions to all of the consistency issues are based)FmTX
299.88 175.666 FmM 0.184 0 238.833(on logging and checkpoints. Logging means that operations)FmTX
299.88 186.666 FmM 1.359 0 225.176(are ordered so it is possible to tell what happened after a)FmTX
299.88 197.666 FmM 2.907 0 214.915(particular time and to revisit those operations in order)FmTX
537.5 197.666 FmM 2.907 0 2.5(.)FmTX
299.88 208.666 FmM 0.785 0 214.124(Logging also implies that information is never modi\336)FmTX
519.498 208.666 FmM 0.785 0 19.717(ed in)FmTX
299.88 219.666 FmM 2.676 0 216.033(place, so if a new copy of information is incompletely)FmTX
299.88 230.666 FmM 1.81 0 171.338(written the old copy will still be available. )FmTX
485.148 230.666 FmM 1.81 0 7.219(A)FmTX
491.818 230.666 FmM 1.81 0 46.372( checkpoint)FmTX
299.88 241.666 FmM 3.57 0 14.998(de\336)FmTX
314.878 241.666 FmM 3.57 0 186.333(nes a system state that is internally consistent. )FmTX
529.59 241.666 FmM 3.57 0 6.108(T)FmTX
535 241.666 FmM 3.57 0 5(o)FmTX
299.88 252.666 FmM -0.232 0 242.671(recover from a crash, the system initializes its state to that of)FmTX
299.88 263.666 FmM 0.618 0 235.178(the most recent checkpoint, then reprocesses the portion of)FmTX
299.88 274.666 FmM 0 0 166.887(the log that is newer than the checkpoint. )FmTX
317.88 287.666 FmM 0.434 0 219.084(The combination of these two techniques allows Zebra)FmTX
299.88 298.666 FmM 1.508 0 226.548(to recover quickly after crashes. It need not consider any)FmTX
299.88 309.666 FmM 3.138 0 211.882(information on disk that is older than the most recent)FmTX
299.88 320.666 FmM 1.585 0 186.06(checkpoint. Zebra is similar to other logging \336)FmTX
497.035 320.666 FmM 1.585 0 41.379(le systems)FmTX
299.88 331.666 FmM 3.077 0 215.5(such as LFS, Episode [Chutani92], and the Cedar File)FmTX
299.88 342.666 FmM 4.194 0 203.545(System [Hagmann87] in this respect. In contrast, \336)FmTX
532.783 342.666 FmM 4.194 0 7.217(le)FmTX
299.88 353.666 FmM 1.806 0 223.867(systems without logs, such as the BSD Fast File System)FmTX
299.88 364.666 FmM 0.755 0 234.082([McKusick84], cannot tell which portions of the disk were)FmTX
299.88 375.666 FmM 0.625 0 50.833(being modi\336)FmTX
351.337 375.666 FmM 0.625 0 182.417(ed at the time of a crash, so they must re-scan)FmTX
299.88 386.666 FmM 0 0 132.444(all of the metadata in the entire \336)FmTX
432.324 386.666 FmM 0 0 103.567(le system during recovery)FmTX
535.241 386.666 FmM 0 0 2.5(.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 410.333 FmM 0 0 17.5(5.1)FmTX
328.68 410.333 FmM 0 0 164.066(Internal Stripe Consistency)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 431.666 FmM 0.332 0 218.796(When a client crashes it is possible for fragments to be)FmTX
299.88 442.666 FmM 2.892 0 214.089(missing from stripes that were in the process of being)FmTX
299.88 453.666 FmM -0.12 0 33.32(written. )FmTX
332.902 453.666 FmM -0.12 0 23.606(The \336)FmTX
356.388 453.666 FmM -0.12 0 184.331(le manager detects client crashes and recovers)FmTX
299.88 464.666 FmM 2.3 0 217.124(on behalf of the client: it queries the storage servers to)FmTX
299.88 475.666 FmM 2.186 0 116.34(identify the end of the client\325)FmTX
426.6 475.666 FmM 2.186 0 59.709(s log and veri\336)FmTX
492.867 475.666 FmM 2.186 0 42.761(es that any)FmTX
299.88 486.666 FmM 3.225 0 121.333(stripes that could have been af)FmTX
437.162 486.666 FmM 3.225 0 89.937(fected by the crash are)FmTX
299.88 497.666 FmM 1.104 0 229.082(complete. If a stripe is missing a single fragment then the)FmTX
299.88 508.666 FmM 0.486 0 235.747(missing data can be reconstructed using the other stripes in)FmTX
299.88 519.666 FmM 0.494 0 235.181(the fragment. If a stripe is missing more than one fragment)FmTX
299.88 530.666 FmM 0.241 0 237.712(then it is discarded along with any subsequent stripes in the)FmTX
299.88 541.666 FmM 0.044 0 48.584(same client\325)FmTX
347.958 541.666 FmM 0.044 0 31.934(s log, ef)FmTX
379.801 541.666 FmM 0.044 0 116.323(fectively truncates the client\325)FmTX
495.706 541.666 FmM 0.044 0 44.163(s log to the)FmTX
299.88 552.666 FmM -0.017 0 92.722(last recoverable stripe. )FmTX
392.374 552.666 FmM -0.017 0 147.725(This means that data being written at)FmTX
299.88 563.666 FmM 0.23 0 237.129(the time of a crash can be lost or partially written, just as in)FmTX
299.88 574.666 FmM 0 0 28.604(other \336)FmTX
328.484 574.666 FmM 0 0 168.279(le systems that maintain UNIX semantics.)FmTX
317.88 587.666 FmM 0.246 0 220.149(When a storage server crashes and recovers, two forms)FmTX
299.88 598.666 FmM 4.261 0 206.035(of stripe inconsistency are possible. First, if a stripe)FmTX
299.88 609.666 FmM 0.803 0 231.292(fragment was being written at the time of the crash then it)FmTX
299.88 620.666 FmM 5.629 0 164.116(might not have been completely written. )FmTX
497.589 620.666 FmM 5.629 0 6.108(T)FmTX
502.999 620.666 FmM 5.629 0 31.372(o detect)FmTX
299.88 631.666 FmM 6.377 0 201.855(incomplete stripe fragments, Zebra stores a simple)FmTX
299.88 642.666 FmM 0.484 0 118.542(checksum for each fragment. )FmTX
419.808 642.666 FmM 0.484 0 118.257(After a storage server reboots)FmTX
299.88 653.666 FmM 1.138 0 29.16(it veri\336)FmTX
330.179 653.666 FmM 1.138 0 201.853(es the checksums for fragments written around the)FmTX
299.88 664.666 FmM 0 0 217.678(time of the crash and discards any that are incomplete.)FmTX
317.88 677.666 FmM 0.072 0 221.545(The second inconsistency after a storage server crash is)FmTX
299.88 688.666 FmM -0.049 0 46.099(that it won\325)FmTX
345.703 688.666 FmM -0.049 0 194.639(t contain fragments for new stripes written while)FmTX
299.88 699.666 FmM -0.116 0 53.323(it was down. )FmTX
352.305 699.666 FmM -0.116 0 188.508(After the storage server reboots it queries other)FmTX
0 0 gm
0 gr
0 0 lin
F T cp
%%Page: ? 10
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 52.667 FmM 1.32 0 78.02(storage servers to \336)FmTX
117.981 52.667 FmM 1.32 0 150.217(nd out what new stripes were written.)FmTX
36 63.667 FmM 0.998 0 232.134(Then it reconstructs the missing fragments as described in)FmTX
36 74.667 FmM 0.202 0 44.993(Section 6.2)FmTX
81.195 74.667 FmM 0.202 0 100.811( and writes them to disk. )FmTX
183.038 74.667 FmM 0.202 0 92.476(The prototype does not)FmTX
36 85.667 FmM 0 0 103.857(yet do this reconstruction.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 109.333 FmM 0 0 17.5(5.2)FmTX
64.8 109.333 FmM 0 0 122.459(Stripes vs. Metadata)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 130.667 FmM 1.663 0 23.606(The \336)FmTX
79.269 130.667 FmM 1.663 0 188.538(le manager must maintain consistency between)FmTX
36 141.667 FmM 0.25 0 128.569(the client logs and its metadata. )FmTX
165.89 141.667 FmM 0.25 0 6.108(T)FmTX
171.3 141.667 FmM 0.25 0 103.32(o to do this it must ensure)FmTX
36 152.667 FmM 0.6 0 233.523(that it has processed all of the deltas written by clients and)FmTX
36 163.667 FmM 0.745 0 131.89(updated its metadata accordingly)FmTX
169.475 163.667 FmM 0.745 0 104.409(. During normal operation)FmTX
36 174.667 FmM 0.855 0 20.276(the \336)FmTX
57.131 174.667 FmM 0.855 0 211.289(le manager keeps track of its current position in each)FmTX
36 185.666 FmM -0.145 0 25.54(client\325)FmTX
60.99 185.666 FmM -0.145 0 216.575(s log and at periodic intervals it forces the metadata to)FmTX
36 196.666 FmM 1.35 0 121.907(disk and writes a checkpoint \336)FmTX
164.657 196.666 FmM 1.35 0 106.062(le that contains the current)FmTX
36 207.666 FmM 1.043 0 136.616(positions. If a client crashes, the \336)FmTX
178.873 207.666 FmM 1.043 0 94.119(le manager checks with)FmTX
36 218.666 FmM 1.508 0 92.737(the storage servers to \336)FmTX
134.768 218.666 FmM 1.508 0 95.239(nd the end of the client\325)FmTX
236.998 218.666 FmM 1.508 0 36.106(s log and)FmTX
36 229.666 FmM 0.23 0 237.124(make sure it has processed all of the deltas in the log. If the)FmTX
36 240.666 FmM -0.005 0 5.559(\336)FmTX
41.559 240.666 FmM -0.005 0 234.614(le manager crashes, then when it reboots it processes all of)FmTX
36 251.666 FmM 1.243 0 227.693(the deltas that appear in the client logs after the positions)FmTX
36 262.666 FmM 0.408 0 236.858(stored in the last checkpoint, thereby bringing the metadata)FmTX
36 273.666 FmM 0.617 0 46.089(up-to-date. )FmTX
82.156 273.666 FmM 0.617 0 7.219(A)FmTX
88.826 273.666 FmM 0.617 0 182.976( checkpoint is relatively small \(a few hundred)FmTX
36 284.666 FmM 0.743 0 232.693(bytes\) since all it contains is current log positions for each)FmTX
36 295.666 FmM 1.26 0 228.777(client, but it does have a performance impact because the)FmTX
36 306.666 FmM 2.839 0 53.315(metadata is \337)FmTX
94.994 306.666 FmM 2.839 0 164.089(ushed before it is written. Decreasing the)FmTX
36 317.666 FmM 2.013 0 139.399(checkpoint interval improves the \336)FmTX
183.45 317.666 FmM 2.013 0 44.138(le manager)FmTX
229.969 317.666 FmM 2.013 0 3.328(\325)FmTX
232.748 317.666 FmM 2.013 0 41.36(s recovery)FmTX
36 328.666 FmM -0.144 0 241.56(time at the expense of normal operation; we anticipate that a)FmTX
36 339.666 FmM 2.318 0 221.577(checkpoint interval on the order of several minutes will)FmTX
36 350.666 FmM 4.43 0 193.535(provide acceptable recovery time without signi\336)FmTX
251.686 350.666 FmM 4.43 0 24.434(cantly)FmTX
36 361.666 FmM 0 0 7.766(af)FmTX
43.588 361.666 FmM 0 0 128.267(fecting the system performance.)FmTX
54 374.666 FmM -0.245 0 224.08(There are two complications in replaying deltas, both of)FmTX
36 385.666 FmM 6.401 0 161.89(which are solved with version numbers. )FmTX
236.118 385.666 FmM 6.401 0 23.606(The \336)FmTX
266.125 385.666 FmM 6.401 0 9.995(rst)FmTX
36 396.666 FmM 1.474 0 226.858(complication is that some of the deltas may have already)FmTX
36 407.666 FmM 3.277 0 178.254(been processed and applied to the metadata. )FmTX
237.013 407.666 FmM 3.277 0 35.83(This will)FmTX
36 418.666 FmM 1.046 0 60.259(happen if the \336)FmTX
99.397 418.666 FmM 1.046 0 170.447(le manager crashes after it writes metadata)FmTX
36 429.666 FmM 2.14 0 216.584(out to disk but before it writes a new checkpoint. If an)FmTX
36 440.666 FmM 1.556 0 227.671(update delta is encountered that has already been applied)FmTX
36 451.666 FmM 0.085 0 212.444(then its version number will be less than that of the \336)FmTX
249.38 451.666 FmM 0.085 0 26.655(le, and)FmTX
36 462.666 FmM 2.353 0 52.769(it is ignored. )FmTX
95.278 462.666 FmM 2.353 0 164.37(As in normal operation, a cleaner delta is)FmTX
36 473.666 FmM 3.754 0 199.119(applied only if its old block pointer matches the \336)FmTX
268.903 473.666 FmM 3.754 0 7.217(le)FmTX
36 484.666 FmM 0 0 34.421(manager)FmTX
70.79 484.666 FmM 0 0 3.328(\325)FmTX
73.568 484.666 FmM 0 0 90.239(s current block pointer)FmTX
163.258 484.666 FmM 0 0 2.5(.)FmTX
54 497.666 FmM 0.584 0 142.18(The second complication is that a \336)FmTX
199.682 497.666 FmM 0.584 0 74.688(le could have been)FmTX
36 508.666 FmM 0.709 0 26.116(modi\336)FmTX
62.116 508.666 FmM 0.709 0 66.355(ed by several dif)FmTX
130.418 508.666 FmM 0.709 0 142.158(ferent clients, resulting in deltas for)FmTX
36 519.666 FmM 0.566 0 20.276(the \336)FmTX
56.842 519.666 FmM 0.566 0 97.185(le in several client logs. )FmTX
156.681 519.666 FmM 0.566 0 23.606(The \336)FmTX
180.854 519.666 FmM 0.566 0 93.567(le manager must replay)FmTX
36 530.666 FmM 1.915 0 81.069(the deltas for each \336)FmTX
124.729 530.666 FmM 1.915 0 137.986(le in the same order that they were)FmTX
36 541.666 FmM 0.829 0 114.67(originally generated. If the \336)FmTX
153.985 541.666 FmM 0.829 0 118.821(le manager encounters a delta)FmTX
36 552.666 FmM 2.457 0 220.464(during replay whose version number is greater than the)FmTX
36 563.666 FmM 0.311 0 5.559(\336)FmTX
41.559 563.666 FmM 0.311 0 10.544(le\325)FmTX
51.554 563.666 FmM 0.311 0 68.867(s version number)FmTX
120.645 563.666 FmM 0.311 0 152.991(, it means that there are deltas in some)FmTX
36 574.666 FmM 0.776 0 156.895(other client log that must be replayed \336)FmTX
198.326 574.666 FmM 0.776 0 74.69(rst. In this case the)FmTX
36 585.666 FmM 0.354 0 5.559(\336)FmTX
41.559 585.666 FmM 0.354 0 231.025(le manager must delay the processing of the delta until all)FmTX
36 596.666 FmM 1.209 0 230.449(the intervening deltas have been processed from the other)FmTX
36 607.666 FmM 0 0 43.879(client logs.)FmTX
0 9 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 631.333 FmM 0 0 17.5(5.3)FmTX
64.8 631.333 FmM 0 0 112.352(Stripes vs. Cleaner)FmTX
176.903 631.333 FmM 0 0 33.814( State)FmTX
0 13 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 652.666 FmM 1.004 0 212.08(In order for the stripe cleaner to recover from a crash)FmTX
36 663.666 FmM 0.3 0 230.205(without completely reprocessing all of the stripes in the \336)FmTX
268.903 663.666 FmM 0.3 0 7.217(le)FmTX
36 674.666 FmM 1.04 0 230.762(system, it checkpoints its state to disk at regular intervals.)FmTX
36 685.666 FmM 2.585 0 216.851(The state includes the current utilizations for all of the)FmTX
36 696.666 FmM -0.121 0 218.284(stripes plus a position in each client log, which identi\336)FmTX
253.196 696.666 FmM -0.121 0 23.044(es the)FmTX
36 707.666 FmM 0.293 0 161.028(last delta processed by the stripe cleaner)FmTX
198.235 707.666 FmM 0.293 0 5(. )FmTX
202.978 707.666 FmM 0.293 0 33.047(Any buf)FmTX
236.14 707.666 FmM 0.293 0 39.688(fered data)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 52.667 FmM 0 0 59.143(for the stripe \336)FmTX
359.023 52.667 FmM 0 0 33.87(les are \337)FmTX
392.893 52.667 FmM 0 0 146.331(ushed before writing the checkpoint.)FmTX
317.88 65.667 FmM 0.032 0 221.804(When the stripe cleaner restarts after a crash, it reads in)FmTX
299.88 76.667 FmM 2.723 0 221.062(the utilizations and log positions, then starts processing)FmTX
299.88 87.667 FmM -0.231 0 242.661(deltas again at the saved log positions. If a crash occurs after)FmTX
299.88 98.667 FmM 0.075 0 142.739(appending deltas to a stripe status \336)FmTX
443.072 98.667 FmM 0.075 0 96.626(le but before writing the)FmTX
299.88 109.667 FmM 2.735 0 133.855(next checkpoint, then the status \336)FmTX
447.411 109.667 FmM 2.735 0 81.648(le could end up with)FmTX
299.88 120.667 FmM 0.363 0 129.951(duplicate copies of some deltas. )FmTX
431.469 120.667 FmM 0.363 0 107.441(These duplicates are easily)FmTX
299.88 131.667 FmM 0 0 204.907(weeded out when the cleaner processes the status \336)FmTX
504.787 131.667 FmM 0 0 13.606(les.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 160.333 FmM 0 0 7(6)FmTX
321.48 160.333 FmM 0 0 10.107(A)FmTX
330.551 160.333 FmM 0 0 59.89(vailability)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 181.667 FmM 2.108 0 201.035(Our goal for Zebra is for the system to continue to)FmTX
299.88 192.666 FmM 0.581 0 234.888(provide service even if some of its machines have crashed.)FmTX
299.88 203.666 FmM 0.604 0 7.219(A)FmTX
306.55 203.666 FmM 0.604 0 156.294( single failure of either a storage server)FmTX
466.672 203.666 FmM 0.604 0 25.276(, the \336)FmTX
493.156 203.666 FmM 0.604 0 44.138(le manager)FmTX
537.5 203.666 FmM 0.604 0 2.5(,)FmTX
299.88 214.666 FmM 4.193 0 206.58(or the stripe cleaner should not prevent clients from)FmTX
299.88 225.666 FmM 0.339 0 46.37(accessing \336)FmTX
346.589 225.666 FmM 0.339 0 191.035(les, neither should any number of client failures)FmTX
299.88 236.666 FmM -0.054 0 7.766(af)FmTX
307.468 236.666 FmM -0.054 0 232.966(fect the remaining clients. Each of the system components)FmTX
299.88 247.666 FmM 0.302 0 177.161(is discussed separately in the sections below)FmTX
478.204 247.666 FmM 0.302 0 5(. )FmTX
483.328 247.666 FmM 0.302 0 56.37(The prototype)FmTX
299.88 258.666 FmM 0 0 214.641(does not yet implement all of these features, as noted.)FmTX
0 9 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 282.333 FmM 0 0 17.5(6.1)FmTX
328.68 282.333 FmM 0 0 88.249(Client Crashes)FmTX
0 13 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 303.666 FmM 0.832 0 214.634(The only way that one client can prevent other clients)FmTX
299.88 314.666 FmM 4.117 0 68.303(from accessing \336)FmTX
376.416 314.666 FmM 4.117 0 143(les is through the cache consistency)FmTX
299.88 325.666 FmM 1.257 0 107.183(protocol: if a client has a \336)FmTX
414.605 325.666 FmM 1.257 0 119.109(le open and cached then other)FmTX
299.88 336.666 FmM 6.438 0 29.429(clients\325)FmTX
328.569 336.666 FmM 6.438 0 61.086( access to the \336)FmTX
415.407 336.666 FmM 6.438 0 98.84(le is restricted to prevent)FmTX
299.88 347.666 FmM 0.619 0 65.535(inconsistencies. )FmTX
365.484 347.666 FmM 0.619 0 99.111(After a client crash the \336)FmTX
467.69 347.666 FmM 0.619 0 71.072(le manager closes)FmTX
299.88 358.666 FmM -0.148 0 54.709(all the open \336)FmTX
354.146 358.666 FmM -0.148 0 153.86(les on the client, thus allowing those \336)FmTX
506.972 358.666 FmM -0.148 0 33.323(les to be)FmTX
299.88 369.666 FmM 0 0 94.399(cached by other clients.)FmTX
0 15 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 393.333 FmM 0 0 17.5(6.2)FmTX
328.68 393.333 FmM 0 0 103.793(Storage Manager)FmTX
432.224 393.333 FmM 0 0 51.707( Crashes)FmTX
0 19 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 414.666 FmM 3.449 0 26.641(Zebra\325)FmTX
343.971 414.666 FmM 3.449 0 171.885(s parity mechanism allows it to tolerate the)FmTX
299.88 425.666 FmM 0.178 0 238.516(failure of a single storage server using algorithms similar to)FmTX
299.88 436.666 FmM 2.463 0 168.262(those described for RAIDs [Patterson88]. )FmTX
480.281 436.666 FmM 2.463 0 6.108(T)FmTX
485.691 436.666 FmM 2.463 0 39.702(o read a \336)FmTX
532.783 436.666 FmM 2.463 0 7.217(le)FmTX
299.88 447.666 FmM -0.116 0 241.284(while a storage server is down, a client must reconstruct any)FmTX
299.88 458.666 FmM 0.677 0 202.134(stripe fragment that was stored on the down server)FmTX
506.881 458.666 FmM 0.677 0 5(. )FmTX
512.38 458.666 FmM 0.677 0 26.943(This is)FmTX
299.88 469.666 FmM 0.853 0 231.592(done by computing the parity of all the other fragments in)FmTX
299.88 480.666 FmM 1.198 0 203.267(the same stripe; the result is the missing fragment. )FmTX
513.747 480.666 FmM 1.198 0 9.438(W)FmTX
522.788 480.666 FmM 1.198 0 17.212(rites)FmTX
299.88 491.666 FmM 2.805 0 217.681(intended for the down server are simply discarded; the)FmTX
299.88 502.666 FmM 1.173 0 230.735(storage manager will reconstruct them when it reboots, as)FmTX
299.88 513.666 FmM -0.13 0 51.089(described in )FmTX
350.71 513.666 FmM -0.13 0 44.993(Section 5.1)FmTX
395.573 513.666 FmM -0.13 0 145.205(. In the prototype clients are capable)FmTX
299.88 524.666 FmM 0.023 0 239.934(of reconstruction, but only under manual control. Clients do)FmTX
299.88 535.666 FmM 1.184 0 231.831(not yet automatically reconstruct fragments when a server)FmTX
299.88 546.666 FmM 0 0 31.921(crashes.)FmTX
317.88 559.666 FmM 1.696 0 26.931(For lar)FmTX
346.329 559.666 FmM 1.696 0 185.19(ge sequential reads reconstruction is relatively)FmTX
299.88 570.666 FmM 3.014 0 216.006(inexpensive: all the fragments of the stripe are needed)FmTX
299.88 581.666 FmM 0.124 0 31.096(anyway)FmTX
330.327 581.666 FmM 0.124 0 208.555(, so the only additional cost is the parity calculation.)FmTX
299.88 592.666 FmM 0.166 0 238.789(For small reads reconstruction is expensive since it requires)FmTX
299.88 603.666 FmM 0.828 0 231.836(reading all the other fragments in the stripe. If small reads)FmTX
299.88 614.666 FmM 2.294 0 224.063(are distributed uniformly across the storage servers then)FmTX
299.88 625.666 FmM 0 0 197.676(reconstruction doubles the average cost of a read.)FmTX
0 21 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 649.333 FmM 0 0 17.5(6.3)FmTX
328.68 649.333 FmM 0 0 80.469(File Manager)FmTX
408.9 649.333 FmM 0 0 51.707( Crashes)FmTX
0 25 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 670.666 FmM 1.947 0 23.606(The \336)FmTX
343.433 670.666 FmM 1.947 0 180.994(le manager is a critical resource for the entire)FmTX
299.88 681.666 FmM -0.117 0 153.555(system because it manages all of the \336)FmTX
452.616 681.666 FmM -0.117 0 87.734(le system metadata. If)FmTX
299.88 692.666 FmM 0.651 0 190.771(the metadata is stored non-redundantly on the \336)FmTX
495.21 692.666 FmM 0.651 0 44.138(le manager)FmTX
299.88 703.666 FmM 2.583 0 39.993(then the \336)FmTX
345.038 703.666 FmM 2.583 0 169.666(le system will be unusable whenever the \336)FmTX
532.783 703.666 FmM 2.583 0 7.217(le)FmTX
0 0 gm
0 gr
0 0 lin
F T cp
%%Page: ? 11
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 52.667 FmM 0.009 0 151.624(manager is down and the loss of the \336)FmTX
187.696 52.667 FmM 0.009 0 44.138(le manager)FmTX
232.212 52.667 FmM 0.009 0 3.328(\325)FmTX
234.991 52.667 FmM 0.009 0 41.111(s disk will)FmTX
36 63.667 FmM 0.502 0 52.209(destroy the \336)FmTX
89.214 63.667 FmM 0.502 0 42.49(le system. )FmTX
132.53 63.667 FmM 0.502 0 9.438(W)FmTX
141.17 63.667 FmM 0.502 0 132.439(e believe that these problems can)FmTX
36 74.667 FmM -0.033 0 240.454(be eliminated by using the Zebra storage servers to store the)FmTX
36 85.667 FmM 1.186 0 5.559(\336)FmTX
41.559 85.667 FmM 1.186 0 44.138(le manager)FmTX
87.252 85.667 FmM 1.186 0 3.328(\325)FmTX
90.03 85.667 FmM 1.186 0 176.602(s metadata. Instead of using a local disk, the)FmTX
36 96.667 FmM 5.65 0 5.559(\336)FmTX
41.559 96.667 FmM 5.65 0 189.36(le manager writes the metadata to a virtual disk)FmTX
36 107.667 FmM 0.385 0 97.715(represented as a Zebra \336)FmTX
135.254 107.667 FmM 0.385 0 138.557(le. Updates to the metadata will be)FmTX
36 118.667 FmM 0.819 0 56.931(added to the \336)FmTX
95.388 118.667 FmM 0.819 0 44.138(le manager)FmTX
140.713 118.667 FmM 0.819 0 3.328(\325)FmTX
143.491 118.667 FmM 0.819 0 126.897(s client log as part of the virtual)FmTX
36 129.667 FmM 1.022 0 24.727(disk \336)FmTX
61.748 129.667 FmM 1.022 0 204.348(le and striped across the storage servers with parity)FmTX
273.62 129.667 FmM 1.022 0 2.5(,)FmTX
36 140.667 FmM 4.941 0 105.796(just like any other Zebra \336)FmTX
166.503 140.667 FmM 4.941 0 12.217(le. )FmTX
183.483 140.667 FmM 4.941 0 82.754(This provides higher)FmTX
36 151.667 FmM 0.106 0 239.063(performance for the metadata than storing it on a local disk,)FmTX
36 162.667 FmM 4.667 0 185.505(and also improves its availability and integrity)FmTX
248.856 162.667 FmM 4.667 0 5(. )FmTX
258.344 162.667 FmM 4.667 0 17.776(This)FmTX
36 173.666 FmM 3.757 0 106.628(approach also allows the \336)FmTX
157.654 173.666 FmM 3.757 0 99.683(le manager to run on any)FmTX
36 184.666 FmM 0.782 0 156.887(machine in the network, since it doesn\325)FmTX
197.402 184.666 FmM 0.782 0 76.372(t depend on having)FmTX
36 195.666 FmM 0.512 0 118.281(local access to a disk. If the \336)FmTX
157.869 195.666 FmM 0.512 0 44.138(le manager)FmTX
202.888 195.666 FmM 0.512 0 3.328(\325)FmTX
205.666 195.666 FmM 0.512 0 69.429(s machine should)FmTX
36 206.666 FmM 2.341 0 64.697(break then the \336)FmTX
107.721 206.666 FmM 2.341 0 154.353(le manager can be restarted on another)FmTX
36 217.666 FmM 0.922 0 111.895(machine. Of course, if the \336)FmTX
152.505 217.666 FmM 0.922 0 119.927(le manager crashes Zebra will)FmTX
36 228.666 FmM 0.886 0 101.638(be unavailable until the \336)FmTX
141.182 228.666 FmM 0.886 0 130.508(le manager restarts, but it should)FmTX
36 239.666 FmM 0 0 105.244(be possible to restart the \336)FmTX
141.244 239.666 FmM 0 0 126.602(le manager quickly [Baker92a].)FmTX
54 252.666 FmM 5.228 0 9.438(W)FmTX
62.64 252.666 FmM 5.228 0 176.885(e have not yet implemented this approach to)FmTX
36 263.666 FmM 1.812 0 64.438(improving the \336)FmTX
104.062 263.666 FmM 1.812 0 44.138(le manager)FmTX
150.381 263.666 FmM 1.812 0 3.328(\325)FmTX
153.159 263.666 FmM 1.812 0 104.692(s availability and integrity)FmTX
262.638 263.666 FmM 1.812 0 5(. )FmTX
268.901 263.666 FmM 1.812 0 7.219(A)FmTX
36 274.666 FmM 1.208 0 230.459(similar approach has been proposed by Cabrera and Long)FmTX
36 285.666 FmM 0.364 0 58.594(for the Swift \336)FmTX
95.684 285.666 FmM 0.364 0 178.254(le system [Cabrera91] for making its storage)FmTX
36 296.666 FmM 0 0 104.685(mediator highly available.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 320.333 FmM 0 0 17.5(6.4)FmTX
64.8 320.333 FmM 0 0 87.462(Stripe Cleaner)FmTX
152.013 320.333 FmM 0 0 51.707( Crashes)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 341.666 FmM 2.918 0 198.774(Crashes of the stripe cleaner are relatively easy to)FmTX
36 352.666 FmM 0.68 0 31.655(handle. )FmTX
68.157 352.666 FmM 0.68 0 201.846(The stripe cleaner need not be running in order for)FmTX
36 363.666 FmM 0.048 0 239.597(Zebra to provide service; all that is needed is for the cleaner)FmTX
36 374.666 FmM 1.383 0 163.811(to restart before disk space is exhausted. )FmTX
208.94 374.666 FmM 1.383 0 63.032(All of the stripe)FmTX
36 385.666 FmM 1.248 0 28.86(cleaner)FmTX
65.229 385.666 FmM 1.248 0 3.328(\325)FmTX
68.007 385.666 FmM 1.248 0 119.68(s state is stored in the Zebra \336)FmTX
196.425 385.666 FmM 1.248 0 74.702(le system, so if the)FmTX
36 396.666 FmM 0.918 0 53.572(stripe cleaner)FmTX
90.858 396.666 FmM 0.918 0 3.328(\325)FmTX
93.637 396.666 FmM 0.918 0 178.811(s machine becomes permanently unavailable)FmTX
36 407.666 FmM 0 0 166.565(the stripe cleaner can be restarted on a dif)FmTX
202.387 407.666 FmM 0 0 62.183(ferent machine.)FmTX
0 9 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 436.333 FmM 0 0 7(7)FmTX
57.6 436.333 FmM 0 0 14.766(Pr)FmTX
72.116 436.333 FmM 0 0 192.428(ototype Status and Performance)FmTX
0 13 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 457.666 FmM 1.782 0 209.646(The implementation of the Zebra prototype began in)FmTX
36 468.666 FmM 1.656 0 48.604(April 1992. )FmTX
87.365 468.666 FmM 1.656 0 24.436(As of )FmTX
114.563 468.666 FmM 1.656 0 151.624(August 1993 Zebra supports all of the)FmTX
36 479.666 FmM 1.485 0 56.65(usual UNIX \336)FmTX
95.62 479.666 FmM 1.485 0 171.589(le operations, the cleaner is functional, and)FmTX
36 490.666 FmM 0.85 0 202.676(clients can write parity and reconstruct fragments. )FmTX
244.447 490.666 FmM 0.85 0 23.606(The \336)FmTX
268.903 490.666 FmM 0.85 0 7.217(le)FmTX
36 501.666 FmM 1.697 0 226.548(manager and cleaner both checkpoint their states and are)FmTX
36 512.666 FmM 1.236 0 120.742(able to recover after a failure. )FmTX
163.982 512.666 FmM 1.236 0 107.192(The prototype does not yet)FmTX
36 523.666 FmM -0.039 0 240.435(implement all of the crash recovery and availability features)FmTX
36 534.666 FmM 1.483 0 73.564(of Zebra, however)FmTX
111.982 534.666 FmM 1.483 0 5(. )FmTX
118.287 534.666 FmM 1.483 0 147.449(The metadata is not yet stored on the)FmTX
36 545.666 FmM 1.35 0 124.099(storage servers as described in )FmTX
166.848 545.666 FmM 1.35 0 44.993(Section 6.3)FmTX
213.191 545.666 FmM 1.35 0 58.879(, clients do not)FmTX
36 556.666 FmM 1.52 0 230.999(automatically reconstruct stripe fragments when a storage)FmTX
36 567.666 FmM 1.541 0 229.333(server crashes, storage servers do not reconstruct missing)FmTX
36 578.666 FmM 2.311 0 133.535(fragments after a crash, and the \336)FmTX
183.399 578.666 FmM 2.311 0 85.789(le manager and stripe)FmTX
36 589.666 FmM 0.808 0 157.683(cleaner are not automatically restarted. )FmTX
197.547 589.666 FmM 0.808 0 9.438(W)FmTX
206.187 589.666 FmM 0.808 0 58.877(e have simpli\336)FmTX
266.681 589.666 FmM 0.808 0 9.438(ed)FmTX
36 600.666 FmM 0.925 0 232.72(the prototype by choosing not to implement name caching)FmTX
36 611.666 FmM 0 0 158.53(or support for concurrent write-sharing.)FmTX
54 624.666 FmM 3.21 0 199.651(The rest of this section contains some preliminary)FmTX
36 635.666 FmM 1.595 0 215.181(performance measurements made with the prototype. )FmTX
260.573 635.666 FmM 1.595 0 15.547(The)FmTX
36 646.666 FmM 2.459 0 220.449(measurements show that Zebra provides a factor of 4-5)FmTX
36 657.666 FmM 3.745 0 137.18(improvement in throughput for lar)FmTX
187.983 657.666 FmM 3.745 0 76.902(ge reads and writes)FmTX
36 668.666 FmM 0.674 0 146.34(relative to either NFS or the Sprite \336)FmTX
187.056 668.666 FmM 0.674 0 86.37(le system, but its lack)FmTX
36 679.666 FmM 2.646 0 216.306(of name caching prevents it from providing much of a)FmTX
36 690.666 FmM 1.367 0 139.924(performance advantage for small \336)FmTX
181.393 690.666 FmM 1.367 0 16.106(les. )FmTX
198.688 690.666 FmM 1.367 0 9.438(W)FmTX
207.328 690.666 FmM 1.367 0 64.69(e estimate that a)FmTX
36 701.666 FmM 4.194 0 210.759(Zebra system with name caching would also provide)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 52.667 FmM 0 0 223.24(substantial performance improvements for small writes.)FmTX
317.88 65.667 FmM -0.21 0 223.799(For our measurements we used a cluster of DECstation-)FmTX
299.88 76.667 FmM 1.064 0 231.606(5000 Model 200 workstations connected by an FDDI ring)FmTX
299.88 87.667 FmM 0.07 0 170.801(\(maximum bandwidth 100 Mbits/second\). )FmTX
470.784 87.667 FmM 0.07 0 69.146(The workstations)FmTX
299.88 98.667 FmM -0.191 0 241.838(are rated at about 20 integer SPECmarks and each contained)FmTX
299.88 109.667 FmM 2.64 0 89.146(32 Mbytes of memory)FmTX
396.296 109.667 FmM 2.64 0 130.505(. In our benchmarks the memory)FmTX
299.88 120.667 FmM 2.459 0 217.993(bandwidth is at least as important as CPU speed; these)FmTX
299.88 131.667 FmM 0.197 0 102.458(workstations can copy lar)FmTX
402.753 131.667 FmM 0.197 0 136.062(ge blocks of data from memory to)FmTX
299.88 142.667 FmM 1.162 0 229.658(memory at about 12 Mbytes/second but copies to or from)FmTX
299.88 153.667 FmM 1.782 0 224.082(disk controllers and FDDI interfaces run at only about 8)FmTX
299.88 164.667 FmM 2.966 0 219.355(Mbytes/second. Each storage server is equipped with a)FmTX
299.88 175.666 FmM 0.901 0 230.212(single RZ57 disk with a capacity of about 1 Gbyte and an)FmTX
299.88 186.666 FmM 0.364 0 114.116(average seek time of 15 ms. )FmTX
416.002 186.666 FmM 0.364 0 84.675(The disks transfer lar)FmTX
501.591 186.666 FmM 0.364 0 38.044(ge blocks)FmTX
299.88 197.666 FmM 1.823 0 221.895(of data at about 2 Mbytes/second, but the SCSI bus and)FmTX
299.88 208.666 FmM 0 0 213.552(controller can only sustain about 1.6 Mbytes/second. )FmTX
317.88 221.666 FmM 3.153 0 9.438(W)FmTX
326.52 221.666 FmM 3.153 0 188.254(e had a total of eight workstations available for)FmTX
299.88 232.666 FmM 0.477 0 110.518(running these experiments. )FmTX
411.651 232.666 FmM 0.477 0 79.436(The minimum con\336)FmTX
492.042 232.666 FmM 0.477 0 47.48(guration we)FmTX
299.88 243.666 FmM 1.211 0 193.245(tested consisted of one client, one storage server)FmTX
501.201 243.666 FmM 1.211 0 36.377(, and one)FmTX
299.88 254.666 FmM 2.807 0 5.559(\336)FmTX
305.439 254.666 FmM 2.807 0 44.138(le manager)FmTX
351.835 254.666 FmM 2.807 0 93.594(. In the maximum con\336)FmTX
456.657 254.666 FmM 2.807 0 77.729(guration there were)FmTX
299.88 265.666 FmM 2.459 0 174.358(three clients, four storage servers and one \336)FmTX
491.452 265.666 FmM 2.459 0 44.138(le manager)FmTX
537.5 265.666 FmM 2.459 0 2.5(.)FmTX
299.88 276.666 FmM 0.444 0 125.513(During the measurements the \336)FmTX
427.169 276.666 FmM 0.444 0 111.055(le manager did not generate)FmTX
299.88 287.666 FmM 0.931 0 232.671(checkpoints, nor was the stripe cleaner running. Each data)FmTX
299.88 298.666 FmM 0.176 0 238.538(point was collected by running the benchmark 10 times and)FmTX
299.88 309.666 FmM 0 0 85.239(averaging the results.)FmTX
317.88 322.666 FmM 2.259 0 206.304(For comparison we also measured a standard Sprite)FmTX
299.88 333.666 FmM 1.309 0 19.998(con\336)FmTX
319.878 333.666 FmM 1.309 0 132.195(guration and an Ultrix/NFS con\336)FmTX
457.309 333.666 FmM 1.309 0 38.323(guration. )FmTX
496.762 333.666 FmM 1.309 0 41.929(The Sprite)FmTX
299.88 344.666 FmM -0.133 0 241.318(system used the normal Sprite network protocols with a log-)FmTX
299.88 355.666 FmM 3.393 0 48.037(structured \336)FmTX
351.31 355.666 FmM 3.393 0 150.496(le system as the disk storage manager)FmTX
521.612 355.666 FmM 3.393 0 14.995(. Its)FmTX
299.88 366.666 FmM 1.68 0 187.117(hardware was the same as that used for Zebra. )FmTX
501.936 366.666 FmM 1.68 0 36.384(The NFS)FmTX
299.88 377.666 FmM 0.926 0 19.998(con\336)FmTX
319.878 377.666 FmM 0.926 0 212.712(guration had a slightly faster server CPU and slightly)FmTX
299.88 388.666 FmM 6.561 0 50.256(faster disks. )FmTX
363.081 388.666 FmM 6.561 0 144.111(The NFS server included a 1-Mbyte)FmTX
299.88 399.666 FmM 0 0 97.444(PrestoServe card for buf)FmTX
397.146 399.666 FmM 0 0 72.471(fering disk writes.)FmTX
317.88 412.666 FmM 2.099 0 23.606(The \336)FmTX
343.585 412.666 FmM 2.099 0 183.818(rst benchmark consisted of an application that)FmTX
299.88 423.666 FmM 0.261 0 91.064(writes a single very lar)FmTX
391.809 423.666 FmM 0.261 0 17.498(ge \336)FmTX
409.568 423.666 FmM 0.261 0 129.128(le \(12 Mbytes\) and then invokes)FmTX
0 3 gm
bu fc
2 F /|______Courier fnt
bn
( )show
299.88 434.666 FmM 5.935 0 30(fsync)FmTX
0 9 gm
bu fc
2 F /|______Times-Roman fnt
bn
( )show
329.88 434.666 FmM 2.968 0 54( to force the f)FmTX
395.203 434.666 FmM 2.968 0 46(ile to disk. )FmTX
449.928 434.666 FmM 2.968 0 9(W)FmTX
458.129 434.666 FmM 2.968 0 70(e ran one or more)FmTX
299.88 445.666 FmM 3.826 0 137.458(instances of this application on dif)FmTX
456.292 445.666 FmM 3.826 0 76.055(ferent clients \(each)FmTX
299.88 456.666 FmM 1.821 0 49.426(writing a dif)FmTX
352.769 456.666 FmM 1.821 0 31.37(ferent \336)FmTX
385.96 456.666 FmM 1.821 0 144.937(le\) with varying numbers of servers,)FmTX
299.88 467.666 FmM 2.869 0 217.166(and computed the total throughput of the system \(total)FmTX
299.88 478.666 FmM 1.472 0 226.873(number of bytes written by all clients divided by elapsed)FmTX
299.88 489.666 FmM 0 0 26.101(time\). )FmTX
325.981 489.666 FmM 0 0 33.604(Figure 6)FmTX
359.585 489.666 FmM 0 0 74.973( graphs the results.)FmTX
317.88 502.666 FmM 2.45 0 142.717(Even with a single client and server)FmTX
474.902 502.666 FmM 2.45 0 57.747(, Zebra runs at)FmTX
299.88 513.666 FmM 2.787 0 185.488(about twice the speed of either NFS or Sprite. )FmTX
510.27 513.666 FmM 2.787 0 26.943(This is)FmTX
299.88 524.666 FmM 0.534 0 90.217(because Zebra uses lar)FmTX
391.52 524.666 FmM 0.534 0 145.811(ge blocks and its asynchronous RPC)FmTX
299.88 535.666 FmM 0.616 0 235.195(allows it to overlap disk operations with network transfers.)FmTX
299.88 546.666 FmM 0.788 0 173.262(The limiting factor in this case is the server)FmTX
479.815 546.666 FmM 0.788 0 3.328(\325)FmTX
482.594 546.666 FmM 0.788 0 55.83(s disk system,)FmTX
299.88 557.666 FmM 1.41 0 216.873(which can only write data at about 1.1 Mbyte/second. )FmTX
528.891 557.666 FmM 1.41 0 11.108(As)FmTX
299.88 568.666 FmM 5.946 0 195.156(servers are added in the single-client case Zebra\325)FmTX
536.111 568.666 FmM 5.946 0 3.889(s)FmTX
299.88 579.666 FmM 1.885 0 221.27(performance increases by more than a factor of 2 to 2.4)FmTX
299.88 590.666 FmM -0.023 0 135.781(Mbytes/second with four servers. )FmTX
435.39 590.666 FmM -0.023 0 104.68(The non-linear speedup in)FmTX
299.88 601.666 FmM 0.302 0 33.604(Figure 6)FmTX
333.785 601.666 FmM 0.302 0 203.801( occurs because the benchmark runs in two phases:)FmTX
299.88 612.666 FmM 0.576 0 30.554(in the \336)FmTX
331.586 612.666 FmM 0.576 0 104.966(rst phase the application \336)FmTX
438.854 612.666 FmM 0.576 0 54.973(lls the kernel\325)FmTX
494.43 612.666 FmM 0.576 0 11.948(s \336)FmTX
506.954 612.666 FmM 0.576 0 32.471(le cache)FmTX
299.88 623.666 FmM 2.268 0 64.158(by writing the \336)FmTX
370.843 623.666 FmM 2.268 0 149.939(le, and in the second phase the client\325)FmTX
536.111 623.666 FmM 2.268 0 3.889(s)FmTX
299.88 634.666 FmM -0.098 0 33.042(kernel \337)FmTX
332.824 634.666 FmM -0.098 0 207.957(ushes its cache by transferring stripes to the servers.)FmTX
299.88 645.666 FmM 0.302 0 237.4(These phases are not overlapped and only the second phase)FmTX
299.88 656.666 FmM -0.18 0 24.436(bene\336)FmTX
324.316 656.666 FmM -0.18 0 138.274(ts from additional storage servers. )FmTX
461.514 656.666 FmM -0.18 0 78.845(When we measured)FmTX
299.88 667.666 FmM 0.362 0 236.858(the second phase alone we found that the throughput scales)FmTX
299.88 678.666 FmM 0.964 0 232.41(nearly linearly from 1.1 Mbytes/second with one server to)FmTX
299.88 689.666 FmM 2.177 0 222.708(3.8 Mbytes/second with four servers, at which point the)FmTX
299.88 700.666 FmM 0.828 0 25.54(client\325)FmTX
324.87 700.666 FmM 0.828 0 209.333(s FDDI interface saturates. Performance with two or)FmTX
0 0 gm
0 gr
0 0 lin
F T cp
%%Page: ? 12
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 286.667 FmM 1.159 0 228.528(more clients is limited entirely by the servers, so it scales)FmTX
36 297.667 FmM 0 0 142.715(linearly with the number of servers.)FmTX
54 310.667 FmM 1.014 0 33.604(Figure 6)FmTX
88.617 310.667 FmM 1.014 0 179.395( also shows the throughput for a single client)FmTX
36 321.667 FmM 3.427 0 212.703(when it generates and writes parity; the throughput is)FmTX
36 332.667 FmM 1.267 0 119.121(measured in terms of useful \336)FmTX
161.455 332.667 FmM 1.267 0 107.747(le data not including parity)FmTX
273.62 332.667 FmM 1.267 0 2.5(.)FmTX
36 343.667 FmM 1.044 0 230.725(Zebra incurs almost no overhead for parity aside from the)FmTX
36 354.667 FmM 0.827 0 232.681(obvious overhead of writing more data to more servers. In)FmTX
36 365.667 FmM 0.04 0 239.758(the best case Zebra\'s throughput with two servers and parity)FmTX
36 376.667 FmM -0.159 0 241.87(should be the same as the throughput with one server and no)FmTX
36 387.667 FmM 0.373 0 23.323(parity)FmTX
58.673 387.667 FmM 0.373 0 212.971(, since it is writing one byte of parity for each byte of)FmTX
36 398.667 FmM 0.741 0 99.944(data; the performance in )FmTX
138.909 398.667 FmM 0.741 0 33.604(Figure 6)FmTX
173.253 398.667 FmM 0.741 0 99.16( is only slightly less than)FmTX
36 409.666 FmM 0.022 0 47.207(this. Ideally)FmTX
82.579 409.666 FmM 0.022 0 193.389(, Zebra\'s throughput with four servers and parity)FmTX
36 420.666 FmM 0.132 0 238.804(should be the same as the throughput with three servers and)FmTX
36 431.666 FmM 0.027 0 35.823(no parity)FmTX
71.2 431.666 FmM 0.027 0 204.651(. In reality it is somewhat less than this because the)FmTX
36 442.666 FmM 0 0 225.203(client CPU is saturated in the former but not in the latter)FmTX
260.653 442.666 FmM 0 0 2.5(.)FmTX
54 455.666 FmM 1.887 0 33.604(Figure 7)FmTX
89.491 455.666 FmM 1.887 0 56.638( shows Zebra\325)FmTX
149.354 455.666 FmM 1.887 0 109.956(s throughput for reading lar)FmTX
266.681 455.666 FmM 1.887 0 9.438(ge)FmTX
36 466.666 FmM 2.565 0 5.559(\336)FmTX
41.559 466.666 FmM 2.565 0 42.747(les. Zebra\325)FmTX
86.321 466.666 FmM 2.565 0 171.843(s performance for reading is better than for)FmTX
36 477.666 FmM 0.08 0 239.319(writing because the servers can read data from their disks at)FmTX
36 488.666 FmM -0.147 0 188.298(the full SCSI bandwidth of 1.6 Mbytes/second )FmTX
223.093 488.666 FmM -0.147 0 53.32(Thus a single)FmTX
36 499.666 FmM 1.66 0 73.291(client can read a \336)FmTX
115.931 499.666 FmM 1.66 0 150.229(le at 1.6 Mbytes/second from a single)FmTX
36 510.666 FmM -0.159 0 24.421(server)FmTX
60.023 510.666 FmM -0.159 0 217.686(, and three clients can achieve a total bandwidth of 5.2)FmTX
36 521.666 FmM -0.103 0 135.781(Mbytes/second with four servers. )FmTX
171.189 521.666 FmM -0.103 0 6.108(T)FmTX
176.599 521.666 FmM -0.103 0 99.934(wo servers can saturate a)FmTX
36 532.666 FmM 2.02 0 88.02(single client, however)FmTX
127.661 532.666 FmM 2.02 0 136.34(, causing the single client curve in)FmTX
36 543.666 FmM 0.059 0 33.604(Figure 7)FmTX
69.662 543.666 FmM 0.059 0 43.04( to level of)FmTX
112.699 543.666 FmM 0.059 0 96.084(f at 2.8 Mbytes/second. )FmTX
208.468 543.666 FmM 0.059 0 67.476(At that speed the)FmTX
36 554.666 FmM 0.074 0 239.38(client is spending most of its time copying data between the)FmTX
36 565.666 FmM 0.848 0 69.705(application, the \336)FmTX
107.401 565.666 FmM 0.848 0 106.89(le cache, and the network. )FmTX
218.353 565.666 FmM 0.848 0 56.919(This overhead)FmTX
36 576.666 FmM 3.16 0 95.803(could be reduced signi\336)FmTX
141.284 576.666 FmM 3.16 0 122.195(cantly by modifying the Sprite)FmTX
36 587.666 FmM 3.359 0 132.424(kernel to use the FDDI interface\325)FmTX
184.669 587.666 FmM 3.359 0 29.717(s DMA)FmTX
217.195 587.666 FmM 3.359 0 52.207( capability to)FmTX
36 598.666 FmM 2.926 0 212.419(transfer incoming network packets directly into the \336)FmTX
268.903 598.666 FmM 2.926 0 7.217(le)FmTX
36 609.666 FmM 0 0 204.341(cache, rather than into an intermediate network buf)FmTX
240.163 609.666 FmM 0 0 11.094(fer)FmTX
250.707 609.666 FmM 0 0 2.5(.)FmTX
54 622.666 FmM 0.281 0 220.151(The performance of reads that require reconstruction is)FmTX
36 633.666 FmM 0.726 0 185.198(shown in the line labeled \3221 client \(recon\)\323 in )FmTX
227.736 633.666 FmM 0.726 0 33.604(Figure 7)FmTX
262.066 633.666 FmM 0.726 0 13.328(. In)FmTX
36 644.666 FmM 0.633 0 233.787(this test one of the storage servers was unavailable and the)FmTX
36 655.666 FmM 0.302 0 237.402(client had to reconstruct any stripe fragments stored on that)FmTX
36 666.666 FmM 1.135 0 228.772(server by reading all of the other fragments in each stripe)FmTX
36 677.666 FmM 0.073 0 106.357(and computing their parity)FmTX
141.927 677.666 FmM 0.073 0 5(. )FmTX
146.822 677.666 FmM 0.073 0 9.438(W)FmTX
155.862 677.666 FmM 0.073 0 119.966(ith two servers the throughput)FmTX
36 688.666 FmM 1.757 0 226.062(during reconstruction is only slightly less than in normal)FmTX
36 699.666 FmM 0.133 0 238.794(operation with a single server; this is because a parity block)FmTX
0 0 gm
0 gr
0 0 lin
(36 46 276.12 712)FmKp
(36 46 275.76 280)FmKp
(nc 46 36 280 276 6 rc)kp
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
9 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
57.24 223.576 FmM 3.468 0 21.496(Figur)FmTX
78.575 223.576 FmM 3.468 0 10.745(e 6)FmTX
0 2 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
92.788 223.576 FmM 3.468 0 4.5(. )FmTX
0 5 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
100.596 223.576 FmM 3.468 0 6.003(T)FmTX
105.773 223.576 FmM 3.468 0 56.973(otal system thr)FmTX
169.521 223.576 FmM 3.468 0 45.747(oughput for)FmTX
218.576 223.576 FmM 3.468 0 28.993( large \336)FmTX
254.505 223.576 FmM 3.468 0 6.495(le)FmTX
57.24 232.576 FmM 0.54 0 23.482(writes)FmTX
0 7 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
80.722 232.576 FmM 0.54 0 175.421(. Each client ran a single application that wrote a)FmTX
57.24 241.576 FmM 0.355 0 42.743(12-Mbyte \336)FmTX
100.338 241.576 FmM 0.355 0 46.738(le and then \337)FmTX
148.14 241.576 FmM 0.355 0 41.493(ushed the \336)FmTX
190.343 241.576 FmM 0.355 0 69.238(le to disk. In multi-)FmTX
57.24 250.576 FmM 2.158 0 42.227(server con\336)FmTX
101.625 250.576 FmM 2.158 0 146.428(gurations data were striped across all the)FmTX
57.24 259.576 FmM 0.816 0 196.416(servers with a fragment size of 512 Kbytes. Parity was)FmTX
57.24 268.576 FmM 0 0 197.424(only computed for the line labeled \3221 client w/ parity\323.)FmTX
0 0 gm
0 gr
0 0 lin
FmPI
46 36 gm
(nc 0 0 0 0 6 rc)kp
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
503 296 gm
406 440 lin
334 584 lin
308 728 lin
495 296 gm
492 300 lin
483 312 gm
480 316 lin
471 328 gm
468 332 lin
459 344 gm
456 348 lin
447 360 gm
444 364 lin
434 376 gm
431 380 lin
421 392 gm
418 396 lin
409 408 gm
406 412 lin
396 424 gm
393 428 lin
384 440 gm
381 444 lin
373 456 gm
370 460 lin
362 472 gm
359 476 lin
352 488 gm
349 492 lin
342 504 gm
339 508 lin
332 520 gm
329 524 lin
322 536 gm
319 540 lin
312 552 gm
309 556 lin
301 568 gm
298 572 lin
291 584 gm
289 588 lin
284 600 gm
282 604 lin
277 616 gm
275 620 lin
270 632 gm
268 636 lin
263 648 gm
261 652 lin
256 664 gm
254 668 lin
249 680 gm
247 684 lin
242 696 gm
240 700 lin
235 712 gm
233 716 lin
492 296 gm
377 440 lin
267 584 lin
189 728 lin
504 440 gm
502 444 lin
495 456 gm
493 460 lin
486 472 gm
484 476 lin
477 488 gm
475 492 lin
468 504 gm
466 508 lin
459 520 gm
457 524 lin
450 536 gm
448 540 lin
441 552 gm
439 556 lin
432 568 gm
430 572 lin
423 584 gm
422 588 lin
420 600 gm
419 604 lin
417 616 gm
416 620 lin
414 632 gm
413 636 lin
412 648 gm
411 652 lin
410 664 gm
409 668 lin
408 680 gm
407 684 lin
406 696 gm
405 700 lin
403 712 gm
402 716 lin
626 152 gm
626 128 lin
495 152 gm
495 128 lin
364 152 gm
364 128 lin
233 152 gm
233 128 lin
102 152 gm
102 128 lin
600 152 gm
600 140 lin
574 152 gm
574 140 lin
547 152 gm
547 140 lin
521 152 gm
521 140 lin
469 152 gm
469 140 lin
443 152 gm
443 140 lin
416 152 gm
416 140 lin
390 152 gm
390 140 lin
338 152 gm
338 140 lin
312 152 gm
312 140 lin
286 152 gm
286 140 lin
259 152 gm
259 140 lin
207 152 gm
207 140 lin
181 152 gm
181 140 lin
154 152 gm
154 140 lin
128 152 gm
128 140 lin
626 872 gm
626 896 lin
495 872 gm
495 896 lin
364 872 gm
364 896 lin
233 872 gm
233 896 lin
102 872 gm
102 896 lin
600 872 gm
600 884 lin
574 872 gm
574 884 lin
547 872 gm
547 884 lin
521 872 gm
521 884 lin
469 872 gm
469 884 lin
443 872 gm
443 884 lin
416 872 gm
416 884 lin
390 872 gm
390 884 lin
338 872 gm
338 884 lin
312 872 gm
312 884 lin
286 872 gm
286 884 lin
259 872 gm
259 884 lin
207 872 gm
207 884 lin
181 872 gm
181 884 lin
154 872 gm
154 884 lin
128 872 gm
128 884 lin
626 152 gm
650 152 lin
626 296 gm
650 296 lin
626 440 gm
650 440 lin
626 584 gm
650 584 lin
626 728 gm
650 728 lin
626 872 gm
650 872 lin
102 152 gm
78 152 lin
102 296 gm
78 296 lin
102 440 gm
78 440 lin
102 584 gm
78 584 lin
102 728 gm
78 728 lin
102 872 gm
78 872 lin
626 152 gm
102 152 lin
626 872 gm
102 872 lin
626 152 gm
626 872 lin
102 152 gm
102 872 lin
pr
503 288 pl
495 296 pl
503 304 pl
511 296 pl
503 288 pl
0 ep
pr
406 432 pl
398 440 pl
406 448 pl
414 440 pl
406 432 pl
0 ep
pr
334 576 pl
326 584 pl
334 592 pl
342 584 pl
334 576 pl
0 ep
pr
308 720 pl
300 728 pl
308 736 pl
316 728 pl
308 720 pl
0 ep
487 288 gm
503 288 lin
503 304 lin
487 304 lin
487 288 lin
376 432 gm
392 432 lin
392 448 lin
376 448 lin
376 432 lin
283 576 gm
299 576 lin
299 592 lin
283 592 lin
283 576 lin
220 720 gm
236 720 lin
236 736 lin
220 736 lin
220 720 lin
500 288 gm
484 304 lin
484 288 gm
500 304 lin
385 432 gm
369 448 lin
369 432 gm
385 448 lin
275 576 gm
259 592 lin
259 576 gm
275 592 lin
197 720 gm
181 736 lin
181 720 gm
197 736 lin
64 gr
pr
512 432 pl
496 440 pl
512 448 pl
512 432 pl
2 ep
0 gr
pr
512 432 pl
496 440 pl
512 448 pl
512 432 pl
0 ep
64 gr
pr
431 576 pl
415 584 pl
431 592 pl
431 576 pl
2 ep
0 gr
pr
431 576 pl
415 584 pl
431 592 pl
431 576 pl
0 ep
64 gr
pr
409 720 pl
393 728 pl
409 736 pl
409 720 pl
2 ep
0 gr
pr
409 720 pl
393 728 pl
409 736 pl
409 720 pl
0 ep
64 gr
553 288 570 305 2 ov
0 gr
553.5 288.5 569.5 304.5 0 ov
559 288 gm
559 304 lin
551 296 gm
567 296 lin
0 0 pen
46 36 gm
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
194 53 gm
(nc 46 36 219 276 6 rc)kp
F 1 setTxMode
(0)show
162 53 gm
(1)show
129 53 gm
(2)show
96 53 gm
(3)show
63 53 gm
(4)show
206 63 gm
(0)show
206 99 gm
(1)show
206 135 gm
(2)show
206 171 gm
(3)show
206 207 gm
(4)show
206 243 gm
(5)show
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
125 168 gm
125 304 lin
pr
125 228 pl
117 236 pl
125 244 pl
133 236 pl
125 228 pl
0 ep
0 0 pen
46 36 gm
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
68 107 gm
(nc 46 36 219 276 6 rc)kp
F 1 setTxMode
1.32904 0. 32 0.13290 0.(1 client)awidthshow
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
161 168 gm
161 172 lin
161 184 gm
161 188 lin
161 200 gm
161 204 lin
161 216 gm
161 220 lin
161 232 gm
161 236 lin
161 248 gm
161 252 lin
161 264 gm
161 268 lin
161 280 gm
161 284 lin
161 296 gm
161 300 lin
153 228 gm
169 228 lin
169 244 lin
153 244 lin
153 228 lin
0 0 pen
46 36 gm
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
77 107 gm
(nc 46 36 219 276 6 rc)kp
F 1 setTxMode
1.53152 0. 32 0.15315 0.(2 clients)awidthshow
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
197 168 gm
197 304 lin
205 228 gm
189 244 lin
189 228 gm
205 244 lin
0 0 pen
46 36 gm
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
86 107 gm
(nc 46 36 219 276 6 rc)kp
F 1 setTxMode
1.53152 0. 32 0.15315 0.(3 clients)awidthshow
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
233 168 gm
233 172 lin
233 184 gm
233 188 lin
233 200 gm
233 204 lin
233 216 gm
233 220 lin
233 232 gm
233 236 lin
233 248 gm
233 252 lin
233 264 gm
233 268 lin
233 280 gm
233 284 lin
233 296 gm
233 300 lin
64 gr
pr
241 228 pl
225 236 pl
241 244 pl
241 228 pl
2 ep
0 gr
pr
241 228 pl
225 236 pl
241 244 pl
241 228 pl
0 ep
0 0 pen
46 36 gm
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
95 107 gm
(nc 46 36 219 276 6 rc)kp
F 1 setTxMode
0.80139 0. 32 0.08013 0.(1 client w/ parity)awidthshow
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
64 gr
261 228 278 245 2 ov
1 1 pen
0 gr
261.5 228.5 277.5 244.5 0 ov
0 0 pen
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
104 107 gm
(nc 46 36 219 276 6 rc)kp
F 1 setTxMode
0.30041 0.(Sprite)ashow
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
305 228 gm
305 244 lin
297 236 gm
313 236 lin
0 0 pen
46 36 gm
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
113 107 gm
(nc 46 36 219 276 6 rc)kp
F 1 setTxMode
0.16546 0.(NFS/Presto)ashow
nc ct 39 0 put
5 0 270 tp
-2 0 59 0 tc
127 -14 gm
tt
1.04690 0. 32 0.10469 0.(Total Throughput \(Mbytes/sec\))awidthshow
te
(nc 46 36 219 276 6 rc)kp
212 141 gm
0.16810 0.(Servers)ashow
EndFramePicture
0 0 gm
(nc 46 36 280 276 6 rc)kp
0 gr
0 0 lin
(36 46 276.12 712)FmKp
(nc 46 36 712 277 6 rc)kp
0 0 lin
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 gm
F 1 setTxMode
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
299.88 592.667 FmM 1.082 0 227.134(in a two server system is a mirror image of its data block)FmTX
299.88 603.667 FmM 0.903 0 141.865(and therefore reconstruction doesn\325)FmTX
444.275 603.667 FmM 0.903 0 93.018(t require any additional)FmTX
299.88 614.667 FmM 0.635 0 106.919(computation by the client. )FmTX
409.16 614.667 FmM 0.635 0 91.086(The throughput doesn\325)FmTX
501.338 614.667 FmM 0.635 0 38.027(t increase)FmTX
299.88 625.667 FmM 1.622 0 227.141(much with additional servers because the client CPU has)FmTX
299.88 636.667 FmM 5.125 0 209.368(saturated due to additional copying and exclusive-or)FmTX
299.88 647.667 FmM 0 0 168.831(operations to reconstruct the missing data.)FmTX
317.88 660.667 FmM 1.108 0 33.604(Figure 8)FmTX
352.591 660.667 FmM 1.108 0 177.439( shows the elapsed time for a single client to)FmTX
299.88 671.667 FmM 0.573 0 52.764(write small \336)FmTX
353.789 671.667 FmM 0.573 0 181.057(les. In the NFS and Sprite tests the client was)FmTX
299.88 682.667 FmM 0.358 0 80.542(writing to a single \336)FmTX
381.856 682.667 FmM 0.358 0 34.138(le server)FmTX
415.955 682.667 FmM 0.358 0 121.895(, while the Zebra test used one)FmTX
299.88 693.667 FmM 2.699 0 97.729(storage server and one \336)FmTX
408.407 693.667 FmM 2.699 0 44.138(le manager)FmTX
454.695 693.667 FmM 2.699 0 5(. )FmTX
461.845 693.667 FmM 2.699 0 72.756(Although Zebra is)FmTX
299.88 704.667 FmM 0.699 0 233.826(substantially faster than NFS for this benchmark, it is only)FmTX
0 0 gm
0 gr
0 0 lin
(299.88 46 540 712)FmKp
(299.88 46 539.64 307)FmKp
(nc 46 299 307 540 6 rc)kp
0 0 lin
64 gr
0 0 lin
299.88 217 539.64 298 FmqF
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
9 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
317.88 223 FmM 0.452 0 21.496(Figur)FmTX
339.215 223 FmM 0.452 0 10.745(e 7)FmTX
0 2 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
350.412 223 FmM 0.452 0 4.5(. )FmTX
0 5 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
355.203 223 FmM 0.452 0 15.001(Thr)FmTX
370.044 223 FmM 0.452 0 45.747(oughput for)FmTX
416.082 223 FmM 0.452 0 28.993( large \336)FmTX
445.979 223 FmM 0.452 0 12.74(le r)FmTX
459.01 223 FmM 0.452 0 16.998(eads)FmTX
0 7 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
476.008 223 FmM 0.452 0 44.728(. Each client)FmTX
317.88 232 FmM 1.871 0 168.434(ran a single application that read a 12-Mbyte \336)FmTX
501.279 232 FmM 1.871 0 18.49(le. In)FmTX
317.88 241 FmM 1.059 0 64.224(multi-server con\336)FmTX
383.163 241 FmM 1.059 0 133.183(gurations data were striped across all)FmTX
317.88 250 FmM 0.226 0 171.925(the servers with a fragment size of 512 Kbytes. )FmTX
491.676 250 FmM 0.226 0 29.738(The line)FmTX
317.88 259 FmM 6.82 0 169.662(labeled \3221 client \(recon\)\323 shows reconstruction)FmTX
317.88 268 FmM 0.803 0 198.141(performance: one server was unavailable and the client)FmTX
317.88 277 FmM 2.618 0 185.436(had to reconstruct the missing stripe fragments. For)FmTX
317.88 286 FmM 0.976 0 196.928(example, the system represented by the left-most point)FmTX
317.88 295 FmM 0 0 170.176(had two servers, one of which was unavailable.)FmTX
0 0 gm
0 gr
0 0 lin
FmPI
46 303 gm
(nc 0 0 0 0 6 rc)kp
46 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
482 563 gm
383 707 lin
377 851 lin
380 995 lin
490 563 gm
486 567 lin
475 579 gm
471 583 lin
461 595 gm
457 599 lin
447 611 gm
443 615 lin
433 627 gm
429 631 lin
419 643 gm
415 647 lin
405 659 gm
401 663 lin
391 675 gm
387 679 lin
377 691 gm
373 695 lin
363 707 gm
360 711 lin
351 723 gm
348 727 lin
339 739 gm
336 743 lin
327 755 gm
324 759 lin
315 771 gm
312 775 lin
303 787 gm
300 791 lin
291 803 gm
288 807 lin
279 819 gm
276 823 lin
267 835 gm
264 839 lin
255 851 gm
253 855 lin
247 867 gm
245 871 lin
239 883 gm
237 887 lin
230 899 gm
228 903 lin
221 915 gm
219 919 lin
213 931 gm
211 935 lin
204 947 gm
202 951 lin
195 963 gm
193 967 lin
187 979 gm
185 983 lin
492 563 gm
372 707 lin
253 851 lin
174 995 lin
490 707 gm
489 711 lin
487 723 gm
486 727 lin
484 739 gm
483 743 lin
481 755 gm
480 759 lin
478 771 gm
477 775 lin
476 787 gm
475 791 lin
474 803 gm
473 807 lin
472 819 gm
471 823 lin
470 835 gm
469 839 lin
468 851 gm
468 855 lin
467 867 gm
467 871 lin
466 883 gm
466 887 lin
466 899 gm
466 903 lin
465 915 gm
465 919 lin
464 931 gm
464 935 lin
464 947 gm
464 951 lin
463 963 gm
463 967 lin
462 979 gm
462 983 lin
622 419 gm
622 395 lin
535 419 gm
535 395 lin
449 419 gm
449 395 lin
362 419 gm
362 395 lin
275 419 gm
275 395 lin
189 419 gm
189 395 lin
102 419 gm
102 395 lin
605 419 gm
605 407 lin
587 419 gm
587 407 lin
570 419 gm
570 407 lin
553 419 gm
553 407 lin
518 419 gm
518 407 lin
501 419 gm
501 407 lin
483 419 gm
483 407 lin
466 419 gm
466 407 lin
431 419 gm
431 407 lin
414 419 gm
414 407 lin
397 419 gm
397 407 lin
379 419 gm
379 407 lin
345 419 gm
345 407 lin
327 419 gm
327 407 lin
310 419 gm
310 407 lin
293 419 gm
293 407 lin
258 419 gm
258 407 lin
241 419 gm
241 407 lin
223 419 gm
223 407 lin
206 419 gm
206 407 lin
171 419 gm
171 407 lin
154 419 gm
154 407 lin
137 419 gm
137 407 lin
119 419 gm
119 407 lin
622 1139 gm
622 1163 lin
535 1139 gm
535 1163 lin
449 1139 gm
449 1163 lin
362 1139 gm
362 1163 lin
275 1139 gm
275 1163 lin
189 1139 gm
189 1163 lin
102 1139 gm
102 1163 lin
605 1139 gm
605 1151 lin
587 1139 gm
587 1151 lin
570 1139 gm
570 1151 lin
553 1139 gm
553 1151 lin
518 1139 gm
518 1151 lin
501 1139 gm
501 1151 lin
483 1139 gm
483 1151 lin
466 1139 gm
466 1151 lin
431 1139 gm
431 1151 lin
414 1139 gm
414 1151 lin
397 1139 gm
397 1151 lin
379 1139 gm
379 1151 lin
345 1139 gm
345 1151 lin
327 1139 gm
327 1151 lin
310 1139 gm
310 1151 lin
293 1139 gm
293 1151 lin
258 1139 gm
258 1151 lin
241 1139 gm
241 1151 lin
223 1139 gm
223 1151 lin
206 1139 gm
206 1151 lin
171 1139 gm
171 1151 lin
154 1139 gm
154 1151 lin
137 1139 gm
137 1151 lin
119 1139 gm
119 1151 lin
622 419 gm
646 419 lin
622 563 gm
646 563 lin
622 707 gm
646 707 lin
622 851 gm
646 851 lin
622 995 gm
646 995 lin
622 1139 gm
646 1139 lin
102 419 gm
78 419 lin
102 563 gm
78 563 lin
102 707 gm
78 707 lin
102 851 gm
78 851 lin
102 995 gm
78 995 lin
102 1139 gm
78 1139 lin
622 419 gm
102 419 lin
622 1139 gm
102 1139 lin
622 419 gm
622 1139 lin
102 419 gm
102 1139 lin
pr
482 555 pl
474 563 pl
482 571 pl
490 563 pl
482 555 pl
0 ep
pr
383 699 pl
375 707 pl
383 715 pl
391 707 pl
383 699 pl
0 ep
pr
377 843 pl
369 851 pl
377 859 pl
385 851 pl
377 843 pl
0 ep
pr
380 987 pl
372 995 pl
380 1003 pl
388 995 pl
380 987 pl
0 ep
482 555 gm
498 555 lin
498 571 lin
482 571 lin
482 555 lin
355 699 gm
371 699 lin
371 715 lin
355 715 lin
355 699 lin
247 843 gm
263 843 lin
263 859 lin
247 859 lin
247 843 lin
170 987 gm
186 987 lin
186 1003 lin
170 1003 lin
170 987 lin
500 555 gm
484 571 lin
484 555 gm
500 571 lin
380 699 gm
364 715 lin
364 699 gm
380 715 lin
261 843 gm
245 859 lin
245 843 gm
261 859 lin
182 987 gm
166 1003 lin
166 987 gm
182 1003 lin
pr
498 699 pl
482 707 pl
498 715 pl
498 699 pl
0 ep
pr
476 843 pl
460 851 pl
476 859 pl
476 843 pl
0 ep
pr
469 987 pl
453 995 pl
469 1003 pl
469 987 pl
0 ep
577.5 555.5 593.5 571.5 0 ov
570 555 gm
570 571 lin
562 563 gm
578 563 lin
0 0 pen
46 303 gm
46 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
193 320 gm
(nc 46 303 217 540 6 rc)kp
F 1 setTxMode
(0)show
172 320 gm
(1)show
150 320 gm
(2)show
128 320 gm
(3)show
107 320 gm
(4)show
85 320 gm
(5)show
63 320 gm
(6)show
203 330 gm
(0)show
203 366 gm
(1)show
203 402 gm
(2)show
203 438 gm
(3)show
203 474 gm
(4)show
203 510 gm
(5)show
46 303 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
46 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
46 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
133 431 gm
133 567 lin
pr
133 491 pl
125 499 pl
133 507 pl
141 499 pl
133 491 pl
0 ep
0 0 pen
46 303 gm
46 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
70 373 gm
(nc 46 303 217 540 6 rc)kp
F 1 setTxMode
1.32904 0. 32 0.13290 0.(1 client)awidthshow
46 303 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
169 431 gm
169 435 lin
169 447 gm
169 451 lin
169 463 gm
169 467 lin
169 479 gm
169 483 lin
169 495 gm
169 499 lin
169 511 gm
169 515 lin
169 527 gm
169 531 lin
169 543 gm
169 547 lin
169 559 gm
169 563 lin
161 491 gm
177 491 lin
177 507 lin
161 507 lin
161 491 lin
0 0 pen
46 303 gm
46 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
79 373 gm
(nc 46 303 217 540 6 rc)kp
F 1 setTxMode
1.53152 0. 32 0.15315 0.(2 clients)awidthshow
46 303 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
205 431 gm
205 567 lin
213 491 gm
197 507 lin
197 491 gm
213 507 lin
0 0 pen
46 303 gm
46 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
88 373 gm
(nc 46 303 217 540 6 rc)kp
F 1 setTxMode
1.53152 0. 32 0.15315 0.(3 clients)awidthshow
46 303 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
241 431 gm
241 435 lin
241 447 gm
241 451 lin
241 463 gm
241 467 lin
241 479 gm
241 483 lin
241 495 gm
241 499 lin
241 511 gm
241 515 lin
241 527 gm
241 531 lin
241 543 gm
241 547 lin
241 559 gm
241 563 lin
pr
249 491 pl
233 499 pl
249 507 pl
249 491 pl
0 ep
0 0 pen
46 303 gm
46 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
97 373 gm
(nc 46 303 217 540 6 rc)kp
F 1 setTxMode
0.86532 0. 32 0.08653 0.(1 client \(recon\))awidthshow
46 303 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
269.5 491.5 285.5 507.5 0 ov
0 0 pen
46 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
106 373 gm
(nc 46 303 217 540 6 rc)kp
F 1 setTxMode
0.30041 0.(Sprite)ashow
46 303 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
1 1 pen
313 491 gm
313 507 lin
305 499 gm
321 499 lin
0 0 pen
46 303 gm
46 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
115 373 gm
(nc 46 303 217 540 6 rc)kp
F 1 setTxMode
0.16546 0.(NFS/Presto)ashow
nc ct 39 0 put
5 0 270 tp
-2 0 59 0 tc
127 251 gm
tt
1.04690 0. 32 0.10469 0.(Total Throughput \(Mbytes/sec\))awidthshow
te
(nc 46 303 217 540 6 rc)kp
211 407 gm
0.16810 0.(Servers)ashow
EndFramePicture
0 0 gm
(nc 46 299 307 540 6 rc)kp
0 gr
0 0 lin
(299.88 46 540 712)FmKp
(nc 46 299 712 540 6 rc)kp
0 0 lin
(299.88 46 540 712)FmKp
(299.88 307 539.64 586)FmKp
(nc 307 299 586 540 6 rc)kp
0 0 lin
64 gr
0 0 lin
303.12 487 542.88 577 FmqF
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
321.12 493 FmM -0.105 0 21.496(Figur)FmTX
342.455 493 FmM -0.105 0 10.745(e 8)FmTX
0 2 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
353.096 493 FmM -0.105 0 4.5(. )FmTX
0 5 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
357.491 493 FmM -0.105 0 63.703(Performance for)FmTX
420.929 493 FmM -0.105 0 48.478( small writes)FmTX
0 7 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
469.198 493 FmM -0.105 0 4.5(. )FmTX
473.099 493 FmM -0.105 0 6.497(A)FmTX
479.102 493 FmM -0.105 0 45.987( single client)FmTX
321.12 502 FmM 0.675 0 53.477(created 2048 \336)FmTX
375.946 502 FmM 0.675 0 123.216(les, each 1 Kbyte in length, then \337)FmTX
503.885 502 FmM 0.675 0 20.995(ushed)FmTX
321.12 511 FmM -0.183 0 29.494(all the \336)FmTX
350.248 511 FmM -0.183 0 73.466(les to a single server)FmTX
422.486 511 FmM -0.183 0 4.5(. )FmTX
426.643 511 FmM -0.183 0 98.969(The elapsed time is divided)FmTX
321.12 520 FmM 1.618 0 189.198(into four components: the time to open and close the)FmTX
321.12 529 FmM 1.083 0 5.003(\336)FmTX
326.123 529 FmM 1.083 0 187.926(les, the time for the application to write the data, the)FmTX
321.12 538 FmM 0.174 0 80.725(time for the client to \337)FmTX
402.714 538 FmM 0.174 0 120.951(ush its cache, and the time for the)FmTX
321.12 547 FmM 0.552 0 38.483(server to \337)FmTX
360.707 547 FmM 0.552 0 136.47(ush its cache to disk. For NFS, each \336)FmTX
501.591 547 FmM 0.552 0 22.737(le was)FmTX
321.12 556 FmM 1.998 0 5.003(\337)FmTX
326.123 556 FmM 1.998 0 83.973(ushed as it was closed. )FmTX
419.926 556 FmM 1.998 0 96.961(The two rightmost bars are)FmTX
321.12 565 FmM 1.983 0 187.897(estimates for Sprite and Zebra if name caching were)FmTX
321.12 574 FmM 0 0 49.236(implemented.)FmTX
0 0 gm
0 gr
0 0 lin
FmPI
308 303 gm
(nc 0 0 0 0 6 rc)kp
308 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
F 48<1122448811224488>pat
904 433 904 549 1 rc
32 sg
422 433 904 549 1 rc
1 1 pen
903 433 gm
0 gr
422 433 lin
422 549 lin
903 549 lin
F 56<8040201008040201>pat
422 433 422 549 1 rc
422 433 gm
0 gr
422 549 lin
422 433 lin
F 56<8010022001084004>pat
422 433 422 549 1 rc
0 gr
422 549 lin
422 433 lin
F 48<1122448811224488>pat
813 577 904 693 1 rc
903 577 gm
0 gr
813 577 lin
813 693 lin
903 693 lin
32 sg
806 577 813 693 1 rc
813 577 gm
0 gr
806 577 lin
806 693 lin
813 693 lin
813 577 lin
F 56<8040201008040201>pat
769 577 806 693 1 rc
806 577 gm
0 gr
769 577 lin
769 693 lin
806 693 lin
806 577 lin
F 56<8010022001084004>pat
741 577 769 693 1 rc
769 577 gm
0 gr
741 577 lin
741 693 lin
769 693 lin
769 577 lin
F 48<1122448811224488>pat
809 721 904 837 1 rc
903 721 gm
0 gr
809 721 lin
809 837 lin
903 837 lin
32 sg
801 721 809 837 1 rc
809 721 gm
0 gr
801 721 lin
801 837 lin
809 837 lin
809 721 lin
F 56<8040201008040201>pat
782 721 801 837 1 rc
801 721 gm
0 gr
782 721 lin
782 837 lin
801 837 lin
801 721 lin
F 56<8010022001084004>pat
773 721 782 837 1 rc
782 721 gm
0 gr
773 721 lin
773 837 lin
782 837 lin
782 721 lin
F 48<1122448811224488>pat
895 865 904 981 1 rc
903 865 gm
0 gr
895 865 lin
895 981 lin
903 981 lin
32 sg
887 865 895 981 1 rc
895 865 gm
0 gr
887 865 lin
887 981 lin
895 981 lin
895 865 lin
F 56<8040201008040201>pat
851 865 887 981 1 rc
887 865 gm
0 gr
851 865 lin
851 981 lin
887 981 lin
887 865 lin
F 56<8010022001084004>pat
823 865 851 981 1 rc
851 865 gm
0 gr
823 865 lin
823 981 lin
851 981 lin
851 865 lin
F 48<1122448811224488>pat
895 1009 904 1125 1 rc
903 1009 gm
0 gr
895 1009 lin
895 1125 lin
903 1125 lin
32 sg
887 1009 895 1125 1 rc
895 1009 gm
0 gr
887 1009 lin
887 1125 lin
895 1125 lin
895 1009 lin
F 56<8040201008040201>pat
867 1009 887 1125 1 rc
887 1009 gm
0 gr
867 1009 lin
867 1125 lin
887 1125 lin
887 1009 lin
F 56<8010022001084004>pat
859 1009 867 1125 1 rc
867 1009 gm
0 gr
859 1009 lin
859 1125 lin
867 1125 lin
867 1009 lin
904 419 gm
904 395 lin
827 419 gm
827 395 lin
750 419 gm
750 395 lin
673 419 gm
673 395 lin
596 419 gm
596 395 lin
518 419 gm
518 395 lin
441 419 gm
441 395 lin
364 419 gm
364 395 lin
889 419 gm
889 407 lin
873 419 gm
873 407 lin
858 419 gm
858 407 lin
842 419 gm
842 407 lin
812 419 gm
812 407 lin
796 419 gm
796 407 lin
781 419 gm
781 407 lin
765 419 gm
765 407 lin
734 419 gm
734 407 lin
719 419 gm
719 407 lin
704 419 gm
704 407 lin
688 419 gm
688 407 lin
657 419 gm
657 407 lin
642 419 gm
642 407 lin
626 419 gm
626 407 lin
611 419 gm
611 407 lin
580 419 gm
580 407 lin
565 419 gm
565 407 lin
549 419 gm
549 407 lin
534 419 gm
534 407 lin
503 419 gm
503 407 lin
488 419 gm
488 407 lin
472 419 gm
472 407 lin
457 419 gm
457 407 lin
426 419 gm
426 407 lin
410 419 gm
410 407 lin
395 419 gm
395 407 lin
380 419 gm
380 407 lin
904 1139 gm
904 1163 lin
827 1139 gm
827 1163 lin
750 1139 gm
750 1163 lin
673 1139 gm
673 1163 lin
596 1139 gm
596 1163 lin
518 1139 gm
518 1163 lin
441 1139 gm
441 1163 lin
364 1139 gm
364 1163 lin
889 1139 gm
889 1151 lin
873 1139 gm
873 1151 lin
858 1139 gm
858 1151 lin
842 1139 gm
842 1151 lin
812 1139 gm
812 1151 lin
796 1139 gm
796 1151 lin
781 1139 gm
781 1151 lin
765 1139 gm
765 1151 lin
734 1139 gm
734 1151 lin
719 1139 gm
719 1151 lin
704 1139 gm
704 1151 lin
688 1139 gm
688 1151 lin
657 1139 gm
657 1151 lin
642 1139 gm
642 1151 lin
626 1139 gm
626 1151 lin
611 1139 gm
611 1151 lin
580 1139 gm
580 1151 lin
565 1139 gm
565 1151 lin
549 1139 gm
549 1151 lin
534 1139 gm
534 1151 lin
503 1139 gm
503 1151 lin
488 1139 gm
488 1151 lin
472 1139 gm
472 1151 lin
457 1139 gm
457 1151 lin
426 1139 gm
426 1151 lin
410 1139 gm
410 1151 lin
395 1139 gm
395 1151 lin
380 1139 gm
380 1151 lin
904 419 gm
364 419 lin
904 1139 gm
364 1139 lin
904 419 gm
904 1139 lin
364 419 gm
364 1139 lin
0 0 pen
308 303 gm
308 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
461 322 gm
(nc 308 303 487 540 6 rc)kp
F 1 setTxMode
(0)show
442 317 gm
1.00003 0.(10)ashow
422 317 gm
1.00003 0.(20)ashow
403 317 gm
1.00003 0.(30)ashow
384 317 gm
1.00003 0.(40)ashow
365 317 gm
1.00003 0.(50)ashow
345 317 gm
1.00003 0.(60)ashow
326 317 gm
1.00003 0.(70)ashow
472 341 gm
-0.25508 0.(NFS)ashow
472 374 gm
0.30041 0.(Sprite)ashow
472 411 gm
(Zebra)show
472 445 gm
0.78247 0. 32 0.07824 0.(Sprite )awidthshow
483 448 gm
0.33250 0.(N.C.)ashow
472 482 gm
-0.04679 0.(Zebra )ashow
483 484 gm
0.33250 0.(N.C.)ashow
308 303 gm
(nc 0 0 0 0 6 rc)kp
0 gr
308 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
64 gr
384 719 600 1115 4 rc
0 gr
308 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
308 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
56 gr
415 807 447 839 1 rc
1 1 pen
0 gr
415.5 807.5 446.5 838.5 0 rc
0 0 pen
308 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
341 453 gm
(nc 308 303 487 540 6 rc)kp
F 1 setTxMode
0.59661 0. 32 0.05966 0.(Server Flush)awidthshow
308 303 gm
(nc 0 0 0 0 6 rc)kp
0 gr
308 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
F 56<8040201008040201>pat
459 807 491 839 1 rc
1 1 pen
0 gr
459.5 807.5 490.5 838.5 0 rc
0 0 pen
308 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
352 453 gm
(nc 308 303 487 540 6 rc)kp
F 1 setTxMode
1.30599 0. 32 0.13059 0.(Client Flush)awidthshow
308 303 gm
(nc 0 0 0 0 6 rc)kp
0 gr
308 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
32 sg
503 807 535 839 1 rc
1 1 pen
0 gr
503.5 807.5 534.5 838.5 0 rc
0 0 pen
308 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
363 453 gm
(nc 308 303 487 540 6 rc)kp
F 1 setTxMode
0.12817 0.(Write)ashow
308 303 gm
(nc 0 0 0 0 6 rc)kp
0 gr
308 303 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
F 48<1122448811224488>pat
547 807 579 839 1 rc
1 1 pen
0 gr
547.5 807.5 578.5 838.5 0 rc
0 0 pen
308 303 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
374 453 gm
(nc 308 303 487 540 6 rc)kp
F 1 setTxMode
0.27832 0.(Open/Close)ashow
nc ct 39 0 put
5 0 270 tp
-2 0 44 0 tc
395 266 gm
tt
0.37292 0. 32 0.03729 0.(Elapsed Time \(seconds\))awidthshow
te
(nc 308 303 487 540 6 rc)kp
EndFramePicture
0 0 gm
(nc 307 299 586 540 6 rc)kp
0 gr
0 0 lin
(299.88 46 540 712)FmKp
(nc 46 299 712 540 6 rc)kp
0 0 lin
F T cp
%%Page: ? 13
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 316.095 FmM 1.455 0 118.843(about 20% faster than Sprite. )FmTX
161.94 316.095 FmM 1.455 0 106.904(The main reason for this is)FmTX
36 327.095 FmM 1.817 0 227.402(that neither Zebra nor Sprite caches naming information;)FmTX
36 338.095 FmM 1.134 0 228.779(each open and close requires a separate RPC to either the)FmTX
36 349.095 FmM 0.004 0 5.559(\336)FmTX
41.559 349.095 FmM 0.004 0 53.025(le server or \336)FmTX
94.597 349.095 FmM 0.004 0 44.138(le manager)FmTX
138.342 349.095 FmM 0.004 0 42.214(, and the \336)FmTX
180.57 349.095 FmM 0.004 0 95.532(gure shows that most of)FmTX
36 360.095 FmM 0.991 0 128.875(the time is spent in these RPCs. )FmTX
171.63 360.095 FmM 0.991 0 100.527(The rightmost bars in the)FmTX
36 371.095 FmM 2.894 0 5.559(\336)FmTX
41.559 371.095 FmM 2.894 0 208.513(gure estimate the times for Sprite and Zebra if name)FmTX
36 382.095 FmM 2.373 0 223.506(caching were implemented; the estimates were made by)FmTX
36 393.095 FmM 0.147 0 202.708(running the same benchmark directly on a Sprite \336)FmTX
239.884 393.095 FmM 0.147 0 34.138(le server)FmTX
273.62 393.095 FmM 0.147 0 2.5(.)FmTX
36 404.095 FmM 1.625 0 59.985(Zebra is signi\336)FmTX
99.235 404.095 FmM 1.625 0 167.136(cantly faster than Sprite during the cache-)FmTX
36 415.095 FmM 2.024 0 5.559(\337)FmTX
41.559 415.095 FmM 2.024 0 194.395(ush portion of the benchmark. Both systems mer)FmTX
249.941 415.095 FmM 2.024 0 24.155(ge the)FmTX
36 426.095 FmM 0.986 0 29.722(small \336)FmTX
66.707 426.095 FmM 0.986 0 42.207(les into lar)FmTX
110.708 426.095 FmM 0.986 0 156.897(ge blocks for writing, but Sprite doesn\325)FmTX
273.341 426.095 FmM 0.986 0 2.778(t)FmTX
36 437.095 FmM 2.066 0 201.013(do it until the data have reached the server: each \336)FmTX
257.67 437.095 FmM 2.066 0 16.384(le is)FmTX
36 448.095 FmM 5.392 0 202.378(transferred over the network in a separate message)FmTX
36 459.095 FmM 7.399 0 121.326(exchange. Zebra batches the \336)FmTX
186.922 459.095 FmM 7.399 0 74.399(les together before)FmTX
36 470.095 FmM 0 0 188.794(transferring over the network, which is more ef)FmTX
224.616 470.095 FmM 0 0 5.559(\336)FmTX
230.175 470.095 FmM 0 0 21.934(cient.)FmTX
54 483.095 FmM 3.762 0 33.604(Figure 9)FmTX
91.365 483.095 FmM 3.762 0 162.185( shows the utilizations of various system)FmTX
36 494.095 FmM 0.478 0 236.296(components during the benchmarks, both for Zebra and for)FmTX
36 505.095 FmM 1.019 0 55.813(Sprite. For lar)FmTX
93.672 505.095 FmM 1.019 0 125.491(ge reads and writes the Zebra \336)FmTX
225.275 505.095 FmM 1.019 0 49.827(le manager\'s)FmTX
36 516.095 FmM 1.796 0 222.163(CPU and disk are almost idle; the system could scale to)FmTX
36 527.095 FmM -0.003 0 151.584(dozens of storage servers before the \336)FmTX
187.568 527.095 FmM -0.003 0 88.56(le manager becomes a)FmTX
36 538.095 FmM 0.311 0 237.944(performance bottleneck. In comparison to Sprite, Zebra has)FmTX
36 549.095 FmM 3.078 0 215.493(higher utilizations of the client CPU, server CPU, and)FmTX
36 560.095 FmM 1.417 0 228.787(server disk; this causes Zebra to complete the benchmark)FmTX
36 571.095 FmM 0 0 22.2(faster)FmTX
57.65 571.095 FmM 0 0 2.5(.)FmTX
54 584.095 FmM 1.014 0 212.993(For small writes both Zebra and Sprite spend most of)FmTX
36 595.095 FmM 0.822 0 207.466(their time in synchronous RPCs to open and close \336)FmTX
250.864 595.095 FmM 0.822 0 24.434(les. In)FmTX
36 606.095 FmM 2.394 0 211.357(both systems the sum of client CPU utilization and \336)FmTX
268.903 606.095 FmM 2.394 0 7.217(le)FmTX
36 617.095 FmM 0.998 0 232.139(manager CPU utilization is nearly 100%; it cannot exceed)FmTX
36 628.095 FmM 2.519 0 217.446(100% because the RPCs do not allow much overlap in)FmTX
36 639.095 FmM 0.084 0 239.365(processing between the two CPUs. In both Zebra and Sprite)FmTX
36 650.095 FmM -0.146 0 241.58(it appears that the server CPU will saturate with the addition)FmTX
36 661.095 FmM 1.412 0 227.412(of a second client; without name caching the server CPU)FmTX
36 672.095 FmM 0 0 134.097(will be a performance bottleneck.)FmTX
0 0 gm
0 gr
0 0 lin
(36 46 276.12 712)FmKp
(36.18 46 275.94 309.429)FmKp
(nc 46 36 310 276 6 rc)kp
0 0 lin
FmPI
46 36 gm
(nc 0 0 0 0 6 rc)kp
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
32 sg
630 164 638 183 1 rc
1 1 pen
637 164 gm
0 gr
630 164 lin
630 183 lin
637 183 lin
462 202 638 222 1 rc
637 202 gm
462 202 lin
462 222 lin
637 222 lin
60 gr
382 222 638 241 1 rc
0 gr
382 222 lin
382 241 lin
637 241 lin
F 56<8040201008040201>pat
228 241 638 260 1 rc
0 gr
228 241 lin
228 260 lin
637 260 lin
32 sg
467 284 638 303 1 rc
637 284 gm
0 gr
467 284 lin
467 303 lin
637 303 lin
F 48<8844221188442211>pat
386 303 638 322 1 rc
0 gr
386 303 lin
386 322 lin
637 322 lin
517 322 638 342 1 rc
517 322 lin
517 342 lin
637 342 lin
32 sg
632 404 638 423 1 rc
637 404 gm
0 gr
632 404 lin
632 423 lin
637 423 lin
F 48<8844221188442211>pat
637 423 638 442 1 rc
0 gr
637 442 lin
328 442 638 462 1 rc
328 442 lin
328 462 lin
637 462 lin
60 sg
219 462 638 481 1 rc
0 gr
219 462 lin
219 481 lin
637 481 lin
F 56<8040201008040201>pat
178 481 638 500 1 rc
0 gr
178 481 lin
178 500 lin
637 500 lin
32 sg
396 524 638 543 1 rc
637 524 gm
0 gr
396 524 lin
396 543 lin
637 543 lin
F 48<8844221188442211>pat
372 543 638 562 1 rc
0 gr
372 543 lin
372 562 lin
637 562 lin
540 562 638 582 1 rc
540 562 lin
540 582 lin
637 582 lin
32 sg
404 644 638 663 1 rc
637 644 gm
0 gr
404 644 lin
404 663 lin
637 663 lin
F 48<8844221188442211>pat
620 663 638 682 1 rc
0 gr
620 663 lin
620 682 lin
637 682 lin
399 682 638 702 1 rc
399 682 lin
399 702 lin
637 702 lin
60 sg
589 702 638 721 1 rc
0 gr
589 702 lin
589 721 lin
637 721 lin
F 56<8040201008040201>pat
583 721 638 740 1 rc
0 gr
583 721 lin
583 740 lin
637 740 lin
32 sg
358 764 638 783 1 rc
637 764 gm
0 gr
358 764 lin
358 783 lin
637 783 lin
F 48<8844221188442211>pat
575 783 638 802 1 rc
0 gr
575 783 lin
575 802 lin
637 802 lin
440 802 638 822 1 rc
440 802 lin
440 822 lin
637 822 lin
638 152 gm
638 128 lin
530 152 gm
530 128 lin
422 152 gm
422 128 lin
314 152 gm
314 128 lin
206 152 gm
206 128 lin
98 152 gm
98 128 lin
611 152 gm
611 140 lin
584 152 gm
584 140 lin
557 152 gm
557 140 lin
503 152 gm
503 140 lin
476 152 gm
476 140 lin
449 152 gm
449 140 lin
395 152 gm
395 140 lin
368 152 gm
368 140 lin
341 152 gm
341 140 lin
287 152 gm
287 140 lin
260 152 gm
260 140 lin
233 152 gm
233 140 lin
179 152 gm
179 140 lin
152 152 gm
152 140 lin
125 152 gm
125 140 lin
638 152 gm
98 152 lin
638 872 gm
98 872 lin
638 152 gm
638 872 lin
98 152 gm
98 872 lin
0 0 pen
46 36 gm
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
198 53 gm
(nc 46 36 225 276 6 rc)kp
F 1 setTxMode
9 fz
bu fc
2 F /|______Times-Roman fnt
bn
(0)show
171 48 gm
1.00003 0.(20)ashow
144 48 gm
1.00003 0.(40)ashow
117 48 gm
1.00003 0.(60)ashow
90 48 gm
1.00003 0.(80)ashow
63 43 gm
0.75003 0.(100)ashow
207 70 gm
(Zebra)show
207 99 gm
0.30041 0.(Sprite)ashow
207 130 gm
(Zebra)show
207 159 gm
0.30041 0.(Sprite)ashow
207 190 gm
(Zebra)show
207 219 gm
0.30041 0.(Sprite)ashow
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
32 sg
117 588 149 620 1 rc
1 1 pen
0 gr
117.5 588.5 148.5 619.5 0 rc
0 0 pen
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
70 198 gm
(nc 46 36 225 276 6 rc)kp
F 1 setTxMode
-0.15309 0.(FM CPU)ashow
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
F 48<8844221188442211>pat
165 588 197 620 1 rc
1 1 pen
0 gr
165.5 588.5 196.5 619.5 0 rc
0 0 pen
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
82 198 gm
(nc 46 36 225 276 6 rc)kp
F 1 setTxMode
0.46234 0. 32 0.04623 0.(FM Disk)awidthshow
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
213 588 245 620 1 rc
1 1 pen
213.5 588.5 244.5 619.5 0 rc
0 0 pen
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
94 198 gm
(nc 46 36 225 276 6 rc)kp
F 1 setTxMode
0.65429 0. 32 0.06542 0.(Client CPU)awidthshow
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
60 sg
261 588 293 620 1 rc
1 1 pen
0 gr
261.5 588.5 292.5 619.5 0 rc
0 0 pen
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
106 198 gm
(nc 46 36 225 276 6 rc)kp
F 1 setTxMode
-0.15371 0.(SS CPU)ashow
46 36 gm
(nc 0 0 0 0 6 rc)kp
0 gr
46 36 lin
currentpoint currentpoint translate .25 .25 scale neg exch neg exch translate
initclip
F 56<8040201008040201>pat
309 588 341 620 1 rc
1 1 pen
0 gr
309.5 588.5 340.5 619.5 0 rc
0 0 pen
46 36 lin
currentpoint currentpoint translate 4.0 4.0 scale neg exch neg exch translate
118 198 gm
(nc 46 36 225 276 6 rc)kp
F 1 setTxMode
0.46051 0. 32 0.04605 0.(SS Disk)awidthshow
nc ct 39 0 put
5 0 270 tp
-2 0 18 16384 tc
130 24 gm
tt
0.13778 0. 32 0.01377 0.(% utilized)awidthshow
te
(nc 46 36 225 276 6 rc)kp
218 71 gm
33 fs
bu fc
0 F /|______Times-Bold fnt
bn
2.43087 0. 32 0.24308 0.(Large Write)awidthshow
218 130 gm
2.05337 0. 32 0.20533 0.(Large Read)awidthshow
218 191 gm
3.33648 0. 32 0.33364 0.(Small Write)awidthshow
EndFramePicture
0 0 gm
(nc 46 36 310 276 6 rc)kp
0 gr
0 0 lin
64 gr
0 0 lin
36.18 226 275.94 300.429 FmqF
0 gr
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54.18 232 FmM 0.52 0 21.496(Figur)FmTX
75.515 232 FmM 0.52 0 10.745(e 9)FmTX
0 2 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
86.78 232 FmM 0.52 0 4.75(: )FmTX
0 5 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
92.05 232 FmM 0.52 0 27.49(Resour)FmTX
119.38 232 FmM 0.52 0 52.732(ce utilizations)FmTX
0 7 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
172.632 232 FmM 0.52 0 76.733(. Utilizations of the \336)FmTX
251.445 232 FmM 0.52 0 6.495(le)FmTX
54.18 241 FmM 1.164 0 194.445(manager \(FM\) CPU and disk, client CPU, and storage)FmTX
54.18 250 FmM 2.353 0 184.939(server \(SS\) CPU and disk during the previous three)FmTX
54.18 259 FmM 2.285 0 47.979(benchmarks. )FmTX
104.284 259 FmM 2.285 0 139.946(The Zebra system consisted of a single)FmTX
54.18 268 FmM 0.273 0 59.484(client, a single \336)FmTX
114.484 268 FmM 0.273 0 39.724(le manager)FmTX
154.124 268 FmM 0.273 0 102.45(, and a single storage server;)FmTX
54.18 277 FmM -0.118 0 204.937(the Sprite system consisted of a single client and a single)FmTX
54.18 286 FmM -0.143 0 5.003(\336)FmTX
59.183 286 FmM -0.143 0 30.724(le server)FmTX
89.406 286 FmM -0.143 0 86.476(, which serves as both \336)FmTX
175.166 286 FmM -0.143 0 83.204(le manager and storage)FmTX
54.18 295 FmM 0 0 21.979(server)FmTX
75.665 295 FmM 0 0 95.977(. Parity was not computed.)FmTX
0 0 gm
0 gr
0 0 lin
(36 46 276.12 712)FmKp
(nc 46 36 712 277 6 rc)kp
0 0 lin
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 gm
F 1 setTxMode
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 55.333 FmM 0 0 7(8)FmTX
321.48 55.333 FmM 0 0 49.366(Related )FmTX
370.596 55.333 FmM 0 0 14(W)FmTX
383.827 55.333 FmM 0 0 20.997(ork)FmTX
0 4 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 76.667 FmM 0.167 0 220.449(Most of the key ideas in Zebra were derived from prior)FmTX
299.88 87.667 FmM 5.106 0 160.496(work in disk arrays and log-structured \336)FmTX
491.014 87.667 FmM 5.106 0 43.879(le systems.)FmTX
299.88 98.667 FmM 0.505 0 36.643(However)FmTX
336.125 98.667 FmM 0.505 0 199.326(, there are many other related projects in the areas)FmTX
299.88 109.667 FmM 0 0 105.803(of striping and availability)FmTX
405.034 109.667 FmM 0 0 2.5(.)FmTX
317.88 122.667 FmM 10.238 0 129.917(RAID-II [Lee92], DataMesh [W)FmTX
478.112 122.667 FmM 10.238 0 51.65(ilkes92], and)FmTX
299.88 133.667 FmM -0.133 0 6.108(T)FmTX
305.639 133.667 FmM -0.133 0 26.091(ickerT)FmTX
330.932 133.667 FmM -0.133 0 16.106(AIP)FmTX
346.67 133.667 FmM -0.133 0 194.397( [Cao93] all use RAID technology to build high-)FmTX
299.88 144.667 FmM 1.861 0 58.574(performance \336)FmTX
360.315 144.667 FmM 1.861 0 168.518(le servers. RAID-II uses a dedicated high-)FmTX
299.88 155.667 FmM -0.068 0 240.735(bandwidth data path between the network and the disk array)FmTX
299.88 166.667 FmM 2.921 0 213.828(to bypass the slow memory system of the server host.)FmTX
299.88 177.666 FmM 0.306 0 237.673(DataMesh is an array of processor/disk nodes connected by)FmTX
299.88 188.666 FmM 4.253 0 214.604(a high-performance interconnect, much like a parallel)FmTX
299.88 199.666 FmM 4.099 0 140.508(machine with a disk on each node. )FmTX
468.906 199.666 FmM 4.099 0 6.108(T)FmTX
474.665 199.666 FmM 4.099 0 26.091(ickerT)FmTX
499.958 199.666 FmM 4.099 0 16.106(AIP)FmTX
515.695 199.666 FmM 4.099 0 16.106( is a)FmTX
299.88 210.666 FmM 2.448 0 13.325(re\336)FmTX
313.205 210.666 FmM 2.448 0 209.656(nement of DataMesh that focuses on distributing the)FmTX
299.88 221.666 FmM 1.888 0 228.789(functions of the traditionally centralized RAID controller)FmTX
299.88 232.666 FmM -0.217 0 241.853(across multiple processors, thus removing the controller as a)FmTX
299.88 243.666 FmM 0.27 0 237.151(single point of failure. In all of these systems the striping is)FmTX
299.88 254.666 FmM 5.113 0 82.456(internal to the server)FmTX
397.276 254.666 FmM 5.113 0 117.161(, whereas in Zebra the clients)FmTX
299.88 265.666 FmM 0 0 93.584(participate in striping \336)FmTX
393.464 265.666 FmM 0 0 13.606(les.)FmTX
317.88 278.666 FmM 6.491 0 79.98(RADD \(Redundant )FmTX
410.294 278.666 FmM 6.491 0 110.232(Array of Distributed Disks\))FmTX
299.88 289.666 FmM 2.461 0 215.508([Schloss90] is similar to RAID in that it uses parity to)FmTX
299.88 300.666 FmM 0.589 0 148.03(withstand the loss of a disk, but it dif)FmTX
452.444 300.666 FmM 0.589 0 85.789(fers by separating the)FmTX
299.88 311.666 FmM 2.131 0 225.203(disks geographically to decrease the likelihood of losing)FmTX
299.88 322.666 FmM 1.811 0 227.441(multiple disks. Furthermore, RADD does not stripe data;)FmTX
299.88 333.666 FmM 0.455 0 236.023(the data stored on each disk are logically independent, thus)FmTX
299.88 344.666 FmM -0.113 0 241.023(RADD does not improve the performance of individual data)FmTX
299.88 355.666 FmM 0 0 36.36(accesses.)FmTX
317.88 368.666 FmM 0.344 0 94.136(Several other striping \336)FmTX
413.047 368.666 FmM 0.344 0 125.234(le systems have been built over)FmTX
299.88 379.666 FmM 2.801 0 217.715(the last several years. Some, such as HPFS [Poston88])FmTX
299.88 390.666 FmM -0.223 0 196.313(stripe across local disks; others, such as sfs [LoV)FmTX
493.301 390.666 FmM -0.223 0 46.921(erso93] and)FmTX
299.88 401.666 FmM 2.874 0 217.126(Bridge [Dibble90] stripe across I/O nodes in a parallel)FmTX
299.88 412.666 FmM 6.849 0 192.178(computer; but to our knowledge only one, Swift)FmTX
299.88 423.666 FmM 0.237 0 198.23([Cabrera91], stripes across servers in a network \336)FmTX
499.772 423.666 FmM 0.237 0 39.99(le system.)FmTX
299.88 434.666 FmM 0.4 0 111.904(All of these systems use per)FmTX
413.586 434.666 FmM 0.4 0 8.887(-\336)FmTX
422.473 434.666 FmM 0.4 0 115.527(le striping, so they work best)FmTX
299.88 445.666 FmM 3.053 0 30.82(with lar)FmTX
333.575 445.666 FmM 3.053 0 17.498(ge \336)FmTX
354.126 445.666 FmM 3.053 0 170.608(les. Swift\'s performance while reading and)FmTX
299.88 456.666 FmM 0.013 0 41.926(writing lar)FmTX
341.641 456.666 FmM 0.013 0 17.498(ge \336)FmTX
359.152 456.666 FmM 0.013 0 180.757(les improves nearly linearly as the number of)FmTX
299.88 467.666 FmM 0.326 0 236.855(servers increases to three, but the CPUs and disks for Swift)FmTX
299.88 478.666 FmM 3.511 0 208.523(are much slower than those for Zebra so its absolute)FmTX
299.88 489.666 FmM 5.12 0 141.165(performance is lower than Zebra\'s. )FmTX
466.095 489.666 FmM 5.12 0 7.219(A)FmTX
472.765 489.666 FmM 5.12 0 15.266( per)FmTX
492.954 489.666 FmM 5.12 0 8.887(-\336)FmTX
501.84 489.666 FmM 5.12 0 33.04(le parity)FmTX
299.88 500.666 FmM -0.04 0 240.481(mechanism is planned for Swift, although it does not appear)FmTX
299.88 511.666 FmM -0.134 0 183.567(to resolve the potential problems with small \336)FmTX
482.511 511.666 FmM -0.134 0 57.756(les and atomic)FmTX
299.88 522.666 FmM 1.877 0 61.367(parity updates. )FmTX
364.823 522.666 FmM 1.877 0 165.791(The implementation of this mechanism is)FmTX
299.88 533.666 FmM -0.239 0 241.555(currently in progress and performance measurements should)FmTX
299.88 544.666 FmM 0 0 63.867(be forthcoming.)FmTX
317.88 557.666 FmM 0.653 0 188.469(There have also been several recent research ef)FmTX
510.745 557.666 FmM 0.653 0 28.601(forts to)FmTX
299.88 568.666 FmM 1.864 0 149.675(improve the availability of network \336)FmTX
458.874 568.666 FmM 1.864 0 75.535(le systems, such as)FmTX
299.88 579.666 FmM 7.064 0 39.702(Locus [W)FmTX
345.847 579.666 FmM 7.064 0 172.961(alker83], Coda [Satyanarayanan90], Deceit)FmTX
299.88 590.666 FmM 3.003 0 196.042([Siegel90], Ficus [Guy90] and Harp [Liskov91]. )FmTX
513.393 590.666 FmM 3.003 0 23.604(All of)FmTX
299.88 601.666 FmM 2.41 0 223.247(these systems replicate data by storing complete copies,)FmTX
299.88 612.666 FmM 3.635 0 211.038(which results in higher storage and update costs than)FmTX
299.88 623.666 FmM 2.015 0 26.641(Zebra\325)FmTX
325.971 623.666 FmM 2.015 0 199.927(s parity scheme. Harp uses write-behind logs with)FmTX
299.88 634.666 FmM 1.788 0 229.39(uninterruptible power supplies to avoid synchronous disk)FmTX
299.88 645.666 FmM 3.366 0 216.558(operations and thereby reduce the update overhead. In)FmTX
299.88 656.666 FmM 0.157 0 238.552(addition, some of the systems, such as Locus and Coda, use)FmTX
299.88 667.666 FmM 0.364 0 236.843(the replicas to improve performance by allowing a client to)FmTX
299.88 678.666 FmM 0.379 0 132.678(access the nearest replica; Zebra\325)FmTX
433.524 678.666 FmM 0.379 0 104.961(s parity approach does not)FmTX
299.88 689.666 FmM 0 0 98.594(permit this optimization.)FmTX
317.88 702.666 FmM 0.97 0 156.89(Another approach to highly available \336)FmTX
479.618 702.666 FmM 0.97 0 57.473(le service is to)FmTX
0 0 gm
0 gr
0 0 lin
F T cp
%%Page: ? 14
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 52.667 FmM 0.983 0 34.165(design \336)FmTX
71.148 52.667 FmM 0.983 0 197.107(le servers that can quickly reboot after a software)FmTX
36 63.667 FmM 1.125 0 78.557(failure [Baker92a]. )FmTX
116.628 63.667 FmM 1.125 0 104.968(The idea is to reboot the \336)FmTX
228.343 63.667 FmM 1.125 0 45.527(le server so)FmTX
36 74.667 FmM 1.055 0 55.549(quickly that \336)FmTX
93.659 74.667 FmM 1.055 0 113.84(le service is not interrupted. )FmTX
212.594 74.667 FmM 1.055 0 62.471(This alternative)FmTX
36 85.667 FmM 0.034 0 171.594(does not require redundant copies or parity)FmTX
207.15 85.667 FmM 0.034 0 68.867(, but neither does)FmTX
36 96.667 FmM 0.952 0 229.651(it allow the system to continue operation in the event of a)FmTX
36 107.667 FmM 0 0 68.279(hardware failure.)FmTX
54 120.667 FmM 9.53 0 164.939(Zebra borrows its log structure from LFS)FmTX
36 131.667 FmM 3.179 0 220.188([Rosenblum91], a high-performance write-optimized \336)FmTX
268.903 131.667 FmM 3.179 0 7.217(le)FmTX
36 142.667 FmM 2.463 0 32.773(system. )FmTX
70.687 142.667 FmM 2.463 0 7.219(A)FmTX
77.357 142.667 FmM 2.463 0 179.06( recent paper by Seltzer et. al [Seltzer93] has)FmTX
36 153.667 FmM -0.012 0 139.426(shown that adding extents to FFS [)FmTX
175.356 153.667 FmM -0.012 0 51.653(McKusick84)FmTX
227.009 153.667 FmM -0.012 0 49.146(] results in a)FmTX
36 164.667 FmM -0.18 0 5.559(\336)FmTX
41.559 164.667 FmM -0.18 0 235.999(le system \(called EFS\) that has comparable performance to)FmTX
36 175.666 FmM 2.339 0 42.771(LFS on lar)FmTX
83.27 175.666 FmM 2.339 0 118.545(ge reads and writes. However)FmTX
210.772 175.666 FmM 2.339 0 58.333(, EFS does not)FmTX
36 186.666 FmM 3.497 0 132.715(improve performance for small \336)FmTX
182.704 186.666 FmM 3.497 0 79.426(les as does LFS and)FmTX
36 197.666 FmM 0.89 0 232.114(therefore Zebra, nor does it address the parity and striping)FmTX
36 208.666 FmM 0 0 157.168(issues presented by a striped network \336)FmTX
193.168 208.666 FmM 0 0 39.99(le system.)FmTX
54 221.666 FmM 0.774 0 215.154(The create and delete deltas used by Zebra are similar)FmTX
36 232.666 FmM 0.02 0 239.917(to the active and deleted sublists used in the Grapevine mail)FmTX
36 243.666 FmM 5.307 0 202.969(system to manage entries in a registration database)FmTX
36 254.666 FmM 0.178 0 239.05([Birrell82]. Grapevine used timestamps whereas Zebra uses)FmTX
36 265.666 FmM -0.226 0 242.151(version numbers, but they each allow the system to establish)FmTX
36 276.666 FmM 1.788 0 82.451(an order between dif)FmTX
123.636 276.666 FmM 1.788 0 143.545(ferent sources of information and to)FmTX
36 287.666 FmM 0 0 86.326(recover from crashes.)FmTX
0 3 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
36 316.333 FmM 0 0 7(9)FmTX
57.6 316.333 FmM 0 0 72.338(Conclusions)FmTX
0 7 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
54 337.666 FmM 1.547 0 211.292(Zebra takes two ideas that were originally developed)FmTX
36 348.666 FmM 0.265 0 238.003(for managing disk subsystems, striping with parity and log-)FmTX
36 359.666 FmM 2.141 0 48.037(structured \336)FmTX
86.178 359.666 FmM 2.141 0 167.737(le systems, and applies them to network \336)FmTX
268.903 359.666 FmM 2.141 0 7.217(le)FmTX
36 370.666 FmM 1.708 0 36.663(systems. )FmTX
74.192 370.666 FmM 1.708 0 99.688(The result is a network \336)FmTX
182.419 370.666 FmM 1.708 0 88.577(le system with several)FmTX
36 381.666 FmM 0 0 82.451(attractive properties:)FmTX
0 9 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 394.666 FmM 0.407 0 55.515(Performance)FmTX
0 12 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
109.515 394.666 FmM 0.407 0 18.875(. Lar)FmTX
128.619 394.666 FmM 0.407 0 17.498(ge \336)FmTX
146.523 394.666 FmM 0.407 0 127.153(les are read or written 4-5 times)FmTX
54 405.666 FmM 0.331 0 102.456(as fast as other network \336)FmTX
158.113 405.666 FmM 0.331 0 90.54(le systems and small \336)FmTX
249.978 405.666 FmM 0.331 0 25.811(les are)FmTX
54 416.666 FmM 0 0 87.175(written 20%-3x faster)FmTX
140.626 416.666 FmM 0 0 2.5(.)FmTX
0 14 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 429.666 FmM 1.087 0 44.998(Scalability)FmTX
0 17 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
98.348 429.666 FmM 1.087 0 169.075(. New disks or servers can be added incre-)FmTX
54 440.666 FmM -0.041 0 128.835(mentally to increase the system\325)FmTX
182.121 440.666 FmM -0.041 0 94.124(s bandwidth and capac-)FmTX
54 451.666 FmM 3.168 0 10.557(ity)FmTX
63.907 451.666 FmM 3.168 0 31.641(. Zebra\325)FmTX
98.166 451.666 FmM 3.168 0 135.479(s stripe cleaner automatically reor)FmTX
246.137 451.666 FmM 3.168 0 29.983(ganizes)FmTX
54 462.666 FmM -0.094 0 222.961(data over time to take advantage of the additional band-)FmTX
54 473.666 FmM 0 0 25.276(width.)FmTX
0 19 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 486.666 FmM 0.718 0 30.53(Cost-ef)FmTX
84.53 486.666 FmM 0.718 0 60.781(fective servers)FmTX
0 22 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
146.029 486.666 FmM 0.718 0 125.786(. Storage servers do not need to)FmTX
54 497.666 FmM 0.17 0 221.27(be high-performance machines or have special-purpose)FmTX
54 508.666 FmM 0.94 0 214.6(hardware, since the performance of the system can be)FmTX
54 519.666 FmM 3.845 0 199.05(increased by adding more servers. Zebra transfers)FmTX
54 530.666 FmM 0.383 0 142.991(information to storage servers in lar)FmTX
198.726 530.666 FmM 0.383 0 76.628(ge stripe fragments)FmTX
54 541.666 FmM 3.471 0 194.355(and the servers need not interpret the contents of)FmTX
54 552.666 FmM 0.123 0 212.427(stripes, so the server implementation is simple and ef)FmTX
267.233 552.666 FmM 0.123 0 5.559(\336)FmTX
272.792 552.666 FmM 0.123 0 3.328(-)FmTX
54 563.666 FmM 0 0 21.934(cient.)FmTX
0 24 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 576.666 FmM 0.07 0 7.219(A)FmTX
60.479 576.666 FmM 0.07 0 42.778(vailability)FmTX
0 27 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
102.608 576.666 FmM 0.07 0 173.022(. By combining ideas from RAID and LFS,)FmTX
54 587.666 FmM 0.208 0 220.459(Zebra can use simple mechanisms to manage parity for)FmTX
54 598.666 FmM 1.452 0 48.027(each stripe. )FmTX
104.753 598.666 FmM 1.452 0 164.106(The system can continue operation while)FmTX
54 609.666 FmM 0.094 0 221.27(one of the storage servers is unavailable and can recon-)FmTX
54 620.666 FmM 0.278 0 218.779(struct lost data in the event of a total failure of a server)FmTX
54 631.666 FmM 0 0 29.995(or disk.)FmTX
0 29 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
54 644.666 FmM 0.962 0 43.325(Simplicity)FmTX
0 32 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
96.676 644.666 FmM 0.962 0 172.71(. Zebra adds very little complexity over the)FmTX
54 655.666 FmM 1.624 0 173.262(mechanisms already present in a network \336)FmTX
237.006 655.666 FmM 1.624 0 37.49(le system)FmTX
54 666.666 FmM 0.516 0 217.991(that uses logging for its disk structures. Deltas provide)FmTX
54 677.666 FmM 0.621 0 217.156(a simple way to maintain consistency among the com-)FmTX
54 688.666 FmM 0 0 89.424(ponents of the system.)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 52.667 FmM 1.471 0 225.413(There are at least four areas where we think Zebra could)FmTX
299.88 63.667 FmM 0 0 24.436(bene\336)FmTX
324.316 63.667 FmM 0 0 93.027(t from additional work:)FmTX
317.88 76.667 FmM -0.119 0 2.5( )FmTX
0 3 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
320.261 76.667 FmM -0.119 0 60.259(Name caching)FmTX
0 6 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
380.401 76.667 FmM -0.119 0 5(. )FmTX
385.104 76.667 FmM -0.119 0 9.438(W)FmTX
394.145 76.667 FmM -0.119 0 146.331(ithout name caching, Zebra provides)FmTX
317.88 87.667 FmM 0.275 0 219.644(only about a 20% speedup for small writes in compari-)FmTX
317.88 98.667 FmM 0.565 0 113.586(son to a non-striped Sprite \336)FmTX
434.293 98.667 FmM 0.565 0 42.49(le system. )FmTX
477.735 98.667 FmM 0.565 0 9.438(W)FmTX
486.375 98.667 FmM 0.565 0 51.929(e think that a)FmTX
317.88 109.667 FmM 3.446 0 197.996(system with name caching would provide a much)FmTX
317.88 120.667 FmM 0 0 65.515(greater speedup.)FmTX
0 8 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
317.88 133.667 FmM -0.208 0 6.67(T)FmTX
323.81 133.667 FmM -0.208 0 57.488(ransaction pr)FmTX
380.911 133.667 FmM -0.208 0 37.493(ocessing.)FmTX
0 11 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
418.404 133.667 FmM -0.208 0 2.5( )FmTX
420.517 133.667 FmM -0.208 0 9.438(W)FmTX
429.157 133.667 FmM -0.208 0 111.885(e expect Zebra to work well)FmTX
317.88 144.667 FmM 1.556 0 209.673(on the same workloads as LFS, which includes most)FmTX
317.88 155.667 FmM 0.527 0 139.67(workstation applications. However)FmTX
458.207 155.667 FmM 0.527 0 79.685(, there is little expe-)FmTX
317.88 166.667 FmM 1.783 0 209.641(rience with LFS in a transaction processing environ-)FmTX
317.88 177.666 FmM 2.621 0 67.192(ment and Seltzer)FmTX
390.682 177.666 FmM 2.621 0 3.328(\325)FmTX
393.461 177.666 FmM 2.621 0 136.057(s measurements suggest that there)FmTX
317.88 188.666 FmM 0.604 0 218.499(may be performance problems [Seltzer93]. More work)FmTX
317.88 199.666 FmM 1.14 0 211.855(is needed to understand the problems and see if there)FmTX
317.88 210.666 FmM 0 0 82.48(are simple solutions.)FmTX
0 14 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
317.88 223.666 FmM 0.449 0 43.591(Metadata.)FmTX
0 17 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
361.471 223.666 FmM 0.449 0 174.934( It was convenient in the Zebra prototype to)FmTX
317.88 234.666 FmM 1.182 0 28.325(use a \336)FmTX
348.569 234.666 FmM 1.182 0 71.655(le in an existing \336)FmTX
424.953 234.666 FmM 1.182 0 109.136(le system to store the block)FmTX
317.88 245.666 FmM 1.307 0 101.055(pointers for each Zebra \336)FmTX
424.164 245.666 FmM 1.307 0 95.801(le, but this approach suf)FmTX
525.017 245.666 FmM 1.307 0 14.983(fers)FmTX
317.88 256.666 FmM 0.497 0 88.289(from a number of inef)FmTX
407.98 256.666 FmM 0.497 0 5.559(\336)FmTX
413.539 256.666 FmM 0.497 0 37.2(ciencies. )FmTX
451.057 256.666 FmM 0.497 0 9.438(W)FmTX
459.698 256.666 FmM 0.497 0 78.313(e think that the sys-)FmTX
317.88 267.666 FmM 0.555 0 217.676(tem could be improved if the metadata structures were)FmTX
317.88 278.666 FmM 0 0 177.979(redesigned from scratch with Zebra in mind.)FmTX
0 19 gm
1 fs
bu fc
2 F /|______Times-Bold fnt
bn
( )show
317.88 291.666 FmM 0.678 0 31.382(Small r)FmTX
349.762 291.666 FmM 0.678 0 21.387(eads.)FmTX
0 22 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
371.149 291.666 FmM 0.678 0 164.102( It would be interesting to verify whether)FmTX
317.88 302.666 FmM 0.278 0 136.079(there is enough locality in small \336)FmTX
455.625 302.666 FmM 0.278 0 83.542(le reads for prefetch-)FmTX
317.88 313.666 FmM 2.174 0 201.594(ing of whole stripes to provide a substantial perfor)FmTX
536.672 313.666 FmM 2.174 0 3.328(-)FmTX
317.88 324.666 FmM 0 0 84.412(mance improvement.)FmTX
299.88 335.666 FmM 2.677 0 129.646(Overall we believe that Zebra of)FmTX
442.734 335.666 FmM 2.677 0 91.912(fers higher throughput,)FmTX
299.88 346.666 FmM 5.185 0 44.985(availability)FmTX
344.216 346.666 FmM 5.185 0 110.796(, and scalability than today\325)FmTX
475.202 346.666 FmM 5.185 0 47.212(s network \336)FmTX
532.783 346.666 FmM 5.185 0 7.217(le)FmTX
299.88 357.666 FmM 2.741 0 212.71(systems at the cost of only a small increase in system)FmTX
299.88 368.666 FmM 0 0 44.99(complexity)FmTX
344.221 368.666 FmM 0 0 2.5(.)FmTX
0 24 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 397.333 FmM 0 0 14(10)FmTX
321.48 397.333 FmM 0 0 109.638(Acknowledgments)FmTX
0 28 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
317.88 418.666 FmM 0.801 0 9.438(W)FmTX
326.52 418.666 FmM 0.801 0 206.274(e are grateful to our paper shepherd Paul Leach and)FmTX
299.88 429.666 FmM 0.999 0 232.129(the anonymous referees for their advice on improving this)FmTX
299.88 440.666 FmM 2.003 0 22.205(paper)FmTX
321.535 440.666 FmM 2.003 0 69.133(. Felipe Cabrera, )FmTX
396.127 440.666 FmM 2.003 0 103.838(Ann Drapeau, Ken Shirrif)FmTX
505.795 440.666 FmM 2.003 0 32.202(f, Bruce)FmTX
299.88 451.666 FmM 1.218 0 231.592(Montague, and Mary Baker provided useful comments on)FmTX
299.88 462.666 FmM 2.061 0 104.944(various drafts of the paper)FmTX
412.519 462.666 FmM 2.061 0 117.175(. Ken Lutz, Peter Chen, Peter)FmTX
299.88 473.666 FmM 2.058 0 52.48(Belleau, and )FmTX
355.928 473.666 FmM 2.058 0 169.663(Ares Ho built the timer boards that proved)FmTX
299.88 484.666 FmM 4.746 0 206.897(invaluable in debugging the system and running the)FmTX
299.88 495.666 FmM 0 0 51.367(experiments.)FmTX
0 31 gm
1 fs
14 fz
bu fc
2 F /|______Times-Bold fnt
bn
( )show
299.88 524.333 FmM 0 0 7(1)FmTX
306.111 524.333 FmM 0 0 7(1)FmTX
321.48 524.333 FmM 0 0 33.407(Refer)FmTX
354.638 524.333 FmM 0 0 31.869(ences)FmTX
0 35 gm
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
299.88 545.666 FmM 0 0 40.53([Baker91])FmTX
353.88 545.666 FmM -0.159 0 187.712( M. G. Baker, J. H. Hartman, M. D. Kupfer, K.)FmTX
353.88 555.666 FmM 2.005 0 174.092(W. Shirriff, and J. K. Ousterhout, Measure-)FmTX
353.88 565.666 FmM -0.618 0 144.136(ments of a Distributed File System, )FmTX
0 38 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
494.306 565.666 FmM -0.618 0 46.931(Proc. of the)FmTX
353.88 575.666 FmM 1.582 0 174.126(13th Symp. on Operating Sys. Prin. \(SOSP\))FmTX
0 40 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
537.5 575.666 FmM 1.582 0 2.5(,)FmTX
353.88 585.666 FmM 5.896 0 133.035(Oct. 1991, 198-212. Published as)FmTX
0 43 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
510.498 585.666 FmM 5.896 0 23.606( ACM)FmTX
353.88 595.666 FmM 0 0 155.503(SIGOPS Operating Systems Review 25)FmTX
0 45 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
509.383 595.666 FmM 0 0 12.5(, 5.)FmTX
299.88 607.666 FmM 0 0 44.968([Baker92a])FmTX
353.88 607.666 FmM -0.23 0 187.732(M. Baker and M. Sullivan, The Recovery Box:)FmTX
353.88 617.666 FmM 1.306 0 178.286(Using Fast Recovery to Provide High Avail-)FmTX
353.88 627.666 FmM 2.323 0 30.552(ability, )FmTX
0 48 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
386.755 627.666 FmM 2.323 0 141.631(Proc. of the Summer 1992 USENIX)FmTX
353.88 637.666 FmM 0 0 21.948(Conf.)FmTX
0 51 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
375.828 637.666 FmM 0 0 76.655(, June 1992, 31-43.)FmTX
299.88 649.666 FmM 0 0 45.53([Baker92b])FmTX
353.88 649.666 FmM 0.193 0 184.385( M. Baker, S. Asami, E. Deprit, and J. Ouster-)FmTX
353.88 659.666 FmM 0.402 0 184.109(hout, Non-Volatile Memory for Fast, Reliable)FmTX
353.88 669.666 FmM 0.976 0 56.387(File Systems, )FmTX
0 53 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
412.218 669.666 FmM 0.976 0 121.929(Proc. of the Fifth Int. Conf. on)FmTX
353.88 679.666 FmM 0.698 0 181.931(Arch. Support for Prog. Lang. and Operating)FmTX
353.88 689.666 FmM 0 0 59.978(Sys. \(ASPLOS\))FmTX
0 56 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
413.858 689.666 FmM 0 0 75.264(, Oct. 1992, 10-22.)FmTX
0 0 gm
0 gr
0 0 lin
F T cp
%%Page: ? 15
op
0 0 776 576 fr
0 0 xl
0 0 pen
0 0 gm
(nc 0 0 776 576 6 rc)kp
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
0 fs
10 fz
bu fc
2 F /|______Times-Roman fnt
bn
( )show
36 52.667 FmM 0 0 54.976([Bernstein81])FmTX
90.976 52.667 FmM -0.011 0 185.222( P. A. Bernstein and N. Goodman, Concurren-)FmTX
90 62.667 FmM 1.678 0 177.732(cy Control in Distributed Database Systems,)FmTX
0 3 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
90 72.667 FmM 1.582 0 114.146(ACM Computing Surveys 13)FmTX
0 6 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
208.891 72.667 FmM 1.582 0 62.483(, 2 \(June 1981\),)FmTX
90 82.667 FmM 0 0 35.828(185-222.)FmTX
36 94.667 FmM 0 0 42.754([Birrell82])FmTX
90 94.667 FmM 0.531 0 181.343( A. D. Birrell, R. Levin, R. M. Needham, and)FmTX
90 104.667 FmM 1.358 0 177.974(M. D. Schroeder, Grapevine: An Exercise in)FmTX
90 114.667 FmM 1.896 0 97.493(Distributed Computing, )FmTX
0 8 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
191.285 114.667 FmM 1.896 0 79.146(COMM of the ACM)FmTX
90 124.667 FmM 0 0 10(25)FmTX
0 11 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
100 124.667 FmM 0 0 100.53(, 4 \(Apr. 1982\), 260-274.)FmTX
36 136.667 FmM 0 0 48.296([Cabrera91])FmTX
90 136.667 FmM 0.994 0 177.17( L. Cabrera and D. D. E. Long, Swift: Using)FmTX
90 146.667 FmM 0.47 0 183.301(Distributed Disk Striping to Provide High I/O)FmTX
90 156.667 FmM 3.342 0 48.589(Data Rates, )FmTX
0 13 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
145.272 156.667 FmM 3.342 0 86.099(Computing Systems 4)FmTX
0 16 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
238.055 156.667 FmM 3.342 0 31.382(, 4 \(Fall)FmTX
90 166.666 FmM 0 0 64.155(1991\), 405-436.)FmTX
36 178.666 FmM 0 0 32.764([Cao93])FmTX
90 178.666 FmM 1.208 0 175.244( P. Cao, S. B. Lim, S. Venkataraman, and J.)FmTX
90 188.666 FmM 0.244 0 184.9(Wilkes, The TickerTAIP parallel RAID archi-)FmTX
90 198.666 FmM 0.285 0 32.2(tecture, )FmTX
0 18 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
122.485 198.666 FmM 0.285 0 151.638(Proc. of the 20th Annual Int. Symp. of)FmTX
90 208.666 FmM 0 0 64.431(Computer Arch.)FmTX
0 21 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
154.431 208.666 FmM 0 0 76.655(, May 1993, 52-63.)FmTX
36 220.666 FmM 0 0 37.764([Chen90])FmTX
90 220.666 FmM 0.387 0 183.022( P. M. Chen and D. A. Patterson, Maximizing)FmTX
90 230.666 FmM 0.29 0 151.873(Performance in a Striped Disk Array, )FmTX
0 23 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
243.615 230.666 FmM 0.29 0 32.214(Proc. of)FmTX
90 240.666 FmM -0.034 0 183.855(the 17th Annual Int. Symp. of Computer Arch.)FmTX
0 26 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
273.62 240.666 FmM -0.034 0 2.5(,)FmTX
90 250.666 FmM 0 0 81.655(May 1990, 322-331.)FmTX
36 262.666 FmM 0 0 48.32([Chutani92])FmTX
90 262.666 FmM 0.685 0 179.956( S. Chutani, O. T. Anderson, M. L. Kazar, B.)FmTX
90 272.666 FmM 1.571 0 173.552(W. Leverett, W. A. Mason, and R. N. Side-)FmTX
90 282.666 FmM -0.152 0 140.254(botham, The Episode File System, )FmTX
0 28 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
229.493 282.666 FmM -0.152 0 46.931(Proc. of the)FmTX
90 292.666 FmM 0 0 111.094(Winter 1992 USENIX Conf.)FmTX
0 31 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
201.094 292.666 FmM 0 0 74.155(, Jan. 1992, 43-60.)FmTX
36 304.666 FmM 0 0 43.87([Dibble88])FmTX
90 304.666 FmM 1.862 0 167.495( P. C. Dibble, M. L. Scott, and C. S. Ellis,)FmTX
90 314.666 FmM 1.071 0 180.764(Bridge: A High-Performance File System for)FmTX
90 324.666 FmM 0.366 0 80.796(Parallel Processors, )FmTX
0 34 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
171.527 324.666 FmM 0.366 0 102.764(Proc. of the 8th Int. Conf.)FmTX
90 334.666 FmM 0.469 0 134.98(on Dist. Computing Sys. \(ICDCS\))FmTX
0 36 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
226.855 334.666 FmM 0.469 0 48.328(, 1988, 154-)FmTX
90 344.666 FmM 0 0 17.5(161.)FmTX
36 356.666 FmM 0 0 33.875([Guy90])FmTX
90 356.666 FmM -0.4 0 190.52( R. G. Guy, J. S. Heidemann, W. Mak, T. W. P.)FmTX
90 366.666 FmM 0.009 0 186.057(Jr., G. J. Popek, and D. Rothmeier, Implemen-)FmTX
90 376.666 FmM 2.647 0 170.239(tation of the Ficus Replicated File System,)FmTX
0 39 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
90 386.666 FmM -0.47 0 166.079(Proc. of the Summer 1990 USENIX Conf.)FmTX
0 42 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
253.262 386.666 FmM -0.47 0 23.328(, June)FmTX
90 396.666 FmM 0 0 50.828(1990, 63-71.)FmTX
36 408.666 FmM 0 0 55.53([Hagmann87])FmTX
91.53 408.666 FmM 0.124 0 183.845( R. Hagmann, Reimplementing the Cedar File)FmTX
90 418.666 FmM 2.227 0 174.985(System Using Logging and Group Commit,)FmTX
0 44 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
90 428.666 FmM -0.619 0 191.074(Proc. of the 11th Symp. on Operating Sys. Prin.)FmTX
90 438.666 FmM 3.064 0 29.983(\(SOSP\))FmTX
0 47 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
119.983 438.666 FmM 3.064 0 140.818(, Nov. 1987, 155-162. Published as)FmTX
0 49 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
90 448.666 FmM 0.902 0 179.109(ACM SIGOPS Operating Systems Review 21)FmTX
0 52 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
273.62 448.666 FmM 0.902 0 2.5(,)FmTX
90 458.666 FmM 0 0 7.5(5.)FmTX
36 470.666 FmM 0 0 48.86([Howard88])FmTX
90 470.666 FmM 0.286 0 183.264( J. H. Howard, M. L. Kazar, S. G. Menees, D.)FmTX
90 480.666 FmM 1.77 0 175.5(A. Nichols, M. Satyanarayanan, R. N. Side-)FmTX
90 490.666 FmM 2.352 0 169.656(botham, and M. J. West, Scale and Perfor-)FmTX
90 500.666 FmM 3.203 0 145.796(mance in a Distributed File System, )FmTX
0 54 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
255.014 500.666 FmM 3.203 0 21.106(ACM)FmTX
90 510.666 FmM 0.283 0 122.485(Trans. on Computer Systems 6)FmTX
0 57 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
213.618 510.666 FmM 0.283 0 61.653(, 1 \(Feb. 1988\),)FmTX
90 520.666 FmM 0 0 25.828(51-81.)FmTX
36 532.666 FmM 0 0 31.641([Lee92])FmTX
90 532.666 FmM -0.32 0 189.956( E. K. Lee, P. M. Chen, J. H. Hartman, A. L. C.)FmTX
90 542.666 FmM 0.503 0 181.597(Drapeau, E. L. Miller, R. H. Katz, G. A. Gib-)FmTX
90 552.666 FmM 0.051 0 185.762(son, and D. A. Patterson, RAID-II: A Scalable)FmTX
90 562.666 FmM -0.253 0 187.134(Storage Architecture for High-Bandwidth Net-)FmTX
90 572.666 FmM 4.232 0 164.961(work File Service, Tech. Rep. UCB/CSD)FmTX
90 582.666 FmM 3.342 0 172.751(92/672, Computer Science Division, EECS)FmTX
90 592.666 FmM 0 0 94.993(Dept., UCB, Feb. 1992.)FmTX
36 604.666 FmM 0 0 44.431([Liskov91])FmTX
90 604.666 FmM 3.895 0 158.857( B. Liskov, S. Ghemawat, R. Gruber, P.)FmTX
90 614.666 FmM 0.241 0 184.673(Johnson, L. Shrira, and M. Williams, Replica-)FmTX
90 624.666 FmM 0.097 0 118.035(tion in the Harp File System, )FmTX
0 59 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
208.619 624.666 FmM 0.097 0 67.209(Proc. of the 13th)FmTX
90 634.666 FmM 1.723 0 153.848(Symp. on Operating Sys. Prin. \(SOSP\))FmTX
0 62 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
252.461 634.666 FmM 1.723 0 21.936(, Oct.)FmTX
90 644.666 FmM 2.508 0 113.599(1991, 226-238. Published as)FmTX
0 65 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
211.123 644.666 FmM 2.508 0 59.98( ACM SIGOPS)FmTX
90 654.666 FmM 0 0 119.128(Operating Systems Review 25)FmTX
0 67 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
209.128 654.666 FmM 0 0 12.5(, 5.)FmTX
36 666.666 FmM 0 0 51.638([LoVerso93])FmTX
90 666.666 FmM 0.423 0 182.737( S. J. LoVerso, M. Isman, A. Nanopoulos, W.)FmTX
90 676.666 FmM 0.287 0 183.826(Nesheim, E. D. Milne, and R. Wheeler, sfs: A)FmTX
90 686.666 FmM -0.201 0 140.793(Parallel File System for the CM-5, )FmTX
0 70 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
229.59 686.666 FmM -0.201 0 46.931(Proc. of the)FmTX
90 696.666 FmM 0.053 0 116.648(Summer 1993 USENIX Conf.)FmTX
0 73 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
206.806 696.666 FmM 0.053 0 69.155(, June 1993, 291-)FmTX
90 706.666 FmM 0 0 17.5(305.)FmTX
0 0 gm
0 gr
0 0 lin
0 0 lin
0 0 gm
F 1 setTxMode
( )show
299.88 52.667 FmM 0 0 58.308([McKusick84])FmTX
358.188 52.667 FmM -0.563 0 187.441( M. K. McKusick, W. N. Joy, S. J. Leffler, and)FmTX
353.88 62.667 FmM -0.397 0 168.589(R. S. Fabry, A Fast File System for Unix, )FmTX
0 3 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
518.894 62.667 FmM -0.397 0 21.106(ACM)FmTX
353.88 72.667 FmM -0.034 0 122.485(Trans. on Computer Systems 2)FmTX
0 5 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
476.228 72.667 FmM -0.034 0 63.875(, 3 \(Aug. 1984\),)FmTX
353.88 82.667 FmM 0 0 35.828(181-197.)FmTX
299.88 94.667 FmM 0 0 44.98([Nelson88])FmTX
353.88 94.667 FmM 0.173 0 184.395( M. N. Nelson, B. B. Welch, and J. K. Ouster-)FmTX
353.88 104.667 FmM 0.404 0 183.293(hout, Caching in the Sprite Network File Sys-)FmTX
353.88 114.667 FmM 1.433 0 19.995(tem, )FmTX
0 8 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
375.308 114.667 FmM 1.433 0 146.091(ACM Trans. on Computer Systems 6)FmTX
0 11 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
528.566 114.667 FmM 1.433 0 10(, 1)FmTX
353.88 124.667 FmM 0 0 87.48(\(Feb. 1988\), 134-154.)FmTX
299.88 136.667 FmM 0 0 61.086([Ousterhout88])FmTX
360.966 136.667 FmM -0.055 0 179.417( J. Ousterhout, A. Cherenson, F. Douglis, M.)FmTX
353.88 146.667 FmM -0.624 0 190.486(Nelson, and B. Welch, The Sprite Network Op-)FmTX
353.88 156.667 FmM 1.907 0 64.705(erating System, )FmTX
0 13 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
422.399 156.667 FmM 1.907 0 76.648(IEEE Computer 21)FmTX
0 16 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
502.861 156.667 FmM 1.907 0 33.325(, 2 \(Feb.)FmTX
353.88 166.666 FmM 0 0 54.155(1988\), 23-36.)FmTX
299.88 178.666 FmM 0 0 53.865([Patterson88])FmTX
353.88 178.666 FmM -0.106 0 187.175( D. A. Patterson, G. Gibson, and R. H. Katz, A)FmTX
353.88 188.666 FmM 3.073 0 170.757(Case for Redundant Arrays of Inexpensive)FmTX
353.88 198.666 FmM 1.038 0 61.367(Disks \(RAID\), )FmTX
0 18 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
417.324 198.666 FmM 1.038 0 117.485(Proc. of the 1988 ACM Conf.)FmTX
353.88 208.666 FmM 3.569 0 144.946(on Management of Data \(SIGMOD\))FmTX
0 21 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
513.103 208.666 FmM 3.569 0 23.328(, June)FmTX
353.88 218.666 FmM 0 0 60.828(1988, 109-116.)FmTX
299.88 230.666 FmM 0 0 41.636([Pierce89])FmTX
353.88 230.666 FmM 2.161 0 168.831( P. Pierce, A Concurrent File System for a)FmTX
353.88 240.666 FmM 5.082 0 165.793(Highly Parallel Mass Storage Subsystem,)FmTX
0 23 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
353.88 250.666 FmM 2.835 0 169.111(Proc. of the Fourth Conference on Hyper-)FmTX
353.88 260.666 FmM 0 0 22.766(cubes)FmTX
0 26 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
376.646 260.666 FmM 0 0 49.155(, Mar. 1989.)FmTX
299.88 272.666 FmM 0 0 62.209([Rosenblum91])FmTX
362.089 272.666 FmM 1.492 0 167.468( M. Rosenblum and J. K. Ousterhout, The)FmTX
353.88 282.666 FmM 2.182 0 175.21(Design and Implementation of a Log-Struc-)FmTX
353.88 292.666 FmM 0.526 0 75.542(tured File System, )FmTX
0 28 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
431.001 292.666 FmM 0.526 0 106.367(Proc. of the 13th Symp. on)FmTX
353.88 302.666 FmM 0.194 0 114.69(Operating Sys. Prin. \(SOSP\))FmTX
0 31 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
469.153 302.666 FmM 0.194 0 70.264(, Oct. 1991, 1-15.)FmTX
353.88 312.666 FmM -0.378 0 50.271(Published as)FmTX
0 34 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
403.773 312.666 FmM -0.378 0 137.737( ACM SIGOPS Operating Systems)FmTX
353.88 322.666 FmM 0 0 41.372(Review 25)FmTX
0 36 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
395.252 322.666 FmM 0 0 12.5(, 5.)FmTX
299.88 334.666 FmM 0 0 79.951([Satyanarayanan90])FmTX
379.831 334.666 FmM -0.087 0 160.779( M. Satyanarayanan, J. J. Kistler, P. Ku-)FmTX
353.88 344.666 FmM 1.241 0 174.954(mar, M. E. Okasaki, E. H. Siegel, and D. C.)FmTX
353.88 354.666 FmM -0.226 0 187.703(Steere, Coda: a highly available file system for)FmTX
353.88 364.666 FmM -0.081 0 164.956(a distributed workstation   environment., )FmTX
0 39 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
518.347 364.666 FmM -0.081 0 21.653(IEEE)FmTX
353.88 374.666 FmM 0.838 0 97.222(Trans. on Computers 39)FmTX
0 42 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
453.617 374.666 FmM 0.838 0 83.03(, 4 \(Apr. 1990\), 447-)FmTX
353.88 384.666 FmM 0 0 17.5(459.)FmTX
299.88 396.666 FmM 0 0 47.209([Schloss90])FmTX
353.88 396.666 FmM -0.34 0 188.84( G. A. Schloss and M. Stonebraker, Highly Re-)FmTX
353.88 406.666 FmM 4.253 0 169.106(dundant Management of Distributed Data,)FmTX
0 45 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
353.88 416.666 FmM 0.564 0 182.173(Proc. of the Workshop on the Management of)FmTX
353.88 426.666 FmM 0 0 65.256(Replicated Data)FmTX
0 47 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
419.136 426.666 FmM 0 0 78.047(, Nov. 1990, 91-95.)FmTX
299.88 438.666 FmM 0 0 44.414([Seltzer93])FmTX
353.88 438.666 FmM -0.519 0 190.791( M. Seltzer, K. Bostic, M. K. McKusick, and C.)FmTX
353.88 448.666 FmM 2.237 0 174.937(Staelin, An Implementation of a Log-Struc-)FmTX
353.88 458.666 FmM 0.009 0 117.183(tured File System for UNIX, )FmTX
0 50 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
471.108 458.666 FmM 0.009 0 68.865(Proc. of the Win-)FmTX
353.88 468.666 FmM 0 0 94.988(ter 1993 USENIX Conf.)FmTX
0 53 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
448.868 468.666 FmM 0 0 84.155(, Jan. 1993, 307-326.)FmTX
299.88 480.666 FmM 0 0 46.082([Shirriff92])FmTX
353.88 480.666 FmM 0.41 0 183.247( K. Shirriff and J. Ousterhout, A Trace-driven)FmTX
353.88 490.666 FmM 0.764 0 180.774(Analysis of Name and Attribute Caching in a)FmTX
353.88 500.666 FmM 1.582 0 99.985(Distributed File System, )FmTX
0 55 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
458.611 500.666 FmM 1.582 0 76.643(Proc. of the Winter)FmTX
353.88 510.666 FmM 0 0 81.382(1992 USENIX Conf.)FmTX
0 58 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
435.262 510.666 FmM 0 0 84.155(, Jan. 1992, 315-331.)FmTX
299.88 522.666 FmM 0 0 41.648([Siegel90])FmTX
353.88 522.666 FmM 1.05 0 177.717( A. Siegel, K. Birman, and K. Marzullo, De-)FmTX
353.88 532.666 FmM -0.084 0 164.688(ceit: A Flexible Distributed File System, )FmTX
0 60 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
518.064 532.666 FmM -0.084 0 21.936(Proc.)FmTX
353.88 542.666 FmM -0.55 0 141.643(of the Summer 1990 USENIX Conf.)FmTX
0 63 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
492.772 542.666 FmM -0.55 0 48.328(, June 1990,)FmTX
353.88 552.666 FmM 0 0 25.828(51-61.)FmTX
299.88 564.666 FmM 0 0 46.077([Walker83])FmTX
353.88 564.666 FmM -0.582 0 191.355( B. Walker, G. Popek, R. English, C. Kline, and)FmTX
353.88 574.666 FmM 1.401 0 179.114(G. Thiel, The LOCUS Distributed Operating)FmTX
353.88 584.666 FmM 0.958 0 34.443(System, )FmTX
0 65 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
389.281 584.666 FmM 0.958 0 144.971(Proc. of the 9th Symp. on Operating)FmTX
353.88 594.666 FmM 2.6 0 71.086(Sys. Prin. \(SOSP\))FmTX
0 68 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
430.166 594.666 FmM 2.6 0 99.434(, Nov. 1983, 49-70. Pub-)FmTX
353.88 604.666 FmM -0.451 0 34.712(lished as)FmTX
0 71 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
388.141 604.666 FmM -0.451 0 154.111( ACM SIGOPS Operating Systems Re-)FmTX
353.88 614.666 FmM 0 0 30.825(view 17)FmTX
0 73 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
384.705 614.666 FmM 0 0 12.5(, 5.)FmTX
299.88 626.666 FmM 0 0 44.978([Wilkes92])FmTX
353.88 626.666 FmM -0.501 0 189.629( J. Wilkes, DataMesh research project, phase 1,)FmTX
0 76 gm
2 fs
bu fc
2 F /|______Times-Italic fnt
bn
( )show
353.88 636.666 FmM 0.659 0 179.666(Proc. of the USENIX File Systems Workshop)FmTX
0 79 gm
0 fs
bu fc
2 F /|______Times-Roman fnt
bn
( )show
537.5 636.666 FmM 0.659 0 2.5(,)FmTX
353.88 646.666 FmM 0 0 74.155(May 1992, 63-69. )FmTX
0 0 gm
0 gr
0 0 lin
F T cp
%%Trailer
cd
end
%%Pages: 15 0
%%EOF
